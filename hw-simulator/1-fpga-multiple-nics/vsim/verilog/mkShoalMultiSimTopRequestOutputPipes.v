//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule methods_startSwitching_enq  CF ( methods_printSwStats_enq,
// 					  methods_printSwStats_notFull,
// 					  methods_start_shoal_enq,
// 					  methods_start_shoal_notFull,
// 					  portalIfc_messageSize_size,
// 					  portalIfc_indications_0_first,
// 					  portalIfc_indications_0_deq,
// 					  portalIfc_indications_1_first,
// 					  portalIfc_indications_1_deq,
// 					  portalIfc_indications_1_notEmpty,
// 					  portalIfc_indications_2_first,
// 					  portalIfc_indications_2_deq,
// 					  portalIfc_indications_2_notEmpty );
// schedule methods_startSwitching_enq  C ( methods_startSwitching_enq );
//
// schedule methods_startSwitching_notFull  CF ( methods_startSwitching_notFull,
// 					      methods_printSwStats_enq,
// 					      methods_printSwStats_notFull,
// 					      methods_start_shoal_enq,
// 					      methods_start_shoal_notFull,
// 					      portalIfc_messageSize_size,
// 					      portalIfc_indications_0_first,
// 					      portalIfc_indications_0_notEmpty,
// 					      portalIfc_indications_1_first,
// 					      portalIfc_indications_1_deq,
// 					      portalIfc_indications_1_notEmpty,
// 					      portalIfc_indications_2_first,
// 					      portalIfc_indications_2_deq,
// 					      portalIfc_indications_2_notEmpty,
// 					      portalIfc_intr_status,
// 					      portalIfc_intr_channel );
// schedule methods_startSwitching_notFull  SB ( methods_startSwitching_enq,
// 					      portalIfc_indications_0_deq );
//
// schedule methods_printSwStats_enq  CF ( methods_startSwitching_enq,
// 					methods_startSwitching_notFull,
// 					methods_start_shoal_enq,
// 					methods_start_shoal_notFull,
// 					portalIfc_messageSize_size,
// 					portalIfc_indications_0_first,
// 					portalIfc_indications_0_deq,
// 					portalIfc_indications_0_notEmpty,
// 					portalIfc_indications_1_first,
// 					portalIfc_indications_1_deq,
// 					portalIfc_indications_2_first,
// 					portalIfc_indications_2_deq,
// 					portalIfc_indications_2_notEmpty );
// schedule methods_printSwStats_enq  C ( methods_printSwStats_enq );
//
// schedule methods_printSwStats_notFull  CF ( methods_startSwitching_enq,
// 					    methods_startSwitching_notFull,
// 					    methods_printSwStats_notFull,
// 					    methods_start_shoal_enq,
// 					    methods_start_shoal_notFull,
// 					    portalIfc_messageSize_size,
// 					    portalIfc_indications_0_first,
// 					    portalIfc_indications_0_deq,
// 					    portalIfc_indications_0_notEmpty,
// 					    portalIfc_indications_1_first,
// 					    portalIfc_indications_1_notEmpty,
// 					    portalIfc_indications_2_first,
// 					    portalIfc_indications_2_deq,
// 					    portalIfc_indications_2_notEmpty,
// 					    portalIfc_intr_status,
// 					    portalIfc_intr_channel );
// schedule methods_printSwStats_notFull  SB ( methods_printSwStats_enq,
// 					    portalIfc_indications_1_deq );
//
// schedule methods_start_shoal_enq  CF ( methods_startSwitching_enq,
// 				       methods_startSwitching_notFull,
// 				       methods_printSwStats_enq,
// 				       methods_printSwStats_notFull,
// 				       portalIfc_messageSize_size,
// 				       portalIfc_indications_0_first,
// 				       portalIfc_indications_0_deq,
// 				       portalIfc_indications_0_notEmpty,
// 				       portalIfc_indications_1_first,
// 				       portalIfc_indications_1_deq,
// 				       portalIfc_indications_1_notEmpty,
// 				       portalIfc_indications_2_first,
// 				       portalIfc_indications_2_deq );
// schedule methods_start_shoal_enq  C ( methods_start_shoal_enq );
//
// schedule methods_start_shoal_notFull  CF ( methods_startSwitching_enq,
// 					   methods_startSwitching_notFull,
// 					   methods_printSwStats_enq,
// 					   methods_printSwStats_notFull,
// 					   methods_start_shoal_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty,
// 					   portalIfc_indications_2_first,
// 					   portalIfc_indications_2_notEmpty,
// 					   portalIfc_intr_status,
// 					   portalIfc_intr_channel );
// schedule methods_start_shoal_notFull  SB ( methods_start_shoal_enq,
// 					   portalIfc_indications_2_deq );
//
// schedule portalIfc_messageSize_size  CF ( methods_startSwitching_enq,
// 					  methods_startSwitching_notFull,
// 					  methods_printSwStats_enq,
// 					  methods_printSwStats_notFull,
// 					  methods_start_shoal_enq,
// 					  methods_start_shoal_notFull,
// 					  portalIfc_messageSize_size,
// 					  portalIfc_indications_0_first,
// 					  portalIfc_indications_0_deq,
// 					  portalIfc_indications_0_notEmpty,
// 					  portalIfc_indications_1_first,
// 					  portalIfc_indications_1_deq,
// 					  portalIfc_indications_1_notEmpty,
// 					  portalIfc_indications_2_first,
// 					  portalIfc_indications_2_deq,
// 					  portalIfc_indications_2_notEmpty,
// 					  portalIfc_intr_status,
// 					  portalIfc_intr_channel );
//
// schedule portalIfc_indications_0_first  CF ( methods_startSwitching_enq,
// 					     methods_startSwitching_notFull,
// 					     methods_printSwStats_enq,
// 					     methods_printSwStats_notFull,
// 					     methods_start_shoal_enq,
// 					     methods_start_shoal_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_deq,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_0_first  SB ( portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_0_deq  CF ( methods_startSwitching_enq,
// 					   methods_printSwStats_enq,
// 					   methods_printSwStats_notFull,
// 					   methods_start_shoal_enq,
// 					   methods_start_shoal_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty,
// 					   portalIfc_indications_2_first,
// 					   portalIfc_indications_2_deq,
// 					   portalIfc_indications_2_notEmpty );
// schedule portalIfc_indications_0_deq  C ( portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_0_notEmpty  CF ( methods_startSwitching_notFull,
// 						methods_printSwStats_enq,
// 						methods_printSwStats_notFull,
// 						methods_start_shoal_enq,
// 						methods_start_shoal_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_deq,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_deq,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_0_notEmpty  SB ( methods_startSwitching_enq,
// 						portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_1_first  CF ( methods_startSwitching_enq,
// 					     methods_startSwitching_notFull,
// 					     methods_printSwStats_enq,
// 					     methods_printSwStats_notFull,
// 					     methods_start_shoal_enq,
// 					     methods_start_shoal_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_deq,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_1_first  SB ( portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_1_deq  CF ( methods_startSwitching_enq,
// 					   methods_startSwitching_notFull,
// 					   methods_printSwStats_enq,
// 					   methods_start_shoal_enq,
// 					   methods_start_shoal_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty,
// 					   portalIfc_indications_2_first,
// 					   portalIfc_indications_2_deq,
// 					   portalIfc_indications_2_notEmpty );
// schedule portalIfc_indications_1_deq  C ( portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_1_notEmpty  CF ( methods_startSwitching_enq,
// 						methods_startSwitching_notFull,
// 						methods_printSwStats_notFull,
// 						methods_start_shoal_enq,
// 						methods_start_shoal_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_deq,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_deq,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_1_notEmpty  SB ( methods_printSwStats_enq,
// 						portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_2_first  CF ( methods_startSwitching_enq,
// 					     methods_startSwitching_notFull,
// 					     methods_printSwStats_enq,
// 					     methods_printSwStats_notFull,
// 					     methods_start_shoal_enq,
// 					     methods_start_shoal_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_2_first  SB ( portalIfc_indications_2_deq );
//
// schedule portalIfc_indications_2_deq  CF ( methods_startSwitching_enq,
// 					   methods_startSwitching_notFull,
// 					   methods_printSwStats_enq,
// 					   methods_printSwStats_notFull,
// 					   methods_start_shoal_enq,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty );
// schedule portalIfc_indications_2_deq  C ( portalIfc_indications_2_deq );
//
// schedule portalIfc_indications_2_notEmpty  CF ( methods_startSwitching_enq,
// 						methods_startSwitching_notFull,
// 						methods_printSwStats_enq,
// 						methods_printSwStats_notFull,
// 						methods_start_shoal_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_deq,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_deq,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_2_notEmpty  SB ( methods_start_shoal_enq,
// 						portalIfc_indications_2_deq );
//
// schedule portalIfc_intr_status  CF ( methods_startSwitching_notFull,
// 				     methods_printSwStats_notFull,
// 				     methods_start_shoal_notFull,
// 				     portalIfc_messageSize_size,
// 				     portalIfc_indications_0_first,
// 				     portalIfc_indications_0_notEmpty,
// 				     portalIfc_indications_1_first,
// 				     portalIfc_indications_1_notEmpty,
// 				     portalIfc_indications_2_first,
// 				     portalIfc_indications_2_notEmpty,
// 				     portalIfc_intr_status,
// 				     portalIfc_intr_channel );
// schedule portalIfc_intr_status  SB ( methods_startSwitching_enq,
// 				     methods_printSwStats_enq,
// 				     methods_start_shoal_enq,
// 				     portalIfc_indications_0_deq,
// 				     portalIfc_indications_1_deq,
// 				     portalIfc_indications_2_deq );
//
// schedule portalIfc_intr_channel  CF ( methods_startSwitching_notFull,
// 				      methods_printSwStats_notFull,
// 				      methods_start_shoal_notFull,
// 				      portalIfc_messageSize_size,
// 				      portalIfc_indications_0_first,
// 				      portalIfc_indications_0_notEmpty,
// 				      portalIfc_indications_1_first,
// 				      portalIfc_indications_1_notEmpty,
// 				      portalIfc_indications_2_first,
// 				      portalIfc_indications_2_notEmpty,
// 				      portalIfc_intr_status,
// 				      portalIfc_intr_channel );
// schedule portalIfc_intr_channel  SB ( methods_startSwitching_enq,
// 				      methods_printSwStats_enq,
// 				      methods_start_shoal_enq,
// 				      portalIfc_indications_0_deq,
// 				      portalIfc_indications_1_deq,
// 				      portalIfc_indications_2_deq );
//
//
// Ports:
// Name                         I/O  size props
// RDY_methods_startSwitching_enq  O     1
// methods_startSwitching_notFull  O     1
// RDY_methods_startSwitching_notFull  O     1 const
// RDY_methods_printSwStats_enq   O     1
// methods_printSwStats_notFull   O     1
// RDY_methods_printSwStats_notFull  O     1 const
// RDY_methods_start_shoal_enq    O     1
// methods_start_shoal_notFull    O     1
// RDY_methods_start_shoal_notFull  O     1 const
// portalIfc_messageSize_size     O    16
// RDY_portalIfc_messageSize_size  O     1 const
// portalIfc_indications_0_first  O    32 reg
// RDY_portalIfc_indications_0_first  O     1 reg
// RDY_portalIfc_indications_0_deq  O     1 reg
// portalIfc_indications_0_notEmpty  O     1 reg
// RDY_portalIfc_indications_0_notEmpty  O     1 const
// portalIfc_indications_1_first  O    32 reg
// RDY_portalIfc_indications_1_first  O     1 reg
// RDY_portalIfc_indications_1_deq  O     1 reg
// portalIfc_indications_1_notEmpty  O     1 reg
// RDY_portalIfc_indications_1_notEmpty  O     1 const
// portalIfc_indications_2_first  O    32 reg
// RDY_portalIfc_indications_2_first  O     1 reg
// RDY_portalIfc_indications_2_deq  O     1 reg
// portalIfc_indications_2_notEmpty  O     1 reg
// RDY_portalIfc_indications_2_notEmpty  O     1 const
// portalIfc_intr_status          O     1
// RDY_portalIfc_intr_status      O     1 const
// portalIfc_intr_channel         O    32
// RDY_portalIfc_intr_channel     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// methods_startSwitching_enq_v   I    72
// methods_printSwStats_enq_v     I    32 reg
// methods_start_shoal_enq_v      I   120
// portalIfc_messageSize_size_methodNumber  I    16
// EN_methods_startSwitching_enq  I     1
// EN_methods_printSwStats_enq    I     1
// EN_methods_start_shoal_enq     I     1
// EN_portalIfc_indications_0_deq  I     1
// EN_portalIfc_indications_1_deq  I     1
// EN_portalIfc_indications_2_deq  I     1
//
// Combinational paths from inputs to outputs:
//   portalIfc_messageSize_size_methodNumber -> portalIfc_messageSize_size
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkShoalMultiSimTopRequestOutputPipes(CLK,
					    RST_N,

					    methods_startSwitching_enq_v,
					    EN_methods_startSwitching_enq,
					    RDY_methods_startSwitching_enq,

					    methods_startSwitching_notFull,
					    RDY_methods_startSwitching_notFull,

					    methods_printSwStats_enq_v,
					    EN_methods_printSwStats_enq,
					    RDY_methods_printSwStats_enq,

					    methods_printSwStats_notFull,
					    RDY_methods_printSwStats_notFull,

					    methods_start_shoal_enq_v,
					    EN_methods_start_shoal_enq,
					    RDY_methods_start_shoal_enq,

					    methods_start_shoal_notFull,
					    RDY_methods_start_shoal_notFull,

					    portalIfc_messageSize_size_methodNumber,
					    portalIfc_messageSize_size,
					    RDY_portalIfc_messageSize_size,

					    portalIfc_indications_0_first,
					    RDY_portalIfc_indications_0_first,

					    EN_portalIfc_indications_0_deq,
					    RDY_portalIfc_indications_0_deq,

					    portalIfc_indications_0_notEmpty,
					    RDY_portalIfc_indications_0_notEmpty,

					    portalIfc_indications_1_first,
					    RDY_portalIfc_indications_1_first,

					    EN_portalIfc_indications_1_deq,
					    RDY_portalIfc_indications_1_deq,

					    portalIfc_indications_1_notEmpty,
					    RDY_portalIfc_indications_1_notEmpty,

					    portalIfc_indications_2_first,
					    RDY_portalIfc_indications_2_first,

					    EN_portalIfc_indications_2_deq,
					    RDY_portalIfc_indications_2_deq,

					    portalIfc_indications_2_notEmpty,
					    RDY_portalIfc_indications_2_notEmpty,

					    portalIfc_intr_status,
					    RDY_portalIfc_intr_status,

					    portalIfc_intr_channel,
					    RDY_portalIfc_intr_channel);
  input  CLK;
  input  RST_N;

  // action method methods_startSwitching_enq
  input  [71 : 0] methods_startSwitching_enq_v;
  input  EN_methods_startSwitching_enq;
  output RDY_methods_startSwitching_enq;

  // value method methods_startSwitching_notFull
  output methods_startSwitching_notFull;
  output RDY_methods_startSwitching_notFull;

  // action method methods_printSwStats_enq
  input  [31 : 0] methods_printSwStats_enq_v;
  input  EN_methods_printSwStats_enq;
  output RDY_methods_printSwStats_enq;

  // value method methods_printSwStats_notFull
  output methods_printSwStats_notFull;
  output RDY_methods_printSwStats_notFull;

  // action method methods_start_shoal_enq
  input  [119 : 0] methods_start_shoal_enq_v;
  input  EN_methods_start_shoal_enq;
  output RDY_methods_start_shoal_enq;

  // value method methods_start_shoal_notFull
  output methods_start_shoal_notFull;
  output RDY_methods_start_shoal_notFull;

  // value method portalIfc_messageSize_size
  input  [15 : 0] portalIfc_messageSize_size_methodNumber;
  output [15 : 0] portalIfc_messageSize_size;
  output RDY_portalIfc_messageSize_size;

  // value method portalIfc_indications_0_first
  output [31 : 0] portalIfc_indications_0_first;
  output RDY_portalIfc_indications_0_first;

  // action method portalIfc_indications_0_deq
  input  EN_portalIfc_indications_0_deq;
  output RDY_portalIfc_indications_0_deq;

  // value method portalIfc_indications_0_notEmpty
  output portalIfc_indications_0_notEmpty;
  output RDY_portalIfc_indications_0_notEmpty;

  // value method portalIfc_indications_1_first
  output [31 : 0] portalIfc_indications_1_first;
  output RDY_portalIfc_indications_1_first;

  // action method portalIfc_indications_1_deq
  input  EN_portalIfc_indications_1_deq;
  output RDY_portalIfc_indications_1_deq;

  // value method portalIfc_indications_1_notEmpty
  output portalIfc_indications_1_notEmpty;
  output RDY_portalIfc_indications_1_notEmpty;

  // value method portalIfc_indications_2_first
  output [31 : 0] portalIfc_indications_2_first;
  output RDY_portalIfc_indications_2_first;

  // action method portalIfc_indications_2_deq
  input  EN_portalIfc_indications_2_deq;
  output RDY_portalIfc_indications_2_deq;

  // value method portalIfc_indications_2_notEmpty
  output portalIfc_indications_2_notEmpty;
  output RDY_portalIfc_indications_2_notEmpty;

  // value method portalIfc_intr_status
  output portalIfc_intr_status;
  output RDY_portalIfc_intr_status;

  // value method portalIfc_intr_channel
  output [31 : 0] portalIfc_intr_channel;
  output RDY_portalIfc_intr_channel;

  // signals for module outputs
  reg [15 : 0] portalIfc_messageSize_size;
  wire [31 : 0] portalIfc_indications_0_first,
		portalIfc_indications_1_first,
		portalIfc_indications_2_first,
		portalIfc_intr_channel;
  wire RDY_methods_printSwStats_enq,
       RDY_methods_printSwStats_notFull,
       RDY_methods_startSwitching_enq,
       RDY_methods_startSwitching_notFull,
       RDY_methods_start_shoal_enq,
       RDY_methods_start_shoal_notFull,
       RDY_portalIfc_indications_0_deq,
       RDY_portalIfc_indications_0_first,
       RDY_portalIfc_indications_0_notEmpty,
       RDY_portalIfc_indications_1_deq,
       RDY_portalIfc_indications_1_first,
       RDY_portalIfc_indications_1_notEmpty,
       RDY_portalIfc_indications_2_deq,
       RDY_portalIfc_indications_2_first,
       RDY_portalIfc_indications_2_notEmpty,
       RDY_portalIfc_intr_channel,
       RDY_portalIfc_intr_status,
       RDY_portalIfc_messageSize_size,
       methods_printSwStats_notFull,
       methods_startSwitching_notFull,
       methods_start_shoal_notFull,
       portalIfc_indications_0_notEmpty,
       portalIfc_indications_1_notEmpty,
       portalIfc_indications_2_notEmpty,
       portalIfc_intr_status;

  // register printSwStats_responseAdapter_bits
  reg [31 : 0] printSwStats_responseAdapter_bits;
  wire [31 : 0] printSwStats_responseAdapter_bits_D_IN;
  wire printSwStats_responseAdapter_bits_EN;

  // register printSwStats_responseAdapter_notEmptyReg
  reg printSwStats_responseAdapter_notEmptyReg;
  wire printSwStats_responseAdapter_notEmptyReg_D_IN,
       printSwStats_responseAdapter_notEmptyReg_EN;

  // register printSwStats_responseAdapter_shift
  reg [5 : 0] printSwStats_responseAdapter_shift;
  wire [5 : 0] printSwStats_responseAdapter_shift_D_IN;
  wire printSwStats_responseAdapter_shift_EN;

  // register startSwitching_responseAdapter_bits
  reg [95 : 0] startSwitching_responseAdapter_bits;
  wire [95 : 0] startSwitching_responseAdapter_bits_D_IN;
  wire startSwitching_responseAdapter_bits_EN;

  // register startSwitching_responseAdapter_count
  reg [1 : 0] startSwitching_responseAdapter_count;
  wire [1 : 0] startSwitching_responseAdapter_count_D_IN;
  wire startSwitching_responseAdapter_count_EN;

  // register startSwitching_responseAdapter_notEmptyReg
  reg startSwitching_responseAdapter_notEmptyReg;
  wire startSwitching_responseAdapter_notEmptyReg_D_IN,
       startSwitching_responseAdapter_notEmptyReg_EN;

  // register startSwitching_responseAdapter_shift
  reg [7 : 0] startSwitching_responseAdapter_shift;
  wire [7 : 0] startSwitching_responseAdapter_shift_D_IN;
  wire startSwitching_responseAdapter_shift_EN;

  // register start_shoal_responseAdapter_bits
  reg [127 : 0] start_shoal_responseAdapter_bits;
  wire [127 : 0] start_shoal_responseAdapter_bits_D_IN;
  wire start_shoal_responseAdapter_bits_EN;

  // register start_shoal_responseAdapter_count
  reg [1 : 0] start_shoal_responseAdapter_count;
  wire [1 : 0] start_shoal_responseAdapter_count_D_IN;
  wire start_shoal_responseAdapter_count_EN;

  // register start_shoal_responseAdapter_notEmptyReg
  reg start_shoal_responseAdapter_notEmptyReg;
  wire start_shoal_responseAdapter_notEmptyReg_D_IN,
       start_shoal_responseAdapter_notEmptyReg_EN;

  // register start_shoal_responseAdapter_shift
  reg [7 : 0] start_shoal_responseAdapter_shift;
  wire [7 : 0] start_shoal_responseAdapter_shift_D_IN;
  wire start_shoal_responseAdapter_shift_EN;

  // inputs to muxes for submodule ports
  wire [127 : 0] MUX_start_shoal_responseAdapter_bits_write_1__VAL_1,
		 MUX_start_shoal_responseAdapter_bits_write_1__VAL_2;
  wire [95 : 0] MUX_startSwitching_responseAdapter_bits_write_1__VAL_1,
		MUX_startSwitching_responseAdapter_bits_write_1__VAL_2;
  wire MUX_startSwitching_responseAdapter_bits_write_1__SEL_1,
       MUX_startSwitching_responseAdapter_notEmptyReg_write_1__SEL_1,
       MUX_start_shoal_responseAdapter_bits_write_1__SEL_1,
       MUX_start_shoal_responseAdapter_notEmptyReg_write_1__SEL_1;

  // remaining internal signals
  wire [1 : 0] x__h1214, x__h990;

  // action method methods_startSwitching_enq
  assign RDY_methods_startSwitching_enq =
	     !startSwitching_responseAdapter_notEmptyReg ;

  // value method methods_startSwitching_notFull
  assign methods_startSwitching_notFull =
	     !startSwitching_responseAdapter_notEmptyReg ;
  assign RDY_methods_startSwitching_notFull = 1'd1 ;

  // action method methods_printSwStats_enq
  assign RDY_methods_printSwStats_enq =
	     !printSwStats_responseAdapter_notEmptyReg ;

  // value method methods_printSwStats_notFull
  assign methods_printSwStats_notFull =
	     !printSwStats_responseAdapter_notEmptyReg ;
  assign RDY_methods_printSwStats_notFull = 1'd1 ;

  // action method methods_start_shoal_enq
  assign RDY_methods_start_shoal_enq =
	     !start_shoal_responseAdapter_notEmptyReg ;

  // value method methods_start_shoal_notFull
  assign methods_start_shoal_notFull =
	     !start_shoal_responseAdapter_notEmptyReg ;
  assign RDY_methods_start_shoal_notFull = 1'd1 ;

  // value method portalIfc_messageSize_size
  always@(portalIfc_messageSize_size_methodNumber)
  begin
    case (portalIfc_messageSize_size_methodNumber)
      16'd0: portalIfc_messageSize_size = 16'd72;
      16'd1: portalIfc_messageSize_size = 16'd32;
      default: portalIfc_messageSize_size = 16'd120;
    endcase
  end
  assign RDY_portalIfc_messageSize_size = 1'd1 ;

  // value method portalIfc_indications_0_first
  assign portalIfc_indications_0_first =
	     startSwitching_responseAdapter_bits[95:64] ;
  assign RDY_portalIfc_indications_0_first =
	     startSwitching_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_0_deq
  assign RDY_portalIfc_indications_0_deq =
	     startSwitching_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_0_notEmpty
  assign portalIfc_indications_0_notEmpty =
	     startSwitching_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_0_notEmpty = 1'd1 ;

  // value method portalIfc_indications_1_first
  assign portalIfc_indications_1_first = printSwStats_responseAdapter_bits ;
  assign RDY_portalIfc_indications_1_first =
	     printSwStats_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_1_deq
  assign RDY_portalIfc_indications_1_deq =
	     printSwStats_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_1_notEmpty
  assign portalIfc_indications_1_notEmpty =
	     printSwStats_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_1_notEmpty = 1'd1 ;

  // value method portalIfc_indications_2_first
  assign portalIfc_indications_2_first =
	     start_shoal_responseAdapter_bits[127:96] ;
  assign RDY_portalIfc_indications_2_first =
	     start_shoal_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_2_deq
  assign RDY_portalIfc_indications_2_deq =
	     start_shoal_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_2_notEmpty
  assign portalIfc_indications_2_notEmpty =
	     start_shoal_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_2_notEmpty = 1'd1 ;

  // value method portalIfc_intr_status
  assign portalIfc_intr_status =
	     startSwitching_responseAdapter_notEmptyReg ||
	     printSwStats_responseAdapter_notEmptyReg ||
	     start_shoal_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_intr_status = 1'd1 ;

  // value method portalIfc_intr_channel
  assign portalIfc_intr_channel =
	     startSwitching_responseAdapter_notEmptyReg ?
	       32'd0 :
	       (printSwStats_responseAdapter_notEmptyReg ?
		  32'd1 :
		  (start_shoal_responseAdapter_notEmptyReg ?
		     32'd2 :
		     32'hFFFFFFFF)) ;
  assign RDY_portalIfc_intr_channel = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_startSwitching_responseAdapter_bits_write_1__SEL_1 =
	     EN_portalIfc_indications_0_deq &&
	     startSwitching_responseAdapter_count != 2'd2 ;
  assign MUX_startSwitching_responseAdapter_notEmptyReg_write_1__SEL_1 =
	     EN_portalIfc_indications_0_deq &&
	     startSwitching_responseAdapter_count == 2'd2 ;
  assign MUX_start_shoal_responseAdapter_bits_write_1__SEL_1 =
	     EN_portalIfc_indications_2_deq &&
	     start_shoal_responseAdapter_count != 2'd3 ;
  assign MUX_start_shoal_responseAdapter_notEmptyReg_write_1__SEL_1 =
	     EN_portalIfc_indications_2_deq &&
	     start_shoal_responseAdapter_count == 2'd3 ;
  assign MUX_startSwitching_responseAdapter_bits_write_1__VAL_1 =
	     { startSwitching_responseAdapter_bits[63:0], 32'd0 } ;
  assign MUX_startSwitching_responseAdapter_bits_write_1__VAL_2 =
	     { 24'd0, methods_startSwitching_enq_v } ;
  assign MUX_start_shoal_responseAdapter_bits_write_1__VAL_1 =
	     { start_shoal_responseAdapter_bits[95:0], 32'd0 } ;
  assign MUX_start_shoal_responseAdapter_bits_write_1__VAL_2 =
	     { 8'd0, methods_start_shoal_enq_v } ;

  // register printSwStats_responseAdapter_bits
  assign printSwStats_responseAdapter_bits_D_IN = methods_printSwStats_enq_v ;
  assign printSwStats_responseAdapter_bits_EN = EN_methods_printSwStats_enq ;

  // register printSwStats_responseAdapter_notEmptyReg
  assign printSwStats_responseAdapter_notEmptyReg_D_IN =
	     !EN_portalIfc_indications_1_deq ;
  assign printSwStats_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_1_deq || EN_methods_printSwStats_enq ;

  // register printSwStats_responseAdapter_shift
  assign printSwStats_responseAdapter_shift_D_IN = 6'h0 ;
  assign printSwStats_responseAdapter_shift_EN = 1'b0 ;

  // register startSwitching_responseAdapter_bits
  assign startSwitching_responseAdapter_bits_D_IN =
	     MUX_startSwitching_responseAdapter_bits_write_1__SEL_1 ?
	       MUX_startSwitching_responseAdapter_bits_write_1__VAL_1 :
	       MUX_startSwitching_responseAdapter_bits_write_1__VAL_2 ;
  assign startSwitching_responseAdapter_bits_EN =
	     EN_portalIfc_indications_0_deq &&
	     startSwitching_responseAdapter_count != 2'd2 ||
	     EN_methods_startSwitching_enq ;

  // register startSwitching_responseAdapter_count
  assign startSwitching_responseAdapter_count_D_IN =
	     (startSwitching_responseAdapter_count == 2'd2) ? 2'd0 : x__h990 ;
  assign startSwitching_responseAdapter_count_EN =
	     EN_portalIfc_indications_0_deq ;

  // register startSwitching_responseAdapter_notEmptyReg
  assign startSwitching_responseAdapter_notEmptyReg_D_IN =
	     !MUX_startSwitching_responseAdapter_notEmptyReg_write_1__SEL_1 ;
  assign startSwitching_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_0_deq &&
	     startSwitching_responseAdapter_count == 2'd2 ||
	     EN_methods_startSwitching_enq ;

  // register startSwitching_responseAdapter_shift
  assign startSwitching_responseAdapter_shift_D_IN =
	     startSwitching_responseAdapter_shift + 8'd32 ;
  assign startSwitching_responseAdapter_shift_EN =
	     MUX_startSwitching_responseAdapter_bits_write_1__SEL_1 ;

  // register start_shoal_responseAdapter_bits
  assign start_shoal_responseAdapter_bits_D_IN =
	     MUX_start_shoal_responseAdapter_bits_write_1__SEL_1 ?
	       MUX_start_shoal_responseAdapter_bits_write_1__VAL_1 :
	       MUX_start_shoal_responseAdapter_bits_write_1__VAL_2 ;
  assign start_shoal_responseAdapter_bits_EN =
	     EN_portalIfc_indications_2_deq &&
	     start_shoal_responseAdapter_count != 2'd3 ||
	     EN_methods_start_shoal_enq ;

  // register start_shoal_responseAdapter_count
  assign start_shoal_responseAdapter_count_D_IN =
	     (start_shoal_responseAdapter_count == 2'd3) ? 2'd0 : x__h1214 ;
  assign start_shoal_responseAdapter_count_EN =
	     EN_portalIfc_indications_2_deq ;

  // register start_shoal_responseAdapter_notEmptyReg
  assign start_shoal_responseAdapter_notEmptyReg_D_IN =
	     !MUX_start_shoal_responseAdapter_notEmptyReg_write_1__SEL_1 ;
  assign start_shoal_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_2_deq &&
	     start_shoal_responseAdapter_count == 2'd3 ||
	     EN_methods_start_shoal_enq ;

  // register start_shoal_responseAdapter_shift
  assign start_shoal_responseAdapter_shift_D_IN =
	     start_shoal_responseAdapter_shift + 8'd32 ;
  assign start_shoal_responseAdapter_shift_EN =
	     MUX_start_shoal_responseAdapter_bits_write_1__SEL_1 ;

  // remaining internal signals
  assign x__h1214 = start_shoal_responseAdapter_count + 2'd1 ;
  assign x__h990 = startSwitching_responseAdapter_count + 2'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        printSwStats_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 32'd0;
	printSwStats_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	printSwStats_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 6'd0;
	startSwitching_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 96'd0;
	startSwitching_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY 2'd0;
	startSwitching_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	startSwitching_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 8'd0;
	start_shoal_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 128'd0;
	start_shoal_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY 2'd0;
	start_shoal_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_shoal_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (printSwStats_responseAdapter_bits_EN)
	  printSwStats_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      printSwStats_responseAdapter_bits_D_IN;
	if (printSwStats_responseAdapter_notEmptyReg_EN)
	  printSwStats_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      printSwStats_responseAdapter_notEmptyReg_D_IN;
	if (printSwStats_responseAdapter_shift_EN)
	  printSwStats_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      printSwStats_responseAdapter_shift_D_IN;
	if (startSwitching_responseAdapter_bits_EN)
	  startSwitching_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      startSwitching_responseAdapter_bits_D_IN;
	if (startSwitching_responseAdapter_count_EN)
	  startSwitching_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY
	      startSwitching_responseAdapter_count_D_IN;
	if (startSwitching_responseAdapter_notEmptyReg_EN)
	  startSwitching_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      startSwitching_responseAdapter_notEmptyReg_D_IN;
	if (startSwitching_responseAdapter_shift_EN)
	  startSwitching_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      startSwitching_responseAdapter_shift_D_IN;
	if (start_shoal_responseAdapter_bits_EN)
	  start_shoal_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      start_shoal_responseAdapter_bits_D_IN;
	if (start_shoal_responseAdapter_count_EN)
	  start_shoal_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY
	      start_shoal_responseAdapter_count_D_IN;
	if (start_shoal_responseAdapter_notEmptyReg_EN)
	  start_shoal_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      start_shoal_responseAdapter_notEmptyReg_D_IN;
	if (start_shoal_responseAdapter_shift_EN)
	  start_shoal_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      start_shoal_responseAdapter_shift_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    printSwStats_responseAdapter_bits = 32'hAAAAAAAA;
    printSwStats_responseAdapter_notEmptyReg = 1'h0;
    printSwStats_responseAdapter_shift = 6'h2A;
    startSwitching_responseAdapter_bits = 96'hAAAAAAAAAAAAAAAAAAAAAAAA;
    startSwitching_responseAdapter_count = 2'h2;
    startSwitching_responseAdapter_notEmptyReg = 1'h0;
    startSwitching_responseAdapter_shift = 8'hAA;
    start_shoal_responseAdapter_bits = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    start_shoal_responseAdapter_count = 2'h2;
    start_shoal_responseAdapter_notEmptyReg = 1'h0;
    start_shoal_responseAdapter_shift = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkShoalMultiSimTopRequestOutputPipes

