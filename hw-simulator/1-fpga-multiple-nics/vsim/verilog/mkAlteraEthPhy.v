//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule tx_0_put  CF ( tx_1_put,
// 			tx_2_put,
// 			tx_3_put,
// 			rx_0_get,
// 			rx_1_get,
// 			rx_2_get,
// 			rx_3_get,
// 			serial_tx,
// 			serial_rx );
// schedule tx_0_put  C ( tx_0_put );
//
// schedule tx_1_put  CF ( tx_0_put,
// 			tx_2_put,
// 			tx_3_put,
// 			rx_0_get,
// 			rx_1_get,
// 			rx_2_get,
// 			rx_3_get,
// 			serial_tx,
// 			serial_rx );
// schedule tx_1_put  C ( tx_1_put );
//
// schedule tx_2_put  CF ( tx_0_put,
// 			tx_1_put,
// 			tx_3_put,
// 			rx_0_get,
// 			rx_1_get,
// 			rx_2_get,
// 			rx_3_get,
// 			serial_tx,
// 			serial_rx );
// schedule tx_2_put  C ( tx_2_put );
//
// schedule tx_3_put  CF ( tx_0_put,
// 			tx_1_put,
// 			tx_2_put,
// 			rx_0_get,
// 			rx_1_get,
// 			rx_2_get,
// 			rx_3_get,
// 			serial_tx,
// 			serial_rx );
// schedule tx_3_put  C ( tx_3_put );
//
// schedule rx_0_get  CF ( tx_0_put,
// 			tx_1_put,
// 			tx_2_put,
// 			tx_3_put,
// 			rx_1_get,
// 			rx_2_get,
// 			rx_3_get,
// 			serial_tx,
// 			serial_rx );
// schedule rx_0_get  C ( rx_0_get );
//
// schedule rx_1_get  CF ( tx_0_put,
// 			tx_1_put,
// 			tx_2_put,
// 			tx_3_put,
// 			rx_0_get,
// 			rx_2_get,
// 			rx_3_get,
// 			serial_tx,
// 			serial_rx );
// schedule rx_1_get  C ( rx_1_get );
//
// schedule rx_2_get  CF ( tx_0_put,
// 			tx_1_put,
// 			tx_2_put,
// 			tx_3_put,
// 			rx_0_get,
// 			rx_1_get,
// 			rx_3_get,
// 			serial_tx,
// 			serial_rx );
// schedule rx_2_get  C ( rx_2_get );
//
// schedule rx_3_get  CF ( tx_0_put,
// 			tx_1_put,
// 			tx_2_put,
// 			tx_3_put,
// 			rx_0_get,
// 			rx_1_get,
// 			rx_2_get,
// 			serial_tx,
// 			serial_rx );
// schedule rx_3_get  C ( rx_3_get );
//
// schedule serial_tx  CF ( tx_0_put,
// 			 tx_1_put,
// 			 tx_2_put,
// 			 tx_3_put,
// 			 rx_0_get,
// 			 rx_1_get,
// 			 rx_2_get,
// 			 rx_3_get,
// 			 serial_tx,
// 			 serial_rx );
//
// schedule serial_rx  CF ( tx_0_put,
// 			 tx_1_put,
// 			 tx_2_put,
// 			 tx_3_put,
// 			 rx_0_get,
// 			 rx_1_get,
// 			 rx_2_get,
// 			 rx_3_get,
// 			 serial_tx );
// schedule serial_rx  C ( serial_rx );
//
//
// Ports:
// Name                         I/O  size props
// rx_0_get                       O    72 reg
// rx_1_get                       O    72 reg
// rx_2_get                       O    72 reg
// rx_3_get                       O    72 reg
// serial_tx                      O     4
// CLK_rx_clkout                  O     1 clock
// CLK_GATE_rx_clkout             O     1 const
// CLK_clk_50                     I     1 clock
// CLK_clk_644                    I     1 clock
// CLK_clk_xgmii                  I     1 clock
// RST_N_rst_50                   I     1 reset
// CLK                            I     1 unused
// RST_N                          I     1 reset
// tx_0_put                       I    72 reg
// tx_1_put                       I    72 reg
// tx_2_put                       I    72 reg
// tx_3_put                       I    72 reg
// serial_rx_v                    I     4
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAlteraEthPhy(CLK_clk_50,
		      CLK_clk_644,
		      CLK_clk_xgmii,
		      RST_N_rst_50,
		      CLK,
		      RST_N,

		      tx_0_put,

		      tx_1_put,

		      tx_2_put,

		      tx_3_put,

		      rx_0_get,

		      rx_1_get,

		      rx_2_get,

		      rx_3_get,

		      serial_tx,

		      serial_rx_v,

		      CLK_rx_clkout,
		      CLK_GATE_rx_clkout);
  input  CLK_clk_50;
  input  CLK_clk_644;
  input  CLK_clk_xgmii;
  input  RST_N_rst_50;
  input  CLK;
  input  RST_N;

  // action method tx_0_put
  input  [71 : 0] tx_0_put;

  // action method tx_1_put
  input  [71 : 0] tx_1_put;

  // action method tx_2_put
  input  [71 : 0] tx_2_put;

  // action method tx_3_put
  input  [71 : 0] tx_3_put;

  // actionvalue method rx_0_get
  output [71 : 0] rx_0_get;

  // actionvalue method rx_1_get
  output [71 : 0] rx_1_get;

  // actionvalue method rx_2_get
  output [71 : 0] rx_2_get;

  // actionvalue method rx_3_get
  output [71 : 0] rx_3_get;

  // value method serial_tx
  output [3 : 0] serial_tx;

  // action method serial_rx
  input  [3 : 0] serial_rx_v;

  // oscillator and gates for output clock CLK_rx_clkout
  output CLK_rx_clkout;
  output CLK_GATE_rx_clkout;

  // signals for module outputs
  wire [71 : 0] rx_0_get, rx_1_get, rx_2_get, rx_3_get;
  wire [3 : 0] serial_tx;
  wire CLK_GATE_rx_clkout, CLK_rx_clkout;

  // ports of submodule invertedReset
  wire invertedReset_RESET_OUT;

  // ports of submodule phy
  wire [559 : 0] phy_reconfig_to_xcvr;
  wire [71 : 0] phy_xgmii_rx_dc_0,
		phy_xgmii_rx_dc_1,
		phy_xgmii_rx_dc_2,
		phy_xgmii_rx_dc_3,
		phy_xgmii_tx_dc_0,
		phy_xgmii_tx_dc_1,
		phy_xgmii_tx_dc_2,
		phy_xgmii_tx_dc_3;
  wire [31 : 0] phy_phy_mgmt_writedata;
  wire [8 : 0] phy_phy_mgmt_address;
  wire phy_phy_mgmt_read,
       phy_phy_mgmt_write,
       phy_rx_serial_data_0,
       phy_rx_serial_data_1,
       phy_rx_serial_data_2,
       phy_rx_serial_data_3,
       phy_tx_serial_data_0,
       phy_tx_serial_data_1,
       phy_tx_serial_data_2,
       phy_tx_serial_data_3,
       phy_xgmii_rx_clk;

  // ports of submodule rxFifo_0
  wire [71 : 0] rxFifo_0_D_IN, rxFifo_0_D_OUT;
  wire rxFifo_0_CLR, rxFifo_0_DEQ, rxFifo_0_ENQ;

  // ports of submodule rxFifo_1
  wire [71 : 0] rxFifo_1_D_IN, rxFifo_1_D_OUT;
  wire rxFifo_1_CLR, rxFifo_1_DEQ, rxFifo_1_ENQ;

  // ports of submodule rxFifo_2
  wire [71 : 0] rxFifo_2_D_IN, rxFifo_2_D_OUT;
  wire rxFifo_2_CLR, rxFifo_2_DEQ, rxFifo_2_ENQ;

  // ports of submodule rxFifo_3
  wire [71 : 0] rxFifo_3_D_IN, rxFifo_3_D_OUT;
  wire rxFifo_3_CLR, rxFifo_3_DEQ, rxFifo_3_ENQ;

  // ports of submodule txFifo_0
  wire [71 : 0] txFifo_0_D_IN, txFifo_0_D_OUT;
  wire txFifo_0_CLR, txFifo_0_DEQ, txFifo_0_ENQ;

  // ports of submodule txFifo_1
  wire [71 : 0] txFifo_1_D_IN, txFifo_1_D_OUT;
  wire txFifo_1_CLR, txFifo_1_DEQ, txFifo_1_ENQ;

  // ports of submodule txFifo_2
  wire [71 : 0] txFifo_2_D_IN, txFifo_2_D_OUT;
  wire txFifo_2_CLR, txFifo_2_DEQ, txFifo_2_ENQ;

  // ports of submodule txFifo_3
  wire [71 : 0] txFifo_3_D_IN, txFifo_3_D_OUT;
  wire txFifo_3_CLR, txFifo_3_DEQ, txFifo_3_ENQ;

  // oscillator and gates for output clock CLK_rx_clkout
  assign CLK_rx_clkout = phy_xgmii_rx_clk ;
  assign CLK_GATE_rx_clkout = 1'b1 ;

  // actionvalue method rx_0_get
  assign rx_0_get = rxFifo_0_D_OUT ;

  // actionvalue method rx_1_get
  assign rx_1_get = rxFifo_1_D_OUT ;

  // actionvalue method rx_2_get
  assign rx_2_get = rxFifo_2_D_OUT ;

  // actionvalue method rx_3_get
  assign rx_3_get = rxFifo_3_D_OUT ;

  // value method serial_tx
  assign serial_tx =
	     { phy_tx_serial_data_3,
	       phy_tx_serial_data_2,
	       phy_tx_serial_data_1,
	       phy_tx_serial_data_0 } ;

  // submodule invertedReset
  ResetInverter invertedReset(.RESET_IN(RST_N_rst_50),
			      .RESET_OUT(invertedReset_RESET_OUT));

  // submodule phy
  altera_xcvr_10gbaser_wrapper phy(.phy_mgmt_clk(CLK_clk_50),
				   .phy_mgmt_clk_reset(invertedReset_RESET_OUT),
				   .pll_ref_clk(CLK_clk_644),
				   .xgmii_tx_clk(CLK_clk_xgmii),
				   .phy_mgmt_address(phy_phy_mgmt_address),
				   .phy_mgmt_read(phy_phy_mgmt_read),
				   .phy_mgmt_write(phy_phy_mgmt_write),
				   .phy_mgmt_writedata(phy_phy_mgmt_writedata),
				   .reconfig_to_xcvr(phy_reconfig_to_xcvr),
				   .rx_serial_data_0(phy_rx_serial_data_0),
				   .rx_serial_data_1(phy_rx_serial_data_1),
				   .rx_serial_data_2(phy_rx_serial_data_2),
				   .rx_serial_data_3(phy_rx_serial_data_3),
				   .xgmii_tx_dc_0(phy_xgmii_tx_dc_0),
				   .xgmii_tx_dc_1(phy_xgmii_tx_dc_1),
				   .xgmii_tx_dc_2(phy_xgmii_tx_dc_2),
				   .xgmii_tx_dc_3(phy_xgmii_tx_dc_3),
				   .phy_mgmt_readdata(),
				   .phy_mgmt_waitrequest(),
				   .reconfig_from_xcvr(),
				   .rx_ready(),
				   .tx_ready(),
				   .rx_data_ready(),
				   .tx_serial_data_0(phy_tx_serial_data_0),
				   .tx_serial_data_1(phy_tx_serial_data_1),
				   .tx_serial_data_2(phy_tx_serial_data_2),
				   .tx_serial_data_3(phy_tx_serial_data_3),
				   .xgmii_rx_dc_0(phy_xgmii_rx_dc_0),
				   .xgmii_rx_dc_1(phy_xgmii_rx_dc_1),
				   .xgmii_rx_dc_2(phy_xgmii_rx_dc_2),
				   .xgmii_rx_dc_3(phy_xgmii_rx_dc_3),
				   .xgmii_rx_clk(phy_xgmii_rx_clk));

  // submodule rxFifo_0
  FIFO2 #(.width(32'd72), .guarded(1'd0)) rxFifo_0(.RST(!`BSV_RESET_VALUE),
						   .CLK(phy_xgmii_rx_clk),
						   .D_IN(rxFifo_0_D_IN),
						   .ENQ(rxFifo_0_ENQ),
						   .DEQ(rxFifo_0_DEQ),
						   .CLR(rxFifo_0_CLR),
						   .D_OUT(rxFifo_0_D_OUT),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule rxFifo_1
  FIFO2 #(.width(32'd72), .guarded(1'd0)) rxFifo_1(.RST(!`BSV_RESET_VALUE),
						   .CLK(phy_xgmii_rx_clk),
						   .D_IN(rxFifo_1_D_IN),
						   .ENQ(rxFifo_1_ENQ),
						   .DEQ(rxFifo_1_DEQ),
						   .CLR(rxFifo_1_CLR),
						   .D_OUT(rxFifo_1_D_OUT),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule rxFifo_2
  FIFO2 #(.width(32'd72), .guarded(1'd0)) rxFifo_2(.RST(!`BSV_RESET_VALUE),
						   .CLK(phy_xgmii_rx_clk),
						   .D_IN(rxFifo_2_D_IN),
						   .ENQ(rxFifo_2_ENQ),
						   .DEQ(rxFifo_2_DEQ),
						   .CLR(rxFifo_2_CLR),
						   .D_OUT(rxFifo_2_D_OUT),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule rxFifo_3
  FIFO2 #(.width(32'd72), .guarded(1'd0)) rxFifo_3(.RST(!`BSV_RESET_VALUE),
						   .CLK(phy_xgmii_rx_clk),
						   .D_IN(rxFifo_3_D_IN),
						   .ENQ(rxFifo_3_ENQ),
						   .DEQ(rxFifo_3_DEQ),
						   .CLR(rxFifo_3_CLR),
						   .D_OUT(rxFifo_3_D_OUT),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule txFifo_0
  FIFO2 #(.width(32'd72), .guarded(1'd0)) txFifo_0(.RST(!`BSV_RESET_VALUE),
						   .CLK(CLK_clk_xgmii),
						   .D_IN(txFifo_0_D_IN),
						   .ENQ(txFifo_0_ENQ),
						   .DEQ(txFifo_0_DEQ),
						   .CLR(txFifo_0_CLR),
						   .D_OUT(txFifo_0_D_OUT),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule txFifo_1
  FIFO2 #(.width(32'd72), .guarded(1'd0)) txFifo_1(.RST(!`BSV_RESET_VALUE),
						   .CLK(CLK_clk_xgmii),
						   .D_IN(txFifo_1_D_IN),
						   .ENQ(txFifo_1_ENQ),
						   .DEQ(txFifo_1_DEQ),
						   .CLR(txFifo_1_CLR),
						   .D_OUT(txFifo_1_D_OUT),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule txFifo_2
  FIFO2 #(.width(32'd72), .guarded(1'd0)) txFifo_2(.RST(!`BSV_RESET_VALUE),
						   .CLK(CLK_clk_xgmii),
						   .D_IN(txFifo_2_D_IN),
						   .ENQ(txFifo_2_ENQ),
						   .DEQ(txFifo_2_DEQ),
						   .CLR(txFifo_2_CLR),
						   .D_OUT(txFifo_2_D_OUT),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule txFifo_3
  FIFO2 #(.width(32'd72), .guarded(1'd0)) txFifo_3(.RST(!`BSV_RESET_VALUE),
						   .CLK(CLK_clk_xgmii),
						   .D_IN(txFifo_3_D_IN),
						   .ENQ(txFifo_3_ENQ),
						   .DEQ(txFifo_3_DEQ),
						   .CLR(txFifo_3_CLR),
						   .D_OUT(txFifo_3_D_OUT),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule xgmii_reset
  SyncResetA #(.RSTDELAY(32'd1)) xgmii_reset(.CLK(phy_xgmii_rx_clk),
					     .IN_RST(RST_N),
					     .OUT_RST());

  // submodule phy
  assign phy_phy_mgmt_address = 9'h0 ;
  assign phy_phy_mgmt_read = 1'b0 ;
  assign phy_phy_mgmt_write = 1'b0 ;
  assign phy_phy_mgmt_writedata = 32'h0 ;
  assign phy_reconfig_to_xcvr = 560'h0 ;
  assign phy_rx_serial_data_0 = serial_rx_v[0] ;
  assign phy_rx_serial_data_1 = serial_rx_v[1] ;
  assign phy_rx_serial_data_2 = serial_rx_v[2] ;
  assign phy_rx_serial_data_3 = serial_rx_v[3] ;
  assign phy_xgmii_tx_dc_0 = txFifo_0_D_OUT ;
  assign phy_xgmii_tx_dc_1 = txFifo_1_D_OUT ;
  assign phy_xgmii_tx_dc_2 = txFifo_2_D_OUT ;
  assign phy_xgmii_tx_dc_3 = txFifo_3_D_OUT ;

  // submodule rxFifo_0
  assign rxFifo_0_D_IN = phy_xgmii_rx_dc_0 ;
  assign rxFifo_0_ENQ = 1'd1 ;
  assign rxFifo_0_DEQ = 1'd1 ;
  assign rxFifo_0_CLR = 1'b0 ;

  // submodule rxFifo_1
  assign rxFifo_1_D_IN = phy_xgmii_rx_dc_1 ;
  assign rxFifo_1_ENQ = 1'd1 ;
  assign rxFifo_1_DEQ = 1'd1 ;
  assign rxFifo_1_CLR = 1'b0 ;

  // submodule rxFifo_2
  assign rxFifo_2_D_IN = phy_xgmii_rx_dc_2 ;
  assign rxFifo_2_ENQ = 1'd1 ;
  assign rxFifo_2_DEQ = 1'd1 ;
  assign rxFifo_2_CLR = 1'b0 ;

  // submodule rxFifo_3
  assign rxFifo_3_D_IN = phy_xgmii_rx_dc_3 ;
  assign rxFifo_3_ENQ = 1'd1 ;
  assign rxFifo_3_DEQ = 1'd1 ;
  assign rxFifo_3_CLR = 1'b0 ;

  // submodule txFifo_0
  assign txFifo_0_D_IN = tx_0_put ;
  assign txFifo_0_ENQ = 1'd1 ;
  assign txFifo_0_DEQ = 1'd1 ;
  assign txFifo_0_CLR = 1'b0 ;

  // submodule txFifo_1
  assign txFifo_1_D_IN = tx_1_put ;
  assign txFifo_1_ENQ = 1'd1 ;
  assign txFifo_1_DEQ = 1'd1 ;
  assign txFifo_1_CLR = 1'b0 ;

  // submodule txFifo_2
  assign txFifo_2_D_IN = tx_2_put ;
  assign txFifo_2_ENQ = 1'd1 ;
  assign txFifo_2_DEQ = 1'd1 ;
  assign txFifo_2_CLR = 1'b0 ;

  // submodule txFifo_3
  assign txFifo_3_D_IN = tx_3_put ;
  assign txFifo_3_ENQ = 1'd1 ;
  assign txFifo_3_DEQ = 1'd1 ;
  assign txFifo_3_CLR = 1'b0 ;
endmodule  // mkAlteraEthPhy

