//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_idResponse  CF ( ifc_configResp,
// 			      ifc_error,
// 			      inverseIfc_idResponse,
// 			      inverseIfc_configResp,
// 			      inverseIfc_error );
// schedule ifc_idResponse  C ( ifc_idResponse );
//
// schedule ifc_configResp  CF ( ifc_idResponse,
// 			      ifc_error,
// 			      inverseIfc_idResponse,
// 			      inverseIfc_configResp,
// 			      inverseIfc_error );
// schedule ifc_configResp  C ( ifc_configResp );
//
// schedule ifc_error  CF ( ifc_idResponse,
// 			 ifc_configResp,
// 			 inverseIfc_idResponse,
// 			 inverseIfc_configResp,
// 			 inverseIfc_error );
// schedule ifc_error  C ( ifc_error );
//
// schedule inverseIfc_idResponse  CF ( ifc_idResponse,
// 				     ifc_configResp,
// 				     ifc_error,
// 				     inverseIfc_configResp,
// 				     inverseIfc_error );
// schedule inverseIfc_idResponse  C ( inverseIfc_idResponse );
//
// schedule inverseIfc_configResp  CF ( ifc_idResponse,
// 				     ifc_configResp,
// 				     ifc_error,
// 				     inverseIfc_idResponse,
// 				     inverseIfc_error );
// schedule inverseIfc_configResp  C ( inverseIfc_configResp );
//
// schedule inverseIfc_error  CF ( ifc_idResponse,
// 				ifc_configResp,
// 				ifc_error,
// 				inverseIfc_idResponse,
// 				inverseIfc_configResp );
// schedule inverseIfc_error  C ( inverseIfc_error );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_idResponse             O     1 reg
// RDY_ifc_configResp             O     1 reg
// RDY_ifc_error                  O     1 reg
// inverseIfc_idResponse          O    32 reg
// RDY_inverseIfc_idResponse      O     1 reg
// inverseIfc_configResp          O    32 reg
// RDY_inverseIfc_configResp      O     1 reg
// inverseIfc_error               O   192 reg
// RDY_inverseIfc_error           O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_idResponse_sglId           I    32 reg
// ifc_configResp_sglId           I    32 reg
// ifc_error_code                 I    32 reg
// ifc_error_sglId                I    32 reg
// ifc_error_offset               I    64 reg
// ifc_error_extra                I    64 reg
// EN_ifc_idResponse              I     1
// EN_ifc_configResp              I     1
// EN_ifc_error                   I     1
// EN_inverseIfc_idResponse       I     1
// EN_inverseIfc_configResp       I     1
// EN_inverseIfc_error            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMUIndicationInverter(CLK,
			       RST_N,

			       ifc_idResponse_sglId,
			       EN_ifc_idResponse,
			       RDY_ifc_idResponse,

			       ifc_configResp_sglId,
			       EN_ifc_configResp,
			       RDY_ifc_configResp,

			       ifc_error_code,
			       ifc_error_sglId,
			       ifc_error_offset,
			       ifc_error_extra,
			       EN_ifc_error,
			       RDY_ifc_error,

			       EN_inverseIfc_idResponse,
			       inverseIfc_idResponse,
			       RDY_inverseIfc_idResponse,

			       EN_inverseIfc_configResp,
			       inverseIfc_configResp,
			       RDY_inverseIfc_configResp,

			       EN_inverseIfc_error,
			       inverseIfc_error,
			       RDY_inverseIfc_error);
  input  CLK;
  input  RST_N;

  // action method ifc_idResponse
  input  [31 : 0] ifc_idResponse_sglId;
  input  EN_ifc_idResponse;
  output RDY_ifc_idResponse;

  // action method ifc_configResp
  input  [31 : 0] ifc_configResp_sglId;
  input  EN_ifc_configResp;
  output RDY_ifc_configResp;

  // action method ifc_error
  input  [31 : 0] ifc_error_code;
  input  [31 : 0] ifc_error_sglId;
  input  [63 : 0] ifc_error_offset;
  input  [63 : 0] ifc_error_extra;
  input  EN_ifc_error;
  output RDY_ifc_error;

  // actionvalue method inverseIfc_idResponse
  input  EN_inverseIfc_idResponse;
  output [31 : 0] inverseIfc_idResponse;
  output RDY_inverseIfc_idResponse;

  // actionvalue method inverseIfc_configResp
  input  EN_inverseIfc_configResp;
  output [31 : 0] inverseIfc_configResp;
  output RDY_inverseIfc_configResp;

  // actionvalue method inverseIfc_error
  input  EN_inverseIfc_error;
  output [191 : 0] inverseIfc_error;
  output RDY_inverseIfc_error;

  // signals for module outputs
  wire [191 : 0] inverseIfc_error;
  wire [31 : 0] inverseIfc_configResp, inverseIfc_idResponse;
  wire RDY_ifc_configResp,
       RDY_ifc_error,
       RDY_ifc_idResponse,
       RDY_inverseIfc_configResp,
       RDY_inverseIfc_error,
       RDY_inverseIfc_idResponse;

  // ports of submodule fifo_configResp
  wire [31 : 0] fifo_configResp_D_IN, fifo_configResp_D_OUT;
  wire fifo_configResp_CLR,
       fifo_configResp_DEQ,
       fifo_configResp_EMPTY_N,
       fifo_configResp_ENQ,
       fifo_configResp_FULL_N;

  // ports of submodule fifo_error
  wire [191 : 0] fifo_error_D_IN, fifo_error_D_OUT;
  wire fifo_error_CLR,
       fifo_error_DEQ,
       fifo_error_EMPTY_N,
       fifo_error_ENQ,
       fifo_error_FULL_N;

  // ports of submodule fifo_idResponse
  wire [31 : 0] fifo_idResponse_D_IN, fifo_idResponse_D_OUT;
  wire fifo_idResponse_CLR,
       fifo_idResponse_DEQ,
       fifo_idResponse_EMPTY_N,
       fifo_idResponse_ENQ,
       fifo_idResponse_FULL_N;

  // action method ifc_idResponse
  assign RDY_ifc_idResponse = fifo_idResponse_FULL_N ;

  // action method ifc_configResp
  assign RDY_ifc_configResp = fifo_configResp_FULL_N ;

  // action method ifc_error
  assign RDY_ifc_error = fifo_error_FULL_N ;

  // actionvalue method inverseIfc_idResponse
  assign inverseIfc_idResponse = fifo_idResponse_D_OUT ;
  assign RDY_inverseIfc_idResponse = fifo_idResponse_EMPTY_N ;

  // actionvalue method inverseIfc_configResp
  assign inverseIfc_configResp = fifo_configResp_D_OUT ;
  assign RDY_inverseIfc_configResp = fifo_configResp_EMPTY_N ;

  // actionvalue method inverseIfc_error
  assign inverseIfc_error = fifo_error_D_OUT ;
  assign RDY_inverseIfc_error = fifo_error_EMPTY_N ;

  // submodule fifo_configResp
  FIFO2 #(.width(32'd32), .guarded(1'd1)) fifo_configResp(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fifo_configResp_D_IN),
							  .ENQ(fifo_configResp_ENQ),
							  .DEQ(fifo_configResp_DEQ),
							  .CLR(fifo_configResp_CLR),
							  .D_OUT(fifo_configResp_D_OUT),
							  .FULL_N(fifo_configResp_FULL_N),
							  .EMPTY_N(fifo_configResp_EMPTY_N));

  // submodule fifo_error
  FIFO2 #(.width(32'd192), .guarded(1'd1)) fifo_error(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(fifo_error_D_IN),
						      .ENQ(fifo_error_ENQ),
						      .DEQ(fifo_error_DEQ),
						      .CLR(fifo_error_CLR),
						      .D_OUT(fifo_error_D_OUT),
						      .FULL_N(fifo_error_FULL_N),
						      .EMPTY_N(fifo_error_EMPTY_N));

  // submodule fifo_idResponse
  FIFO2 #(.width(32'd32), .guarded(1'd1)) fifo_idResponse(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fifo_idResponse_D_IN),
							  .ENQ(fifo_idResponse_ENQ),
							  .DEQ(fifo_idResponse_DEQ),
							  .CLR(fifo_idResponse_CLR),
							  .D_OUT(fifo_idResponse_D_OUT),
							  .FULL_N(fifo_idResponse_FULL_N),
							  .EMPTY_N(fifo_idResponse_EMPTY_N));

  // submodule fifo_configResp
  assign fifo_configResp_D_IN = ifc_configResp_sglId ;
  assign fifo_configResp_ENQ = EN_ifc_configResp ;
  assign fifo_configResp_DEQ = EN_inverseIfc_configResp ;
  assign fifo_configResp_CLR = 1'b0 ;

  // submodule fifo_error
  assign fifo_error_D_IN =
	     { ifc_error_code,
	       ifc_error_sglId,
	       ifc_error_offset,
	       ifc_error_extra } ;
  assign fifo_error_ENQ = EN_ifc_error ;
  assign fifo_error_DEQ = EN_inverseIfc_error ;
  assign fifo_error_CLR = 1'b0 ;

  // submodule fifo_idResponse
  assign fifo_idResponse_D_IN = ifc_idResponse_sglId ;
  assign fifo_idResponse_ENQ = EN_ifc_idResponse ;
  assign fifo_idResponse_DEQ = EN_inverseIfc_idResponse ;
  assign fifo_idResponse_CLR = 1'b0 ;
endmodule  // mkMMUIndicationInverter

