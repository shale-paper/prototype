//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule pci_request_get  CF ( pci_response_put,
// 			       trace_put,
// 			       bus_request_put,
// 			       bus_response_get,
// 			       traceServer_tlpTracing__write,
// 			       traceServer_tlpTracing__read,
// 			       traceServer_tlpTraceLimit__write,
// 			       traceServer_tlpTraceLimit__read,
// 			       traceServer_tlpTraceBramWrAddr__write,
// 			       traceServer_tlpTraceBramWrAddr__read,
// 			       traceServer_bramServer_request_put,
// 			       traceServer_bramServer_response_get );
// schedule pci_request_get  C ( pci_request_get );
//
// schedule pci_response_put  CF ( pci_request_get,
// 				trace_put,
// 				bus_request_put,
// 				bus_response_get,
// 				traceServer_tlpTracing__write,
// 				traceServer_tlpTracing__read,
// 				traceServer_tlpTraceLimit__write,
// 				traceServer_tlpTraceLimit__read,
// 				traceServer_tlpTraceBramWrAddr__write,
// 				traceServer_tlpTraceBramWrAddr__read,
// 				traceServer_bramServer_request_put,
// 				traceServer_bramServer_response_get );
// schedule pci_response_put  C ( pci_response_put );
//
// schedule trace_put  CF ( pci_request_get,
// 			 pci_response_put,
// 			 traceServer_tlpTracing__read,
// 			 traceServer_tlpTraceLimit__write,
// 			 traceServer_tlpTraceLimit__read,
// 			 traceServer_tlpTraceBramWrAddr__write,
// 			 traceServer_bramServer_response_get );
// schedule trace_put  SB ( traceServer_tlpTracing__write );
// schedule trace_put  C ( trace_put, traceServer_bramServer_request_put );
//
// schedule bus_request_put  CF ( pci_request_get,
// 			       pci_response_put,
// 			       bus_response_get,
// 			       traceServer_tlpTracing__read,
// 			       traceServer_tlpTraceLimit__write,
// 			       traceServer_tlpTraceLimit__read,
// 			       traceServer_tlpTraceBramWrAddr__read,
// 			       traceServer_bramServer_request_put,
// 			       traceServer_bramServer_response_get );
// schedule bus_request_put  SBR ( trace_put,
// 				traceServer_tlpTracing__write,
// 				traceServer_tlpTraceBramWrAddr__write );
// schedule bus_request_put  C ( bus_request_put );
//
// schedule bus_response_get  CF ( pci_request_get,
// 				pci_response_put,
// 				bus_request_put,
// 				traceServer_tlpTracing__read,
// 				traceServer_tlpTraceLimit__write,
// 				traceServer_tlpTraceLimit__read,
// 				traceServer_tlpTraceBramWrAddr__read,
// 				traceServer_bramServer_request_put,
// 				traceServer_bramServer_response_get );
// schedule bus_response_get  SBR ( trace_put,
// 				 traceServer_tlpTracing__write,
// 				 traceServer_tlpTraceBramWrAddr__write );
// schedule bus_response_get  C ( bus_response_get );
//
// schedule traceServer_tlpTracing__write  CF ( pci_request_get,
// 					     pci_response_put,
// 					     traceServer_tlpTraceLimit__write,
// 					     traceServer_tlpTraceLimit__read,
// 					     traceServer_tlpTraceBramWrAddr__write );
// schedule traceServer_tlpTracing__write  SBR ( traceServer_tlpTracing__write );
//
// schedule traceServer_tlpTracing__read  CF ( pci_request_get,
// 					    pci_response_put,
// 					    trace_put,
// 					    bus_request_put,
// 					    bus_response_get,
// 					    traceServer_tlpTracing__read,
// 					    traceServer_tlpTraceLimit__write,
// 					    traceServer_tlpTraceLimit__read,
// 					    traceServer_tlpTraceBramWrAddr__write,
// 					    traceServer_tlpTraceBramWrAddr__read,
// 					    traceServer_bramServer_request_put,
// 					    traceServer_bramServer_response_get );
// schedule traceServer_tlpTracing__read  SB ( traceServer_tlpTracing__write );
//
// schedule traceServer_tlpTraceLimit__write  CF ( pci_request_get,
// 						pci_response_put,
// 						trace_put,
// 						bus_request_put,
// 						bus_response_get,
// 						traceServer_tlpTracing__write,
// 						traceServer_tlpTracing__read,
// 						traceServer_tlpTraceBramWrAddr__write,
// 						traceServer_tlpTraceBramWrAddr__read,
// 						traceServer_bramServer_request_put,
// 						traceServer_bramServer_response_get );
// schedule traceServer_tlpTraceLimit__write  SBR ( traceServer_tlpTraceLimit__write );
//
// schedule traceServer_tlpTraceLimit__read  CF ( pci_request_get,
// 					       pci_response_put,
// 					       trace_put,
// 					       bus_request_put,
// 					       bus_response_get,
// 					       traceServer_tlpTracing__write,
// 					       traceServer_tlpTracing__read,
// 					       traceServer_tlpTraceLimit__read,
// 					       traceServer_tlpTraceBramWrAddr__write,
// 					       traceServer_tlpTraceBramWrAddr__read,
// 					       traceServer_bramServer_request_put,
// 					       traceServer_bramServer_response_get );
// schedule traceServer_tlpTraceLimit__read  SB ( traceServer_tlpTraceLimit__write );
//
// schedule traceServer_tlpTraceBramWrAddr__write  CF ( pci_request_get,
// 						     pci_response_put,
// 						     trace_put,
// 						     traceServer_tlpTracing__write,
// 						     traceServer_tlpTracing__read,
// 						     traceServer_tlpTraceLimit__write,
// 						     traceServer_tlpTraceLimit__read,
// 						     traceServer_bramServer_request_put,
// 						     traceServer_bramServer_response_get );
// schedule traceServer_tlpTraceBramWrAddr__write  C ( traceServer_tlpTraceBramWrAddr__write );
//
// schedule traceServer_tlpTraceBramWrAddr__read  CF ( pci_request_get,
// 						    pci_response_put,
// 						    bus_request_put,
// 						    bus_response_get,
// 						    traceServer_tlpTracing__read,
// 						    traceServer_tlpTraceLimit__write,
// 						    traceServer_tlpTraceLimit__read,
// 						    traceServer_tlpTraceBramWrAddr__read,
// 						    traceServer_bramServer_request_put,
// 						    traceServer_bramServer_response_get );
// schedule traceServer_tlpTraceBramWrAddr__read  SB ( trace_put );
// schedule traceServer_tlpTraceBramWrAddr__read  SBR ( traceServer_tlpTracing__write,
// 						     traceServer_tlpTraceBramWrAddr__write );
//
// schedule traceServer_bramServer_request_put  CF ( pci_request_get,
// 						  pci_response_put,
// 						  bus_request_put,
// 						  bus_response_get,
// 						  traceServer_tlpTracing__read,
// 						  traceServer_tlpTraceLimit__write,
// 						  traceServer_tlpTraceLimit__read,
// 						  traceServer_tlpTraceBramWrAddr__write,
// 						  traceServer_tlpTraceBramWrAddr__read,
// 						  traceServer_bramServer_response_get );
// schedule traceServer_bramServer_request_put  SBR ( traceServer_tlpTracing__write );
// schedule traceServer_bramServer_request_put  C ( trace_put,
// 						 traceServer_bramServer_request_put );
//
// schedule traceServer_bramServer_response_get  CF ( pci_request_get,
// 						   pci_response_put,
// 						   trace_put,
// 						   bus_request_put,
// 						   bus_response_get,
// 						   traceServer_tlpTracing__read,
// 						   traceServer_tlpTraceLimit__write,
// 						   traceServer_tlpTraceLimit__read,
// 						   traceServer_tlpTraceBramWrAddr__write,
// 						   traceServer_tlpTraceBramWrAddr__read,
// 						   traceServer_bramServer_request_put );
// schedule traceServer_bramServer_response_get  SBR ( traceServer_tlpTracing__write );
// schedule traceServer_bramServer_response_get  C ( traceServer_bramServer_response_get );
//
//
// Ports:
// Name                         I/O  size props
// pci_request_get                O   153 reg
// RDY_pci_request_get            O     1 reg
// RDY_pci_response_put           O     1 reg
// RDY_trace_put                  O     1
// RDY_bus_request_put            O     1 reg
// bus_response_get               O   153 reg
// RDY_bus_response_get           O     1
// RDY_traceServer_tlpTracing__write  O     1 const
// traceServer_tlpTracing__read   O     1 reg
// RDY_traceServer_tlpTracing__read  O     1 const
// RDY_traceServer_tlpTraceLimit__write  O     1 const
// traceServer_tlpTraceLimit__read  O    11 reg
// RDY_traceServer_tlpTraceLimit__read  O     1 const
// RDY_traceServer_tlpTraceBramWrAddr__write  O     1 reg
// traceServer_tlpTraceBramWrAddr__read  O    11 reg
// RDY_traceServer_tlpTraceBramWrAddr__read  O     1 const
// RDY_traceServer_bramServer_request_put  O     1
// traceServer_bramServer_response_get  O   192
// RDY_traceServer_bramServer_response_get  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// pci_response_put               I   153 reg
// trace_put                      I   192
// bus_request_put                I   153
// traceServer_tlpTracing__write_1  I     1 reg
// traceServer_tlpTraceLimit__write_1  I    11 reg
// traceServer_tlpTraceBramWrAddr__write_1  I    11 reg
// traceServer_bramServer_request_put  I   206
// EN_pci_response_put            I     1
// EN_trace_put                   I     1
// EN_bus_request_put             I     1
// EN_traceServer_tlpTracing__write  I     1
// EN_traceServer_tlpTraceLimit__write  I     1
// EN_traceServer_tlpTraceBramWrAddr__write  I     1
// EN_traceServer_bramServer_request_put  I     1
// EN_pci_request_get             I     1
// EN_bus_response_get            I     1
// EN_traceServer_bramServer_response_get  I     1
//
// Combinational paths from inputs to outputs:
//   (EN_bus_request_put, EN_bus_response_get) -> RDY_trace_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPcieTracer(CLK,
		    RST_N,

		    EN_pci_request_get,
		    pci_request_get,
		    RDY_pci_request_get,

		    pci_response_put,
		    EN_pci_response_put,
		    RDY_pci_response_put,

		    trace_put,
		    EN_trace_put,
		    RDY_trace_put,

		    bus_request_put,
		    EN_bus_request_put,
		    RDY_bus_request_put,

		    EN_bus_response_get,
		    bus_response_get,
		    RDY_bus_response_get,

		    traceServer_tlpTracing__write_1,
		    EN_traceServer_tlpTracing__write,
		    RDY_traceServer_tlpTracing__write,

		    traceServer_tlpTracing__read,
		    RDY_traceServer_tlpTracing__read,

		    traceServer_tlpTraceLimit__write_1,
		    EN_traceServer_tlpTraceLimit__write,
		    RDY_traceServer_tlpTraceLimit__write,

		    traceServer_tlpTraceLimit__read,
		    RDY_traceServer_tlpTraceLimit__read,

		    traceServer_tlpTraceBramWrAddr__write_1,
		    EN_traceServer_tlpTraceBramWrAddr__write,
		    RDY_traceServer_tlpTraceBramWrAddr__write,

		    traceServer_tlpTraceBramWrAddr__read,
		    RDY_traceServer_tlpTraceBramWrAddr__read,

		    traceServer_bramServer_request_put,
		    EN_traceServer_bramServer_request_put,
		    RDY_traceServer_bramServer_request_put,

		    EN_traceServer_bramServer_response_get,
		    traceServer_bramServer_response_get,
		    RDY_traceServer_bramServer_response_get);
  input  CLK;
  input  RST_N;

  // actionvalue method pci_request_get
  input  EN_pci_request_get;
  output [152 : 0] pci_request_get;
  output RDY_pci_request_get;

  // action method pci_response_put
  input  [152 : 0] pci_response_put;
  input  EN_pci_response_put;
  output RDY_pci_response_put;

  // action method trace_put
  input  [191 : 0] trace_put;
  input  EN_trace_put;
  output RDY_trace_put;

  // action method bus_request_put
  input  [152 : 0] bus_request_put;
  input  EN_bus_request_put;
  output RDY_bus_request_put;

  // actionvalue method bus_response_get
  input  EN_bus_response_get;
  output [152 : 0] bus_response_get;
  output RDY_bus_response_get;

  // action method traceServer_tlpTracing__write
  input  traceServer_tlpTracing__write_1;
  input  EN_traceServer_tlpTracing__write;
  output RDY_traceServer_tlpTracing__write;

  // value method traceServer_tlpTracing__read
  output traceServer_tlpTracing__read;
  output RDY_traceServer_tlpTracing__read;

  // action method traceServer_tlpTraceLimit__write
  input  [10 : 0] traceServer_tlpTraceLimit__write_1;
  input  EN_traceServer_tlpTraceLimit__write;
  output RDY_traceServer_tlpTraceLimit__write;

  // value method traceServer_tlpTraceLimit__read
  output [10 : 0] traceServer_tlpTraceLimit__read;
  output RDY_traceServer_tlpTraceLimit__read;

  // action method traceServer_tlpTraceBramWrAddr__write
  input  [10 : 0] traceServer_tlpTraceBramWrAddr__write_1;
  input  EN_traceServer_tlpTraceBramWrAddr__write;
  output RDY_traceServer_tlpTraceBramWrAddr__write;

  // value method traceServer_tlpTraceBramWrAddr__read
  output [10 : 0] traceServer_tlpTraceBramWrAddr__read;
  output RDY_traceServer_tlpTraceBramWrAddr__read;

  // action method traceServer_bramServer_request_put
  input  [205 : 0] traceServer_bramServer_request_put;
  input  EN_traceServer_bramServer_request_put;
  output RDY_traceServer_bramServer_request_put;

  // actionvalue method traceServer_bramServer_response_get
  input  EN_traceServer_bramServer_response_get;
  output [191 : 0] traceServer_bramServer_response_get;
  output RDY_traceServer_bramServer_response_get;

  // signals for module outputs
  wire [191 : 0] traceServer_bramServer_response_get;
  wire [152 : 0] bus_response_get, pci_request_get;
  wire [10 : 0] traceServer_tlpTraceBramWrAddr__read,
		traceServer_tlpTraceLimit__read;
  wire RDY_bus_request_put,
       RDY_bus_response_get,
       RDY_pci_request_get,
       RDY_pci_response_put,
       RDY_traceServer_bramServer_request_put,
       RDY_traceServer_bramServer_response_get,
       RDY_traceServer_tlpTraceBramWrAddr__read,
       RDY_traceServer_tlpTraceBramWrAddr__write,
       RDY_traceServer_tlpTraceLimit__read,
       RDY_traceServer_tlpTraceLimit__write,
       RDY_traceServer_tlpTracing__read,
       RDY_traceServer_tlpTracing__write,
       RDY_trace_put,
       traceServer_tlpTracing__read;

  // inlined wires
  wire [193 : 0] fromPcieTraceBram_cbram_data0_0_wget;
  wire [192 : 0] bramMuxReg_responseFifo_rv_port1__read,
		 bramMuxReg_responseFifo_rv_port1__write_1,
		 bramMuxReg_responseFifo_rv_port2__read;
  wire bramMuxReg_responseFifo_rv_EN_port1__write,
       fromPcie_whas,
       fromPcieTraceBram_cbram_data0_0_whas,
       toPcie_whas,
       toPcieTraceBram_cbram_data0_0_whas;

  // register bramMuxReg_responseFifo_rv
  reg [192 : 0] bramMuxReg_responseFifo_rv;
  wire [192 : 0] bramMuxReg_responseFifo_rv_D_IN;
  wire bramMuxReg_responseFifo_rv_EN;

  // register fromPcieTraceBram_cbram_counter_0_cnt
  reg [1 : 0] fromPcieTraceBram_cbram_counter_0_cnt;
  wire [1 : 0] fromPcieTraceBram_cbram_counter_0_cnt_D_IN;
  wire fromPcieTraceBram_cbram_counter_0_cnt_EN;

  // register fromPcieTraceBram_cbram_counter_0_positive_reg
  reg fromPcieTraceBram_cbram_counter_0_positive_reg;
  wire fromPcieTraceBram_cbram_counter_0_positive_reg_D_IN,
       fromPcieTraceBram_cbram_counter_0_positive_reg_EN;

  // register fromPcieTraceBram_cbram_counter_1_cnt
  reg [1 : 0] fromPcieTraceBram_cbram_counter_1_cnt;
  wire [1 : 0] fromPcieTraceBram_cbram_counter_1_cnt_D_IN;
  wire fromPcieTraceBram_cbram_counter_1_cnt_EN;

  // register fromPcieTraceBram_cbram_counter_1_positive_reg
  reg fromPcieTraceBram_cbram_counter_1_positive_reg;
  wire fromPcieTraceBram_cbram_counter_1_positive_reg_D_IN,
       fromPcieTraceBram_cbram_counter_1_positive_reg_EN;

  // register fromPcieTraceBram_cbram_cycles
  reg [31 : 0] fromPcieTraceBram_cbram_cycles;
  wire [31 : 0] fromPcieTraceBram_cbram_cycles_D_IN;
  wire fromPcieTraceBram_cbram_cycles_EN;

  // register fromPcieTraceBram_cbram_data1_0
  reg [193 : 0] fromPcieTraceBram_cbram_data1_0;
  wire [193 : 0] fromPcieTraceBram_cbram_data1_0_D_IN;
  wire fromPcieTraceBram_cbram_data1_0_EN;

  // register fromPcieTraceBram_cbram_data1_1
  reg [193 : 0] fromPcieTraceBram_cbram_data1_1;
  wire [193 : 0] fromPcieTraceBram_cbram_data1_1_D_IN;
  wire fromPcieTraceBram_cbram_data1_1_EN;

  // register fromPcieTraceBram_cbram_data2_0
  reg [193 : 0] fromPcieTraceBram_cbram_data2_0;
  wire [193 : 0] fromPcieTraceBram_cbram_data2_0_D_IN;
  wire fromPcieTraceBram_cbram_data2_0_EN;

  // register fromPcieTraceBram_cbram_data2_1
  reg [193 : 0] fromPcieTraceBram_cbram_data2_1;
  wire [193 : 0] fromPcieTraceBram_cbram_data2_1_D_IN;
  wire fromPcieTraceBram_cbram_data2_1_EN;

  // register skippingIncomingTlps
  reg skippingIncomingTlps;
  wire skippingIncomingTlps_D_IN, skippingIncomingTlps_EN;

  // register timestamp
  reg [31 : 0] timestamp;
  wire [31 : 0] timestamp_D_IN;
  wire timestamp_EN;

  // register tlpTraceBramWrAddrReg
  reg [10 : 0] tlpTraceBramWrAddrReg;
  wire [10 : 0] tlpTraceBramWrAddrReg_D_IN;
  wire tlpTraceBramWrAddrReg_EN;

  // register tlpTraceLimitReg
  reg [10 : 0] tlpTraceLimitReg;
  wire [10 : 0] tlpTraceLimitReg_D_IN;
  wire tlpTraceLimitReg_EN;

  // register tlpTracingReg
  reg tlpTracingReg;
  wire tlpTracingReg_D_IN, tlpTracingReg_EN;

  // register toPcieTraceBram_cbram_counter_0_cnt
  reg [1 : 0] toPcieTraceBram_cbram_counter_0_cnt;
  wire [1 : 0] toPcieTraceBram_cbram_counter_0_cnt_D_IN;
  wire toPcieTraceBram_cbram_counter_0_cnt_EN;

  // register toPcieTraceBram_cbram_counter_0_positive_reg
  reg toPcieTraceBram_cbram_counter_0_positive_reg;
  wire toPcieTraceBram_cbram_counter_0_positive_reg_D_IN,
       toPcieTraceBram_cbram_counter_0_positive_reg_EN;

  // register toPcieTraceBram_cbram_counter_1_cnt
  reg [1 : 0] toPcieTraceBram_cbram_counter_1_cnt;
  wire [1 : 0] toPcieTraceBram_cbram_counter_1_cnt_D_IN;
  wire toPcieTraceBram_cbram_counter_1_cnt_EN;

  // register toPcieTraceBram_cbram_counter_1_positive_reg
  reg toPcieTraceBram_cbram_counter_1_positive_reg;
  wire toPcieTraceBram_cbram_counter_1_positive_reg_D_IN,
       toPcieTraceBram_cbram_counter_1_positive_reg_EN;

  // register toPcieTraceBram_cbram_cycles
  reg [31 : 0] toPcieTraceBram_cbram_cycles;
  wire [31 : 0] toPcieTraceBram_cbram_cycles_D_IN;
  wire toPcieTraceBram_cbram_cycles_EN;

  // register toPcieTraceBram_cbram_data1_0
  reg [193 : 0] toPcieTraceBram_cbram_data1_0;
  wire [193 : 0] toPcieTraceBram_cbram_data1_0_D_IN;
  wire toPcieTraceBram_cbram_data1_0_EN;

  // register toPcieTraceBram_cbram_data1_1
  reg [193 : 0] toPcieTraceBram_cbram_data1_1;
  wire [193 : 0] toPcieTraceBram_cbram_data1_1_D_IN;
  wire toPcieTraceBram_cbram_data1_1_EN;

  // register toPcieTraceBram_cbram_data2_0
  reg [193 : 0] toPcieTraceBram_cbram_data2_0;
  wire [193 : 0] toPcieTraceBram_cbram_data2_0_D_IN;
  wire toPcieTraceBram_cbram_data2_0_EN;

  // register toPcieTraceBram_cbram_data2_1
  reg [193 : 0] toPcieTraceBram_cbram_data2_1;
  wire [193 : 0] toPcieTraceBram_cbram_data2_1_D_IN;
  wire toPcieTraceBram_cbram_data2_1_EN;

  // ports of submodule fromPcieTraceBram_cbram_bram
  wire [191 : 0] fromPcieTraceBram_cbram_bram_DIA,
		 fromPcieTraceBram_cbram_bram_DIB,
		 fromPcieTraceBram_cbram_bram_DOA,
		 fromPcieTraceBram_cbram_bram_DOB;
  wire [10 : 0] fromPcieTraceBram_cbram_bram_ADDRA,
		fromPcieTraceBram_cbram_bram_ADDRB;
  wire fromPcieTraceBram_cbram_bram_ENA,
       fromPcieTraceBram_cbram_bram_ENB,
       fromPcieTraceBram_cbram_bram_WEA,
       fromPcieTraceBram_cbram_bram_WEB;

  // ports of submodule fromPcieTraceBram_cbram_responseFifo_0
  wire [191 : 0] fromPcieTraceBram_cbram_responseFifo_0_D_IN,
		 fromPcieTraceBram_cbram_responseFifo_0_D_OUT;
  wire fromPcieTraceBram_cbram_responseFifo_0_CLR,
       fromPcieTraceBram_cbram_responseFifo_0_DEQ,
       fromPcieTraceBram_cbram_responseFifo_0_EMPTY_N,
       fromPcieTraceBram_cbram_responseFifo_0_ENQ,
       fromPcieTraceBram_cbram_responseFifo_0_FULL_N;

  // ports of submodule fromPcieTraceBram_cbram_responseFifo_1
  wire [191 : 0] fromPcieTraceBram_cbram_responseFifo_1_D_IN;
  wire fromPcieTraceBram_cbram_responseFifo_1_CLR,
       fromPcieTraceBram_cbram_responseFifo_1_DEQ,
       fromPcieTraceBram_cbram_responseFifo_1_ENQ,
       fromPcieTraceBram_cbram_responseFifo_1_FULL_N;

  // ports of submodule isRootBroadcastMessage
  wire isRootBroadcastMessage_CLR,
       isRootBroadcastMessage_DEQ,
       isRootBroadcastMessage_D_IN,
       isRootBroadcastMessage_D_OUT,
       isRootBroadcastMessage_EMPTY_N,
       isRootBroadcastMessage_ENQ,
       isRootBroadcastMessage_FULL_N;

  // ports of submodule tlpBusResponseFifo
  wire [152 : 0] tlpBusResponseFifo_D_IN, tlpBusResponseFifo_D_OUT;
  wire tlpBusResponseFifo_CLR,
       tlpBusResponseFifo_DEQ,
       tlpBusResponseFifo_EMPTY_N,
       tlpBusResponseFifo_ENQ,
       tlpBusResponseFifo_FULL_N;

  // ports of submodule tlpFromBusFifo
  wire [152 : 0] tlpFromBusFifo_D_IN, tlpFromBusFifo_D_OUT;
  wire tlpFromBusFifo_CLR,
       tlpFromBusFifo_DEQ,
       tlpFromBusFifo_EMPTY_N,
       tlpFromBusFifo_ENQ,
       tlpFromBusFifo_FULL_N;

  // ports of submodule tlpToBusFifo
  wire [152 : 0] tlpToBusFifo_D_IN, tlpToBusFifo_D_OUT;
  wire tlpToBusFifo_CLR,
       tlpToBusFifo_DEQ,
       tlpToBusFifo_EMPTY_N,
       tlpToBusFifo_ENQ,
       tlpToBusFifo_FULL_N;

  // ports of submodule tlpTraceBramWrAddrFifo
  wire [10 : 0] tlpTraceBramWrAddrFifo_D_IN, tlpTraceBramWrAddrFifo_D_OUT;
  wire tlpTraceBramWrAddrFifo_CLR,
       tlpTraceBramWrAddrFifo_DEQ,
       tlpTraceBramWrAddrFifo_EMPTY_N,
       tlpTraceBramWrAddrFifo_ENQ,
       tlpTraceBramWrAddrFifo_FULL_N;

  // ports of submodule toPcieTraceBram_cbram_bram
  reg [191 : 0] toPcieTraceBram_cbram_bram_DIA;
  reg [10 : 0] toPcieTraceBram_cbram_bram_ADDRA;
  wire [191 : 0] toPcieTraceBram_cbram_bram_DIB,
		 toPcieTraceBram_cbram_bram_DOA,
		 toPcieTraceBram_cbram_bram_DOB;
  wire [10 : 0] toPcieTraceBram_cbram_bram_ADDRB;
  wire toPcieTraceBram_cbram_bram_ENA,
       toPcieTraceBram_cbram_bram_ENB,
       toPcieTraceBram_cbram_bram_WEA,
       toPcieTraceBram_cbram_bram_WEB;

  // ports of submodule toPcieTraceBram_cbram_responseFifo_0
  wire [191 : 0] toPcieTraceBram_cbram_responseFifo_0_D_IN,
		 toPcieTraceBram_cbram_responseFifo_0_D_OUT;
  wire toPcieTraceBram_cbram_responseFifo_0_CLR,
       toPcieTraceBram_cbram_responseFifo_0_DEQ,
       toPcieTraceBram_cbram_responseFifo_0_EMPTY_N,
       toPcieTraceBram_cbram_responseFifo_0_ENQ,
       toPcieTraceBram_cbram_responseFifo_0_FULL_N;

  // ports of submodule toPcieTraceBram_cbram_responseFifo_1
  wire [191 : 0] toPcieTraceBram_cbram_responseFifo_1_D_IN;
  wire toPcieTraceBram_cbram_responseFifo_1_CLR,
       toPcieTraceBram_cbram_responseFifo_1_DEQ,
       toPcieTraceBram_cbram_responseFifo_1_ENQ,
       toPcieTraceBram_cbram_responseFifo_1_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_bramMuxReg_respond,
       WILL_FIRE_RL_bramMuxReg_respond_1,
       WILL_FIRE_RL_doTracing;

  // inputs to muxes for submodule ports
  wire [192 : 0] MUX_bramMuxReg_responseFifo_rv_port1__write_1__VAL_1,
		 MUX_bramMuxReg_responseFifo_rv_port1__write_1__VAL_2;
  wire [191 : 0] MUX_fromPcieTraceBram_cbram_bram_a_put_3__VAL_2,
		 MUX_toPcieTraceBram_cbram_bram_a_put_3__VAL_1,
		 MUX_toPcieTraceBram_cbram_bram_a_put_3__VAL_3;
  wire [10 : 0] MUX_tlpTraceBramWrAddrReg_write_1__VAL_1,
		MUX_tlpTraceBramWrAddrReg_write_1__VAL_2;
  wire MUX_fromPcieTraceBram_cbram_bram_a_put_1__SEL_1,
       MUX_tlpTraceBramWrAddrReg_write_1__SEL_1,
       MUX_toPcieTraceBram_cbram_bram_a_put_1__SEL_2;

  // remaining internal signals
  wire [31 : 0] fromttd_timestamp__h8565, tottd_timestamp__h8734;
  wire [10 : 0] v__h8457;
  wire [6 : 0] fromttd_source__h8566, tottd_source__h8735;
  wire [1 : 0] fromPcieTraceBram_cbram_counter_0_cnt_PLUS_IF__ETC___d9,
	       toPcieTraceBram_cbram_counter_0_cnt_5_PLUS_IF__ETC___d73;

  // actionvalue method pci_request_get
  assign pci_request_get = tlpToBusFifo_D_OUT ;
  assign RDY_pci_request_get = tlpToBusFifo_EMPTY_N ;

  // action method pci_response_put
  assign RDY_pci_response_put = tlpFromBusFifo_FULL_N ;

  // action method trace_put
  assign RDY_trace_put =
	     !fromPcie_whas && !toPcie_whas &&
	     (!tlpTracingReg ||
	      toPcieTraceBram_cbram_counter_0_positive_reg) ;

  // action method bus_request_put
  assign RDY_bus_request_put = tlpToBusFifo_FULL_N ;

  // actionvalue method bus_response_get
  assign bus_response_get = tlpBusResponseFifo_D_OUT ;
  assign RDY_bus_response_get =
	     tlpBusResponseFifo_EMPTY_N && isRootBroadcastMessage_EMPTY_N ;

  // action method traceServer_tlpTracing__write
  assign RDY_traceServer_tlpTracing__write = 1'd1 ;

  // value method traceServer_tlpTracing__read
  assign traceServer_tlpTracing__read = tlpTracingReg ;
  assign RDY_traceServer_tlpTracing__read = 1'd1 ;

  // action method traceServer_tlpTraceLimit__write
  assign RDY_traceServer_tlpTraceLimit__write = 1'd1 ;

  // value method traceServer_tlpTraceLimit__read
  assign traceServer_tlpTraceLimit__read = tlpTraceLimitReg ;
  assign RDY_traceServer_tlpTraceLimit__read = 1'd1 ;

  // action method traceServer_tlpTraceBramWrAddr__write
  assign RDY_traceServer_tlpTraceBramWrAddr__write =
	     tlpTraceBramWrAddrFifo_FULL_N ;

  // value method traceServer_tlpTraceBramWrAddr__read
  assign traceServer_tlpTraceBramWrAddr__read = tlpTraceBramWrAddrReg ;
  assign RDY_traceServer_tlpTraceBramWrAddr__read = 1'd1 ;

  // action method traceServer_bramServer_request_put
  assign RDY_traceServer_bramServer_request_put =
	     !tlpTracingReg &&
	     fromPcieTraceBram_cbram_counter_0_positive_reg &&
	     toPcieTraceBram_cbram_counter_0_positive_reg ;

  // actionvalue method traceServer_bramServer_response_get
  assign traceServer_bramServer_response_get =
	     bramMuxReg_responseFifo_rv[191:0] ;
  assign RDY_traceServer_bramServer_response_get =
	     bramMuxReg_responseFifo_rv[192] ;

  // submodule fromPcieTraceBram_cbram_bram
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd192),
	  .MEMSIZE(12'd2048)) fromPcieTraceBram_cbram_bram(.CLKA(CLK),
							   .CLKB(CLK),
							   .ADDRA(fromPcieTraceBram_cbram_bram_ADDRA),
							   .ADDRB(fromPcieTraceBram_cbram_bram_ADDRB),
							   .DIA(fromPcieTraceBram_cbram_bram_DIA),
							   .DIB(fromPcieTraceBram_cbram_bram_DIB),
							   .WEA(fromPcieTraceBram_cbram_bram_WEA),
							   .WEB(fromPcieTraceBram_cbram_bram_WEB),
							   .ENA(fromPcieTraceBram_cbram_bram_ENA),
							   .ENB(fromPcieTraceBram_cbram_bram_ENB),
							   .DOA(fromPcieTraceBram_cbram_bram_DOA),
							   .DOB(fromPcieTraceBram_cbram_bram_DOB));

  // submodule fromPcieTraceBram_cbram_responseFifo_0
  FIFO2 #(.width(32'd192),
	  .guarded(1'd1)) fromPcieTraceBram_cbram_responseFifo_0(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fromPcieTraceBram_cbram_responseFifo_0_D_IN),
								 .ENQ(fromPcieTraceBram_cbram_responseFifo_0_ENQ),
								 .DEQ(fromPcieTraceBram_cbram_responseFifo_0_DEQ),
								 .CLR(fromPcieTraceBram_cbram_responseFifo_0_CLR),
								 .D_OUT(fromPcieTraceBram_cbram_responseFifo_0_D_OUT),
								 .FULL_N(fromPcieTraceBram_cbram_responseFifo_0_FULL_N),
								 .EMPTY_N(fromPcieTraceBram_cbram_responseFifo_0_EMPTY_N));

  // submodule fromPcieTraceBram_cbram_responseFifo_1
  FIFO2 #(.width(32'd192),
	  .guarded(1'd1)) fromPcieTraceBram_cbram_responseFifo_1(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fromPcieTraceBram_cbram_responseFifo_1_D_IN),
								 .ENQ(fromPcieTraceBram_cbram_responseFifo_1_ENQ),
								 .DEQ(fromPcieTraceBram_cbram_responseFifo_1_DEQ),
								 .CLR(fromPcieTraceBram_cbram_responseFifo_1_CLR),
								 .D_OUT(),
								 .FULL_N(fromPcieTraceBram_cbram_responseFifo_1_FULL_N),
								 .EMPTY_N());

  // submodule isRootBroadcastMessage
  FIFO2 #(.width(32'd1), .guarded(1'd1)) isRootBroadcastMessage(.RST(RST_N),
								.CLK(CLK),
								.D_IN(isRootBroadcastMessage_D_IN),
								.ENQ(isRootBroadcastMessage_ENQ),
								.DEQ(isRootBroadcastMessage_DEQ),
								.CLR(isRootBroadcastMessage_CLR),
								.D_OUT(isRootBroadcastMessage_D_OUT),
								.FULL_N(isRootBroadcastMessage_FULL_N),
								.EMPTY_N(isRootBroadcastMessage_EMPTY_N));

  // submodule tlpBusResponseFifo
  FIFO2 #(.width(32'd153), .guarded(1'd1)) tlpBusResponseFifo(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(tlpBusResponseFifo_D_IN),
							      .ENQ(tlpBusResponseFifo_ENQ),
							      .DEQ(tlpBusResponseFifo_DEQ),
							      .CLR(tlpBusResponseFifo_CLR),
							      .D_OUT(tlpBusResponseFifo_D_OUT),
							      .FULL_N(tlpBusResponseFifo_FULL_N),
							      .EMPTY_N(tlpBusResponseFifo_EMPTY_N));

  // submodule tlpFromBusFifo
  FIFO2 #(.width(32'd153), .guarded(1'd1)) tlpFromBusFifo(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(tlpFromBusFifo_D_IN),
							  .ENQ(tlpFromBusFifo_ENQ),
							  .DEQ(tlpFromBusFifo_DEQ),
							  .CLR(tlpFromBusFifo_CLR),
							  .D_OUT(tlpFromBusFifo_D_OUT),
							  .FULL_N(tlpFromBusFifo_FULL_N),
							  .EMPTY_N(tlpFromBusFifo_EMPTY_N));

  // submodule tlpToBusFifo
  FIFO2 #(.width(32'd153), .guarded(1'd1)) tlpToBusFifo(.RST(RST_N),
							.CLK(CLK),
							.D_IN(tlpToBusFifo_D_IN),
							.ENQ(tlpToBusFifo_ENQ),
							.DEQ(tlpToBusFifo_DEQ),
							.CLR(tlpToBusFifo_CLR),
							.D_OUT(tlpToBusFifo_D_OUT),
							.FULL_N(tlpToBusFifo_FULL_N),
							.EMPTY_N(tlpToBusFifo_EMPTY_N));

  // submodule tlpTraceBramWrAddrFifo
  FIFO2 #(.width(32'd11), .guarded(1'd1)) tlpTraceBramWrAddrFifo(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(tlpTraceBramWrAddrFifo_D_IN),
								 .ENQ(tlpTraceBramWrAddrFifo_ENQ),
								 .DEQ(tlpTraceBramWrAddrFifo_DEQ),
								 .CLR(tlpTraceBramWrAddrFifo_CLR),
								 .D_OUT(tlpTraceBramWrAddrFifo_D_OUT),
								 .FULL_N(tlpTraceBramWrAddrFifo_FULL_N),
								 .EMPTY_N(tlpTraceBramWrAddrFifo_EMPTY_N));

  // submodule toPcieTraceBram_cbram_bram
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd192),
	  .MEMSIZE(12'd2048)) toPcieTraceBram_cbram_bram(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(toPcieTraceBram_cbram_bram_ADDRA),
							 .ADDRB(toPcieTraceBram_cbram_bram_ADDRB),
							 .DIA(toPcieTraceBram_cbram_bram_DIA),
							 .DIB(toPcieTraceBram_cbram_bram_DIB),
							 .WEA(toPcieTraceBram_cbram_bram_WEA),
							 .WEB(toPcieTraceBram_cbram_bram_WEB),
							 .ENA(toPcieTraceBram_cbram_bram_ENA),
							 .ENB(toPcieTraceBram_cbram_bram_ENB),
							 .DOA(toPcieTraceBram_cbram_bram_DOA),
							 .DOB(toPcieTraceBram_cbram_bram_DOB));

  // submodule toPcieTraceBram_cbram_responseFifo_0
  FIFO2 #(.width(32'd192),
	  .guarded(1'd1)) toPcieTraceBram_cbram_responseFifo_0(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(toPcieTraceBram_cbram_responseFifo_0_D_IN),
							       .ENQ(toPcieTraceBram_cbram_responseFifo_0_ENQ),
							       .DEQ(toPcieTraceBram_cbram_responseFifo_0_DEQ),
							       .CLR(toPcieTraceBram_cbram_responseFifo_0_CLR),
							       .D_OUT(toPcieTraceBram_cbram_responseFifo_0_D_OUT),
							       .FULL_N(toPcieTraceBram_cbram_responseFifo_0_FULL_N),
							       .EMPTY_N(toPcieTraceBram_cbram_responseFifo_0_EMPTY_N));

  // submodule toPcieTraceBram_cbram_responseFifo_1
  FIFO2 #(.width(32'd192),
	  .guarded(1'd1)) toPcieTraceBram_cbram_responseFifo_1(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(toPcieTraceBram_cbram_responseFifo_1_D_IN),
							       .ENQ(toPcieTraceBram_cbram_responseFifo_1_ENQ),
							       .DEQ(toPcieTraceBram_cbram_responseFifo_1_DEQ),
							       .CLR(toPcieTraceBram_cbram_responseFifo_1_CLR),
							       .D_OUT(),
							       .FULL_N(toPcieTraceBram_cbram_responseFifo_1_FULL_N),
							       .EMPTY_N());

  // rule RL_doTracing
  assign WILL_FIRE_RL_doTracing =
	     fromPcieTraceBram_cbram_counter_0_positive_reg &&
	     toPcieTraceBram_cbram_counter_0_positive_reg &&
	     tlpTracingReg &&
	     (fromPcie_whas || toPcie_whas) ;

  // rule RL_bramMuxReg_respond
  assign WILL_FIRE_RL_bramMuxReg_respond =
	     fromPcieTraceBram_cbram_responseFifo_0_EMPTY_N &&
	     !bramMuxReg_responseFifo_rv_port1__read[192] &&
	     !tlpTracingReg &&
	     !WILL_FIRE_RL_bramMuxReg_respond_1 ;

  // rule RL_bramMuxReg_respond_1
  assign WILL_FIRE_RL_bramMuxReg_respond_1 =
	     !bramMuxReg_responseFifo_rv_port1__read[192] &&
	     toPcieTraceBram_cbram_responseFifo_0_EMPTY_N &&
	     !tlpTracingReg ;

  // inputs to muxes for submodule ports
  assign MUX_fromPcieTraceBram_cbram_bram_a_put_1__SEL_1 =
	     EN_traceServer_bramServer_request_put &&
	     traceServer_bramServer_request_put[203] == 1'd0 ;
  assign MUX_tlpTraceBramWrAddrReg_write_1__SEL_1 =
	     EN_trace_put && tlpTracingReg ;
  assign MUX_toPcieTraceBram_cbram_bram_a_put_1__SEL_2 =
	     EN_traceServer_bramServer_request_put &&
	     traceServer_bramServer_request_put[203] == 1'd1 ;
  assign MUX_bramMuxReg_responseFifo_rv_port1__write_1__VAL_1 =
	     { 1'd1, fromPcieTraceBram_cbram_responseFifo_0_D_OUT } ;
  assign MUX_bramMuxReg_responseFifo_rv_port1__write_1__VAL_2 =
	     { 1'd1, toPcieTraceBram_cbram_responseFifo_0_D_OUT } ;
  assign MUX_fromPcieTraceBram_cbram_bram_a_put_3__VAL_2 =
	     { fromttd_timestamp__h8565,
	       fromttd_source__h8566,
	       fromPcie_whas && fromPcie_whas &&
	       tlpBusResponseFifo_D_OUT[152],
	       fromPcie_whas && fromPcie_whas &&
	       tlpBusResponseFifo_D_OUT[151],
	       fromPcie_whas ?
		 (fromPcie_whas ? tlpBusResponseFifo_D_OUT[150:0] : 151'd0) :
		 151'd0 } ;
  assign MUX_tlpTraceBramWrAddrReg_write_1__VAL_1 =
	     tlpTraceBramWrAddrReg + 11'd1 ;
  assign MUX_tlpTraceBramWrAddrReg_write_1__VAL_2 = v__h8457 + 11'd1 ;
  assign MUX_toPcieTraceBram_cbram_bram_a_put_3__VAL_1 =
	     { timestamp, trace_put[159:0] } ;
  assign MUX_toPcieTraceBram_cbram_bram_a_put_3__VAL_3 =
	     { tottd_timestamp__h8734,
	       tottd_source__h8735,
	       toPcie_whas && toPcie_whas && bus_request_put[152],
	       toPcie_whas && toPcie_whas && bus_request_put[151],
	       toPcie_whas ?
		 (toPcie_whas ? bus_request_put[150:0] : 151'd0) :
		 151'd0 } ;

  // inlined wires
  assign fromPcieTraceBram_cbram_data0_0_wget =
	     { 1'd1,
	       traceServer_bramServer_request_put[205],
	       traceServer_bramServer_request_put[191:0] } ;
  assign fromPcieTraceBram_cbram_data0_0_whas =
	     EN_traceServer_bramServer_request_put &&
	     (!traceServer_bramServer_request_put[205] ||
	      traceServer_bramServer_request_put[204]) &&
	     traceServer_bramServer_request_put[203] == 1'd0 ;
  assign toPcieTraceBram_cbram_data0_0_whas =
	     EN_traceServer_bramServer_request_put &&
	     (!traceServer_bramServer_request_put[205] ||
	      traceServer_bramServer_request_put[204]) &&
	     traceServer_bramServer_request_put[203] == 1'd1 ;
  assign fromPcie_whas =
	     EN_bus_response_get && tlpTracingReg &&
	     (!tlpBusResponseFifo_D_OUT[152] ||
	      !isRootBroadcastMessage_D_OUT) &&
	     (!skippingIncomingTlps || tlpBusResponseFifo_D_OUT[152]) ;
  assign toPcie_whas = EN_bus_request_put && tlpTracingReg ;
  assign bramMuxReg_responseFifo_rv_port1__read =
	     EN_traceServer_bramServer_response_get ?
	       193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       bramMuxReg_responseFifo_rv ;
  assign bramMuxReg_responseFifo_rv_EN_port1__write =
	     WILL_FIRE_RL_bramMuxReg_respond ||
	     WILL_FIRE_RL_bramMuxReg_respond_1 ;
  assign bramMuxReg_responseFifo_rv_port1__write_1 =
	     WILL_FIRE_RL_bramMuxReg_respond ?
	       MUX_bramMuxReg_responseFifo_rv_port1__write_1__VAL_1 :
	       MUX_bramMuxReg_responseFifo_rv_port1__write_1__VAL_2 ;
  assign bramMuxReg_responseFifo_rv_port2__read =
	     bramMuxReg_responseFifo_rv_EN_port1__write ?
	       bramMuxReg_responseFifo_rv_port1__write_1 :
	       bramMuxReg_responseFifo_rv_port1__read ;

  // register bramMuxReg_responseFifo_rv
  assign bramMuxReg_responseFifo_rv_D_IN =
	     bramMuxReg_responseFifo_rv_port2__read ;
  assign bramMuxReg_responseFifo_rv_EN = 1'b1 ;

  // register fromPcieTraceBram_cbram_counter_0_cnt
  assign fromPcieTraceBram_cbram_counter_0_cnt_D_IN =
	     fromPcieTraceBram_cbram_counter_0_cnt_PLUS_IF__ETC___d9 ;
  assign fromPcieTraceBram_cbram_counter_0_cnt_EN = 1'd1 ;

  // register fromPcieTraceBram_cbram_counter_0_positive_reg
  assign fromPcieTraceBram_cbram_counter_0_positive_reg_D_IN =
	     fromPcieTraceBram_cbram_counter_0_cnt_PLUS_IF__ETC___d9 != 2'd0 ;
  assign fromPcieTraceBram_cbram_counter_0_positive_reg_EN = 1'd1 ;

  // register fromPcieTraceBram_cbram_counter_1_cnt
  assign fromPcieTraceBram_cbram_counter_1_cnt_D_IN =
	     fromPcieTraceBram_cbram_counter_1_cnt + 2'd0 - 2'd0 ;
  assign fromPcieTraceBram_cbram_counter_1_cnt_EN = 1'd1 ;

  // register fromPcieTraceBram_cbram_counter_1_positive_reg
  assign fromPcieTraceBram_cbram_counter_1_positive_reg_D_IN =
	     fromPcieTraceBram_cbram_counter_1_cnt + 2'd0 - 2'd0 != 2'd0 ;
  assign fromPcieTraceBram_cbram_counter_1_positive_reg_EN = 1'd1 ;

  // register fromPcieTraceBram_cbram_cycles
  assign fromPcieTraceBram_cbram_cycles_D_IN = 32'h0 ;
  assign fromPcieTraceBram_cbram_cycles_EN = 1'b0 ;

  // register fromPcieTraceBram_cbram_data1_0
  assign fromPcieTraceBram_cbram_data1_0_D_IN =
	     { fromPcieTraceBram_cbram_data0_0_whas &&
	       fromPcieTraceBram_cbram_data0_0_wget[193],
	       fromPcieTraceBram_cbram_data0_0_wget[192:0] } ;
  assign fromPcieTraceBram_cbram_data1_0_EN = 1'b1 ;

  // register fromPcieTraceBram_cbram_data1_1
  assign fromPcieTraceBram_cbram_data1_1_D_IN = 194'b0 ;
  assign fromPcieTraceBram_cbram_data1_1_EN = 1'b1 ;

  // register fromPcieTraceBram_cbram_data2_0
  assign fromPcieTraceBram_cbram_data2_0_D_IN =
	     fromPcieTraceBram_cbram_data1_0 ;
  assign fromPcieTraceBram_cbram_data2_0_EN = 1'b1 ;

  // register fromPcieTraceBram_cbram_data2_1
  assign fromPcieTraceBram_cbram_data2_1_D_IN =
	     fromPcieTraceBram_cbram_data1_1 ;
  assign fromPcieTraceBram_cbram_data2_1_EN = 1'b1 ;

  // register skippingIncomingTlps
  assign skippingIncomingTlps_D_IN =
	     tlpBusResponseFifo_D_OUT[152] && isRootBroadcastMessage_D_OUT ;
  assign skippingIncomingTlps_EN =
	     EN_bus_response_get && tlpTracingReg &&
	     (!skippingIncomingTlps || tlpBusResponseFifo_D_OUT[152]) ;

  // register timestamp
  assign timestamp_D_IN = timestamp + 32'd1 ;
  assign timestamp_EN = 1'd1 ;

  // register tlpTraceBramWrAddrReg
  assign tlpTraceBramWrAddrReg_D_IN =
	     MUX_tlpTraceBramWrAddrReg_write_1__SEL_1 ?
	       MUX_tlpTraceBramWrAddrReg_write_1__VAL_1 :
	       MUX_tlpTraceBramWrAddrReg_write_1__VAL_2 ;
  assign tlpTraceBramWrAddrReg_EN =
	     EN_trace_put && tlpTracingReg || WILL_FIRE_RL_doTracing ;

  // register tlpTraceLimitReg
  assign tlpTraceLimitReg_D_IN = traceServer_tlpTraceLimit__write_1 ;
  assign tlpTraceLimitReg_EN = EN_traceServer_tlpTraceLimit__write ;

  // register tlpTracingReg
  assign tlpTracingReg_D_IN = traceServer_tlpTracing__write_1 ;
  assign tlpTracingReg_EN = EN_traceServer_tlpTracing__write ;

  // register toPcieTraceBram_cbram_counter_0_cnt
  assign toPcieTraceBram_cbram_counter_0_cnt_D_IN =
	     toPcieTraceBram_cbram_counter_0_cnt_5_PLUS_IF__ETC___d73 ;
  assign toPcieTraceBram_cbram_counter_0_cnt_EN = 1'd1 ;

  // register toPcieTraceBram_cbram_counter_0_positive_reg
  assign toPcieTraceBram_cbram_counter_0_positive_reg_D_IN =
	     toPcieTraceBram_cbram_counter_0_cnt_5_PLUS_IF__ETC___d73 !=
	     2'd0 ;
  assign toPcieTraceBram_cbram_counter_0_positive_reg_EN = 1'd1 ;

  // register toPcieTraceBram_cbram_counter_1_cnt
  assign toPcieTraceBram_cbram_counter_1_cnt_D_IN =
	     toPcieTraceBram_cbram_counter_1_cnt + 2'd0 - 2'd0 ;
  assign toPcieTraceBram_cbram_counter_1_cnt_EN = 1'd1 ;

  // register toPcieTraceBram_cbram_counter_1_positive_reg
  assign toPcieTraceBram_cbram_counter_1_positive_reg_D_IN =
	     toPcieTraceBram_cbram_counter_1_cnt + 2'd0 - 2'd0 != 2'd0 ;
  assign toPcieTraceBram_cbram_counter_1_positive_reg_EN = 1'd1 ;

  // register toPcieTraceBram_cbram_cycles
  assign toPcieTraceBram_cbram_cycles_D_IN = 32'h0 ;
  assign toPcieTraceBram_cbram_cycles_EN = 1'b0 ;

  // register toPcieTraceBram_cbram_data1_0
  assign toPcieTraceBram_cbram_data1_0_D_IN =
	     { toPcieTraceBram_cbram_data0_0_whas &&
	       fromPcieTraceBram_cbram_data0_0_wget[193],
	       fromPcieTraceBram_cbram_data0_0_wget[192:0] } ;
  assign toPcieTraceBram_cbram_data1_0_EN = 1'b1 ;

  // register toPcieTraceBram_cbram_data1_1
  assign toPcieTraceBram_cbram_data1_1_D_IN = 194'b0 ;
  assign toPcieTraceBram_cbram_data1_1_EN = 1'b1 ;

  // register toPcieTraceBram_cbram_data2_0
  assign toPcieTraceBram_cbram_data2_0_D_IN = toPcieTraceBram_cbram_data1_0 ;
  assign toPcieTraceBram_cbram_data2_0_EN = 1'b1 ;

  // register toPcieTraceBram_cbram_data2_1
  assign toPcieTraceBram_cbram_data2_1_D_IN = toPcieTraceBram_cbram_data1_1 ;
  assign toPcieTraceBram_cbram_data2_1_EN = 1'b1 ;

  // submodule fromPcieTraceBram_cbram_bram
  assign fromPcieTraceBram_cbram_bram_ADDRA =
	     MUX_fromPcieTraceBram_cbram_bram_a_put_1__SEL_1 ?
	       traceServer_bramServer_request_put[202:192] :
	       v__h8457 ;
  assign fromPcieTraceBram_cbram_bram_ADDRB = 11'h0 ;
  assign fromPcieTraceBram_cbram_bram_DIA =
	     MUX_fromPcieTraceBram_cbram_bram_a_put_1__SEL_1 ?
	       traceServer_bramServer_request_put[191:0] :
	       MUX_fromPcieTraceBram_cbram_bram_a_put_3__VAL_2 ;
  assign fromPcieTraceBram_cbram_bram_DIB = 192'h0 ;
  assign fromPcieTraceBram_cbram_bram_WEA =
	     !MUX_fromPcieTraceBram_cbram_bram_a_put_1__SEL_1 ||
	     traceServer_bramServer_request_put[205] ;
  assign fromPcieTraceBram_cbram_bram_WEB = 1'b0 ;
  assign fromPcieTraceBram_cbram_bram_ENA =
	     EN_traceServer_bramServer_request_put &&
	     traceServer_bramServer_request_put[203] == 1'd0 ||
	     WILL_FIRE_RL_doTracing ;
  assign fromPcieTraceBram_cbram_bram_ENB = 1'b0 ;

  // submodule fromPcieTraceBram_cbram_responseFifo_0
  assign fromPcieTraceBram_cbram_responseFifo_0_D_IN =
	     fromPcieTraceBram_cbram_data2_0[192] ?
	       fromPcieTraceBram_cbram_data2_0[191:0] :
	       fromPcieTraceBram_cbram_bram_DOA ;
  assign fromPcieTraceBram_cbram_responseFifo_0_ENQ =
	     fromPcieTraceBram_cbram_data2_0[193] &&
	     fromPcieTraceBram_cbram_responseFifo_0_FULL_N ;
  assign fromPcieTraceBram_cbram_responseFifo_0_DEQ =
	     WILL_FIRE_RL_bramMuxReg_respond ;
  assign fromPcieTraceBram_cbram_responseFifo_0_CLR = 1'b0 ;

  // submodule fromPcieTraceBram_cbram_responseFifo_1
  assign fromPcieTraceBram_cbram_responseFifo_1_D_IN =
	     fromPcieTraceBram_cbram_data2_1[192] ?
	       fromPcieTraceBram_cbram_data2_1[191:0] :
	       fromPcieTraceBram_cbram_bram_DOB ;
  assign fromPcieTraceBram_cbram_responseFifo_1_ENQ =
	     fromPcieTraceBram_cbram_data2_1[193] &&
	     fromPcieTraceBram_cbram_responseFifo_1_FULL_N ;
  assign fromPcieTraceBram_cbram_responseFifo_1_DEQ = 1'b0 ;
  assign fromPcieTraceBram_cbram_responseFifo_1_CLR = 1'b0 ;

  // submodule isRootBroadcastMessage
  assign isRootBroadcastMessage_D_IN =
	     tlpFromBusFifo_D_OUT[152] &&
	     tlpFromBusFifo_D_OUT[150:144] == 7'd0 &&
	     tlpFromBusFifo_D_OUT[124:120] != 5'd10 ;
  assign isRootBroadcastMessage_ENQ =
	     tlpFromBusFifo_EMPTY_N && tlpBusResponseFifo_FULL_N &&
	     isRootBroadcastMessage_FULL_N ;
  assign isRootBroadcastMessage_DEQ = EN_bus_response_get ;
  assign isRootBroadcastMessage_CLR = 1'b0 ;

  // submodule tlpBusResponseFifo
  assign tlpBusResponseFifo_D_IN = tlpFromBusFifo_D_OUT ;
  assign tlpBusResponseFifo_ENQ =
	     tlpFromBusFifo_EMPTY_N && tlpBusResponseFifo_FULL_N &&
	     isRootBroadcastMessage_FULL_N ;
  assign tlpBusResponseFifo_DEQ = EN_bus_response_get ;
  assign tlpBusResponseFifo_CLR = 1'b0 ;

  // submodule tlpFromBusFifo
  assign tlpFromBusFifo_D_IN = pci_response_put ;
  assign tlpFromBusFifo_ENQ = EN_pci_response_put ;
  assign tlpFromBusFifo_DEQ =
	     tlpFromBusFifo_EMPTY_N && tlpBusResponseFifo_FULL_N &&
	     isRootBroadcastMessage_FULL_N ;
  assign tlpFromBusFifo_CLR = 1'b0 ;

  // submodule tlpToBusFifo
  assign tlpToBusFifo_D_IN = bus_request_put ;
  assign tlpToBusFifo_ENQ = EN_bus_request_put ;
  assign tlpToBusFifo_DEQ = EN_pci_request_get ;
  assign tlpToBusFifo_CLR = 1'b0 ;

  // submodule tlpTraceBramWrAddrFifo
  assign tlpTraceBramWrAddrFifo_D_IN =
	     traceServer_tlpTraceBramWrAddr__write_1 ;
  assign tlpTraceBramWrAddrFifo_ENQ =
	     EN_traceServer_tlpTraceBramWrAddr__write ;
  assign tlpTraceBramWrAddrFifo_DEQ =
	     WILL_FIRE_RL_doTracing && tlpTraceBramWrAddrFifo_EMPTY_N ;
  assign tlpTraceBramWrAddrFifo_CLR = 1'b0 ;

  // submodule toPcieTraceBram_cbram_bram
  always@(MUX_tlpTraceBramWrAddrReg_write_1__SEL_1 or
	  tlpTraceBramWrAddrReg or
	  MUX_toPcieTraceBram_cbram_bram_a_put_1__SEL_2 or
	  traceServer_bramServer_request_put or
	  WILL_FIRE_RL_doTracing or v__h8457)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlpTraceBramWrAddrReg_write_1__SEL_1:
	  toPcieTraceBram_cbram_bram_ADDRA = tlpTraceBramWrAddrReg;
      MUX_toPcieTraceBram_cbram_bram_a_put_1__SEL_2:
	  toPcieTraceBram_cbram_bram_ADDRA =
	      traceServer_bramServer_request_put[202:192];
      WILL_FIRE_RL_doTracing: toPcieTraceBram_cbram_bram_ADDRA = v__h8457;
      default: toPcieTraceBram_cbram_bram_ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign toPcieTraceBram_cbram_bram_ADDRB = 11'h0 ;
  always@(MUX_tlpTraceBramWrAddrReg_write_1__SEL_1 or
	  MUX_toPcieTraceBram_cbram_bram_a_put_3__VAL_1 or
	  MUX_toPcieTraceBram_cbram_bram_a_put_1__SEL_2 or
	  traceServer_bramServer_request_put or
	  WILL_FIRE_RL_doTracing or
	  MUX_toPcieTraceBram_cbram_bram_a_put_3__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlpTraceBramWrAddrReg_write_1__SEL_1:
	  toPcieTraceBram_cbram_bram_DIA =
	      MUX_toPcieTraceBram_cbram_bram_a_put_3__VAL_1;
      MUX_toPcieTraceBram_cbram_bram_a_put_1__SEL_2:
	  toPcieTraceBram_cbram_bram_DIA =
	      traceServer_bramServer_request_put[191:0];
      WILL_FIRE_RL_doTracing:
	  toPcieTraceBram_cbram_bram_DIA =
	      MUX_toPcieTraceBram_cbram_bram_a_put_3__VAL_3;
      default: toPcieTraceBram_cbram_bram_DIA =
		   192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign toPcieTraceBram_cbram_bram_DIB = 192'h0 ;
  assign toPcieTraceBram_cbram_bram_WEA =
	     !MUX_toPcieTraceBram_cbram_bram_a_put_1__SEL_2 ||
	     traceServer_bramServer_request_put[205] ;
  assign toPcieTraceBram_cbram_bram_WEB = 1'b0 ;
  assign toPcieTraceBram_cbram_bram_ENA =
	     EN_trace_put && tlpTracingReg ||
	     EN_traceServer_bramServer_request_put &&
	     traceServer_bramServer_request_put[203] == 1'd1 ||
	     WILL_FIRE_RL_doTracing ;
  assign toPcieTraceBram_cbram_bram_ENB = 1'b0 ;

  // submodule toPcieTraceBram_cbram_responseFifo_0
  assign toPcieTraceBram_cbram_responseFifo_0_D_IN =
	     toPcieTraceBram_cbram_data2_0[192] ?
	       toPcieTraceBram_cbram_data2_0[191:0] :
	       toPcieTraceBram_cbram_bram_DOA ;
  assign toPcieTraceBram_cbram_responseFifo_0_ENQ =
	     toPcieTraceBram_cbram_data2_0[193] &&
	     toPcieTraceBram_cbram_responseFifo_0_FULL_N ;
  assign toPcieTraceBram_cbram_responseFifo_0_DEQ =
	     WILL_FIRE_RL_bramMuxReg_respond_1 ;
  assign toPcieTraceBram_cbram_responseFifo_0_CLR = 1'b0 ;

  // submodule toPcieTraceBram_cbram_responseFifo_1
  assign toPcieTraceBram_cbram_responseFifo_1_D_IN =
	     toPcieTraceBram_cbram_data2_1[192] ?
	       toPcieTraceBram_cbram_data2_1[191:0] :
	       toPcieTraceBram_cbram_bram_DOB ;
  assign toPcieTraceBram_cbram_responseFifo_1_ENQ =
	     toPcieTraceBram_cbram_data2_1[193] &&
	     toPcieTraceBram_cbram_responseFifo_1_FULL_N ;
  assign toPcieTraceBram_cbram_responseFifo_1_DEQ = 1'b0 ;
  assign toPcieTraceBram_cbram_responseFifo_1_CLR = 1'b0 ;

  // remaining internal signals
  assign fromPcieTraceBram_cbram_counter_0_cnt_PLUS_IF__ETC___d9 =
	     fromPcieTraceBram_cbram_counter_0_cnt +
	     (WILL_FIRE_RL_bramMuxReg_respond ? 2'd1 : 2'd0) -
	     (fromPcieTraceBram_cbram_data0_0_whas ? 2'd1 : 2'd0) ;
  assign fromttd_source__h8566 = fromPcie_whas ? 7'h04 : 7'd0 ;
  assign fromttd_timestamp__h8565 = fromPcie_whas ? timestamp : 32'd0 ;
  assign toPcieTraceBram_cbram_counter_0_cnt_5_PLUS_IF__ETC___d73 =
	     toPcieTraceBram_cbram_counter_0_cnt +
	     (WILL_FIRE_RL_bramMuxReg_respond_1 ? 2'd1 : 2'd0) -
	     (toPcieTraceBram_cbram_data0_0_whas ? 2'd1 : 2'd0) ;
  assign tottd_source__h8735 = toPcie_whas ? 7'h08 : 7'd0 ;
  assign tottd_timestamp__h8734 = toPcie_whas ? timestamp : 32'd0 ;
  assign v__h8457 =
	     tlpTraceBramWrAddrFifo_EMPTY_N ?
	       tlpTraceBramWrAddrFifo_D_OUT :
	       tlpTraceBramWrAddrReg ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bramMuxReg_responseFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	fromPcieTraceBram_cbram_counter_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd2;
	fromPcieTraceBram_cbram_counter_0_positive_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fromPcieTraceBram_cbram_counter_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd2;
	fromPcieTraceBram_cbram_counter_1_positive_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fromPcieTraceBram_cbram_cycles <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fromPcieTraceBram_cbram_data1_0 <= `BSV_ASSIGNMENT_DELAY
	    194'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	fromPcieTraceBram_cbram_data1_1 <= `BSV_ASSIGNMENT_DELAY
	    194'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	fromPcieTraceBram_cbram_data2_0 <= `BSV_ASSIGNMENT_DELAY
	    194'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	fromPcieTraceBram_cbram_data2_1 <= `BSV_ASSIGNMENT_DELAY
	    194'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	skippingIncomingTlps <= `BSV_ASSIGNMENT_DELAY 1'd0;
	timestamp <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tlpTraceBramWrAddrReg <= `BSV_ASSIGNMENT_DELAY 11'd0;
	tlpTraceLimitReg <= `BSV_ASSIGNMENT_DELAY 11'd0;
	tlpTracingReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	toPcieTraceBram_cbram_counter_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd2;
	toPcieTraceBram_cbram_counter_0_positive_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	toPcieTraceBram_cbram_counter_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd2;
	toPcieTraceBram_cbram_counter_1_positive_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	toPcieTraceBram_cbram_cycles <= `BSV_ASSIGNMENT_DELAY 32'd0;
	toPcieTraceBram_cbram_data1_0 <= `BSV_ASSIGNMENT_DELAY
	    194'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	toPcieTraceBram_cbram_data1_1 <= `BSV_ASSIGNMENT_DELAY
	    194'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	toPcieTraceBram_cbram_data2_0 <= `BSV_ASSIGNMENT_DELAY
	    194'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	toPcieTraceBram_cbram_data2_1 <= `BSV_ASSIGNMENT_DELAY
	    194'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (bramMuxReg_responseFifo_rv_EN)
	  bramMuxReg_responseFifo_rv <= `BSV_ASSIGNMENT_DELAY
	      bramMuxReg_responseFifo_rv_D_IN;
	if (fromPcieTraceBram_cbram_counter_0_cnt_EN)
	  fromPcieTraceBram_cbram_counter_0_cnt <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_cbram_counter_0_cnt_D_IN;
	if (fromPcieTraceBram_cbram_counter_0_positive_reg_EN)
	  fromPcieTraceBram_cbram_counter_0_positive_reg <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_cbram_counter_0_positive_reg_D_IN;
	if (fromPcieTraceBram_cbram_counter_1_cnt_EN)
	  fromPcieTraceBram_cbram_counter_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_cbram_counter_1_cnt_D_IN;
	if (fromPcieTraceBram_cbram_counter_1_positive_reg_EN)
	  fromPcieTraceBram_cbram_counter_1_positive_reg <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_cbram_counter_1_positive_reg_D_IN;
	if (fromPcieTraceBram_cbram_cycles_EN)
	  fromPcieTraceBram_cbram_cycles <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_cbram_cycles_D_IN;
	if (fromPcieTraceBram_cbram_data1_0_EN)
	  fromPcieTraceBram_cbram_data1_0 <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_cbram_data1_0_D_IN;
	if (fromPcieTraceBram_cbram_data1_1_EN)
	  fromPcieTraceBram_cbram_data1_1 <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_cbram_data1_1_D_IN;
	if (fromPcieTraceBram_cbram_data2_0_EN)
	  fromPcieTraceBram_cbram_data2_0 <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_cbram_data2_0_D_IN;
	if (fromPcieTraceBram_cbram_data2_1_EN)
	  fromPcieTraceBram_cbram_data2_1 <= `BSV_ASSIGNMENT_DELAY
	      fromPcieTraceBram_cbram_data2_1_D_IN;
	if (skippingIncomingTlps_EN)
	  skippingIncomingTlps <= `BSV_ASSIGNMENT_DELAY
	      skippingIncomingTlps_D_IN;
	if (timestamp_EN) timestamp <= `BSV_ASSIGNMENT_DELAY timestamp_D_IN;
	if (tlpTraceBramWrAddrReg_EN)
	  tlpTraceBramWrAddrReg <= `BSV_ASSIGNMENT_DELAY
	      tlpTraceBramWrAddrReg_D_IN;
	if (tlpTraceLimitReg_EN)
	  tlpTraceLimitReg <= `BSV_ASSIGNMENT_DELAY tlpTraceLimitReg_D_IN;
	if (tlpTracingReg_EN)
	  tlpTracingReg <= `BSV_ASSIGNMENT_DELAY tlpTracingReg_D_IN;
	if (toPcieTraceBram_cbram_counter_0_cnt_EN)
	  toPcieTraceBram_cbram_counter_0_cnt <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_cbram_counter_0_cnt_D_IN;
	if (toPcieTraceBram_cbram_counter_0_positive_reg_EN)
	  toPcieTraceBram_cbram_counter_0_positive_reg <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_cbram_counter_0_positive_reg_D_IN;
	if (toPcieTraceBram_cbram_counter_1_cnt_EN)
	  toPcieTraceBram_cbram_counter_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_cbram_counter_1_cnt_D_IN;
	if (toPcieTraceBram_cbram_counter_1_positive_reg_EN)
	  toPcieTraceBram_cbram_counter_1_positive_reg <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_cbram_counter_1_positive_reg_D_IN;
	if (toPcieTraceBram_cbram_cycles_EN)
	  toPcieTraceBram_cbram_cycles <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_cbram_cycles_D_IN;
	if (toPcieTraceBram_cbram_data1_0_EN)
	  toPcieTraceBram_cbram_data1_0 <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_cbram_data1_0_D_IN;
	if (toPcieTraceBram_cbram_data1_1_EN)
	  toPcieTraceBram_cbram_data1_1 <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_cbram_data1_1_D_IN;
	if (toPcieTraceBram_cbram_data2_0_EN)
	  toPcieTraceBram_cbram_data2_0 <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_cbram_data2_0_D_IN;
	if (toPcieTraceBram_cbram_data2_1_EN)
	  toPcieTraceBram_cbram_data2_1 <= `BSV_ASSIGNMENT_DELAY
	      toPcieTraceBram_cbram_data2_1_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bramMuxReg_responseFifo_rv =
	193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fromPcieTraceBram_cbram_counter_0_cnt = 2'h2;
    fromPcieTraceBram_cbram_counter_0_positive_reg = 1'h0;
    fromPcieTraceBram_cbram_counter_1_cnt = 2'h2;
    fromPcieTraceBram_cbram_counter_1_positive_reg = 1'h0;
    fromPcieTraceBram_cbram_cycles = 32'hAAAAAAAA;
    fromPcieTraceBram_cbram_data1_0 =
	194'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fromPcieTraceBram_cbram_data1_1 =
	194'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fromPcieTraceBram_cbram_data2_0 =
	194'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fromPcieTraceBram_cbram_data2_1 =
	194'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    skippingIncomingTlps = 1'h0;
    timestamp = 32'hAAAAAAAA;
    tlpTraceBramWrAddrReg = 11'h2AA;
    tlpTraceLimitReg = 11'h2AA;
    tlpTracingReg = 1'h0;
    toPcieTraceBram_cbram_counter_0_cnt = 2'h2;
    toPcieTraceBram_cbram_counter_0_positive_reg = 1'h0;
    toPcieTraceBram_cbram_counter_1_cnt = 2'h2;
    toPcieTraceBram_cbram_counter_1_positive_reg = 1'h0;
    toPcieTraceBram_cbram_cycles = 32'hAAAAAAAA;
    toPcieTraceBram_cbram_data1_0 =
	194'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    toPcieTraceBram_cbram_data1_1 =
	194'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    toPcieTraceBram_cbram_data2_0 =
	194'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    toPcieTraceBram_cbram_data2_1 =
	194'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (fromPcieTraceBram_cbram_data2_0[193] &&
	  !fromPcieTraceBram_cbram_responseFifo_0_FULL_N)
	$display("Error: responseFifo is unexpectedly full");
    if (RST_N != `BSV_RESET_VALUE)
      if (fromPcieTraceBram_cbram_data2_1[193] &&
	  !fromPcieTraceBram_cbram_responseFifo_1_FULL_N)
	$display("Error: responseFifo is unexpectedly full");
    if (RST_N != `BSV_RESET_VALUE)
      if (toPcieTraceBram_cbram_data2_0[193] &&
	  !toPcieTraceBram_cbram_responseFifo_0_FULL_N)
	$display("Error: responseFifo is unexpectedly full");
    if (RST_N != `BSV_RESET_VALUE)
      if (toPcieTraceBram_cbram_data2_1[193] &&
	  !toPcieTraceBram_cbram_responseFifo_1_FULL_N)
	$display("Error: responseFifo is unexpectedly full");
  end
  // synopsys translate_on
endmodule  // mkPcieTracer

