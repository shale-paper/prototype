//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule request_sglist  CF ( request_region,
// 			      request_idRequest,
// 			      request_idReturn,
// 			      request_setInterface,
// 			      idResponsePipe_first,
// 			      idResponsePipe_deq,
// 			      idResponsePipe_notEmpty,
// 			      configResponsePipe_first,
// 			      configResponsePipe_deq,
// 			      configResponsePipe_notEmpty,
// 			      errorPipe_first,
// 			      errorPipe_deq,
// 			      errorPipe_notEmpty,
// 			      addr_0_request_put,
// 			      addr_0_response_get,
// 			      addr_1_request_put,
// 			      addr_1_response_get );
// schedule request_sglist  C ( request_sglist );
//
// schedule request_region  CF ( request_sglist,
// 			      request_idRequest,
// 			      request_idReturn,
// 			      request_setInterface,
// 			      idResponsePipe_first,
// 			      idResponsePipe_deq,
// 			      idResponsePipe_notEmpty,
// 			      configResponsePipe_first,
// 			      configResponsePipe_deq,
// 			      errorPipe_first,
// 			      errorPipe_deq,
// 			      errorPipe_notEmpty,
// 			      addr_0_request_put,
// 			      addr_0_response_get,
// 			      addr_1_request_put,
// 			      addr_1_response_get );
// schedule request_region  C ( request_region );
//
// schedule request_idRequest  CF ( request_sglist,
// 				 request_region,
// 				 request_idReturn,
// 				 request_setInterface,
// 				 idResponsePipe_first,
// 				 idResponsePipe_deq,
// 				 configResponsePipe_first,
// 				 configResponsePipe_deq,
// 				 configResponsePipe_notEmpty,
// 				 errorPipe_first,
// 				 errorPipe_deq,
// 				 errorPipe_notEmpty,
// 				 addr_0_request_put,
// 				 addr_0_response_get,
// 				 addr_1_request_put,
// 				 addr_1_response_get );
// schedule request_idRequest  C ( request_idRequest );
//
// schedule request_idReturn  CF ( request_sglist,
// 				request_region,
// 				request_idRequest,
// 				request_setInterface,
// 				idResponsePipe_first,
// 				idResponsePipe_deq,
// 				idResponsePipe_notEmpty,
// 				configResponsePipe_first,
// 				configResponsePipe_deq,
// 				configResponsePipe_notEmpty,
// 				errorPipe_first,
// 				errorPipe_deq,
// 				errorPipe_notEmpty,
// 				addr_0_request_put,
// 				addr_0_response_get,
// 				addr_1_request_put,
// 				addr_1_response_get );
// schedule request_idReturn  C ( request_idReturn );
//
// schedule request_setInterface  CF ( request_sglist,
// 				    request_region,
// 				    request_idRequest,
// 				    request_idReturn,
// 				    request_setInterface,
// 				    idResponsePipe_first,
// 				    idResponsePipe_deq,
// 				    idResponsePipe_notEmpty,
// 				    configResponsePipe_first,
// 				    configResponsePipe_deq,
// 				    configResponsePipe_notEmpty,
// 				    errorPipe_first,
// 				    errorPipe_deq,
// 				    errorPipe_notEmpty,
// 				    addr_0_request_put,
// 				    addr_0_response_get,
// 				    addr_1_request_put,
// 				    addr_1_response_get );
//
// schedule idResponsePipe_first  CF ( request_sglist,
// 				    request_region,
// 				    request_idRequest,
// 				    request_idReturn,
// 				    request_setInterface,
// 				    idResponsePipe_first,
// 				    idResponsePipe_notEmpty,
// 				    configResponsePipe_first,
// 				    configResponsePipe_deq,
// 				    configResponsePipe_notEmpty,
// 				    errorPipe_first,
// 				    errorPipe_deq,
// 				    errorPipe_notEmpty,
// 				    addr_0_request_put,
// 				    addr_0_response_get,
// 				    addr_1_request_put,
// 				    addr_1_response_get );
// schedule idResponsePipe_first  SB ( idResponsePipe_deq );
//
// schedule idResponsePipe_deq  CF ( request_sglist,
// 				  request_region,
// 				  request_idRequest,
// 				  request_idReturn,
// 				  request_setInterface,
// 				  configResponsePipe_first,
// 				  configResponsePipe_deq,
// 				  configResponsePipe_notEmpty,
// 				  errorPipe_first,
// 				  errorPipe_deq,
// 				  errorPipe_notEmpty,
// 				  addr_0_request_put,
// 				  addr_0_response_get,
// 				  addr_1_request_put,
// 				  addr_1_response_get );
// schedule idResponsePipe_deq  C ( idResponsePipe_deq );
//
// schedule idResponsePipe_notEmpty  CF ( request_sglist,
// 				       request_region,
// 				       request_idReturn,
// 				       request_setInterface,
// 				       idResponsePipe_first,
// 				       idResponsePipe_notEmpty,
// 				       configResponsePipe_first,
// 				       configResponsePipe_deq,
// 				       configResponsePipe_notEmpty,
// 				       errorPipe_first,
// 				       errorPipe_deq,
// 				       errorPipe_notEmpty,
// 				       addr_0_request_put,
// 				       addr_0_response_get,
// 				       addr_1_request_put,
// 				       addr_1_response_get );
// schedule idResponsePipe_notEmpty  SB ( request_idRequest,
// 				       idResponsePipe_deq );
//
// schedule configResponsePipe_first  CF ( request_sglist,
// 					request_region,
// 					request_idRequest,
// 					request_idReturn,
// 					request_setInterface,
// 					idResponsePipe_first,
// 					idResponsePipe_deq,
// 					idResponsePipe_notEmpty,
// 					configResponsePipe_first,
// 					configResponsePipe_notEmpty,
// 					errorPipe_first,
// 					errorPipe_deq,
// 					errorPipe_notEmpty,
// 					addr_0_request_put,
// 					addr_0_response_get,
// 					addr_1_request_put,
// 					addr_1_response_get );
// schedule configResponsePipe_first  SB ( configResponsePipe_deq );
//
// schedule configResponsePipe_deq  CF ( request_sglist,
// 				      request_region,
// 				      request_idRequest,
// 				      request_idReturn,
// 				      request_setInterface,
// 				      idResponsePipe_first,
// 				      idResponsePipe_deq,
// 				      idResponsePipe_notEmpty,
// 				      errorPipe_first,
// 				      errorPipe_deq,
// 				      errorPipe_notEmpty,
// 				      addr_0_request_put,
// 				      addr_0_response_get,
// 				      addr_1_request_put,
// 				      addr_1_response_get );
// schedule configResponsePipe_deq  C ( configResponsePipe_deq );
//
// schedule configResponsePipe_notEmpty  CF ( request_sglist,
// 					   request_idRequest,
// 					   request_idReturn,
// 					   request_setInterface,
// 					   idResponsePipe_first,
// 					   idResponsePipe_deq,
// 					   idResponsePipe_notEmpty,
// 					   configResponsePipe_first,
// 					   configResponsePipe_notEmpty,
// 					   errorPipe_first,
// 					   errorPipe_deq,
// 					   errorPipe_notEmpty,
// 					   addr_0_request_put,
// 					   addr_0_response_get,
// 					   addr_1_request_put,
// 					   addr_1_response_get );
// schedule configResponsePipe_notEmpty  SB ( request_region,
// 					   configResponsePipe_deq );
//
// schedule errorPipe_first  CF ( request_sglist,
// 			       request_region,
// 			       request_idRequest,
// 			       request_idReturn,
// 			       request_setInterface,
// 			       idResponsePipe_first,
// 			       idResponsePipe_deq,
// 			       idResponsePipe_notEmpty,
// 			       configResponsePipe_first,
// 			       configResponsePipe_deq,
// 			       configResponsePipe_notEmpty,
// 			       errorPipe_first,
// 			       errorPipe_notEmpty,
// 			       addr_0_request_put,
// 			       addr_0_response_get,
// 			       addr_1_request_put,
// 			       addr_1_response_get );
// schedule errorPipe_first  SB ( errorPipe_deq );
//
// schedule errorPipe_deq  CF ( request_sglist,
// 			     request_region,
// 			     request_idRequest,
// 			     request_idReturn,
// 			     request_setInterface,
// 			     idResponsePipe_first,
// 			     idResponsePipe_deq,
// 			     idResponsePipe_notEmpty,
// 			     configResponsePipe_first,
// 			     configResponsePipe_deq,
// 			     configResponsePipe_notEmpty,
// 			     addr_0_request_put,
// 			     addr_0_response_get,
// 			     addr_1_request_put,
// 			     addr_1_response_get );
// schedule errorPipe_deq  C ( errorPipe_deq );
//
// schedule errorPipe_notEmpty  CF ( request_sglist,
// 				  request_region,
// 				  request_idRequest,
// 				  request_idReturn,
// 				  request_setInterface,
// 				  idResponsePipe_first,
// 				  idResponsePipe_deq,
// 				  idResponsePipe_notEmpty,
// 				  configResponsePipe_first,
// 				  configResponsePipe_deq,
// 				  configResponsePipe_notEmpty,
// 				  errorPipe_first,
// 				  errorPipe_notEmpty,
// 				  addr_0_request_put,
// 				  addr_0_response_get,
// 				  addr_1_request_put,
// 				  addr_1_response_get );
// schedule errorPipe_notEmpty  SB ( errorPipe_deq );
//
// schedule addr_0_request_put  CF ( request_sglist,
// 				  request_region,
// 				  request_idRequest,
// 				  request_idReturn,
// 				  request_setInterface,
// 				  idResponsePipe_first,
// 				  idResponsePipe_deq,
// 				  idResponsePipe_notEmpty,
// 				  configResponsePipe_first,
// 				  configResponsePipe_deq,
// 				  configResponsePipe_notEmpty,
// 				  errorPipe_first,
// 				  errorPipe_deq,
// 				  errorPipe_notEmpty,
// 				  addr_0_response_get,
// 				  addr_1_request_put,
// 				  addr_1_response_get );
// schedule addr_0_request_put  C ( addr_0_request_put );
//
// schedule addr_0_response_get  CF ( request_sglist,
// 				   request_region,
// 				   request_idRequest,
// 				   request_idReturn,
// 				   request_setInterface,
// 				   idResponsePipe_first,
// 				   idResponsePipe_deq,
// 				   idResponsePipe_notEmpty,
// 				   configResponsePipe_first,
// 				   configResponsePipe_deq,
// 				   configResponsePipe_notEmpty,
// 				   errorPipe_first,
// 				   errorPipe_deq,
// 				   errorPipe_notEmpty,
// 				   addr_0_request_put,
// 				   addr_1_request_put,
// 				   addr_1_response_get );
// schedule addr_0_response_get  C ( addr_0_response_get );
//
// schedule addr_1_request_put  CF ( request_sglist,
// 				  request_region,
// 				  request_idRequest,
// 				  request_idReturn,
// 				  request_setInterface,
// 				  idResponsePipe_first,
// 				  idResponsePipe_deq,
// 				  idResponsePipe_notEmpty,
// 				  configResponsePipe_first,
// 				  configResponsePipe_deq,
// 				  configResponsePipe_notEmpty,
// 				  errorPipe_first,
// 				  errorPipe_deq,
// 				  errorPipe_notEmpty,
// 				  addr_0_request_put,
// 				  addr_0_response_get,
// 				  addr_1_response_get );
// schedule addr_1_request_put  C ( addr_1_request_put );
//
// schedule addr_1_response_get  CF ( request_sglist,
// 				   request_region,
// 				   request_idRequest,
// 				   request_idReturn,
// 				   request_setInterface,
// 				   idResponsePipe_first,
// 				   idResponsePipe_deq,
// 				   idResponsePipe_notEmpty,
// 				   configResponsePipe_first,
// 				   configResponsePipe_deq,
// 				   configResponsePipe_notEmpty,
// 				   errorPipe_first,
// 				   errorPipe_deq,
// 				   errorPipe_notEmpty,
// 				   addr_0_request_put,
// 				   addr_0_response_get,
// 				   addr_1_request_put );
// schedule addr_1_response_get  C ( addr_1_response_get );
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_sglist             O     1 reg
// RDY_request_region             O     1
// RDY_request_idRequest          O     1
// RDY_request_idReturn           O     1 reg
// RDY_request_setInterface       O     1 const
// idResponsePipe_first           O     5 reg
// RDY_idResponsePipe_first       O     1 reg
// RDY_idResponsePipe_deq         O     1 reg
// idResponsePipe_notEmpty        O     1 reg
// RDY_idResponsePipe_notEmpty    O     1 const
// configResponsePipe_first       O     5 reg
// RDY_configResponsePipe_first   O     1 reg
// RDY_configResponsePipe_deq     O     1 reg
// configResponsePipe_notEmpty    O     1 reg
// RDY_configResponsePipe_notEmpty  O     1 const
// errorPipe_first                O    75 reg
// RDY_errorPipe_first            O     1 reg
// RDY_errorPipe_deq              O     1 reg
// errorPipe_notEmpty             O     1 reg
// RDY_errorPipe_notEmpty         O     1 const
// RDY_addr_0_request_put         O     1 reg
// addr_0_response_get            O    43
// RDY_addr_0_response_get        O     1 reg
// RDY_addr_1_request_put         O     1 reg
// addr_1_response_get            O    43
// RDY_addr_1_response_get        O     1 reg
// mmuid                          I     4
// hostMapped                     I     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_sglist_sglId           I    32
// request_sglist_sglIndex        I    32
// request_sglist_addr            I    64
// request_sglist_len             I    32
// request_region_sglId           I    32
// request_region_barr12          I    64
// request_region_index12         I    32
// request_region_barr8           I    64
// request_region_index8          I    32
// request_region_barr4           I    64
// request_region_index4          I    32
// request_region_barr0           I    64
// request_region_index0          I    32
// request_idRequest_fd           I    32
// request_idReturn_sglId         I    32
// request_setInterface_interfaceId  I    32 unused
// request_setInterface_sglId     I    32 unused
// addr_0_request_put             I    45 reg
// addr_1_request_put             I    45 reg
// EN_request_sglist              I     1
// EN_request_region              I     1
// EN_request_idRequest           I     1
// EN_request_idReturn            I     1
// EN_request_setInterface        I     1 unused
// EN_idResponsePipe_deq          I     1
// EN_configResponsePipe_deq      I     1
// EN_errorPipe_deq               I     1
// EN_addr_0_request_put          I     1
// EN_addr_1_request_put          I     1
// EN_addr_0_response_get         I     1
// EN_addr_1_response_get         I     1
//
// Combinational paths from inputs to outputs:
//   mmuid -> addr_0_response_get
//   mmuid -> addr_1_response_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMUSynth(mmuid,
		  hostMapped,
		  CLK,
		  RST_N,

		  request_sglist_sglId,
		  request_sglist_sglIndex,
		  request_sglist_addr,
		  request_sglist_len,
		  EN_request_sglist,
		  RDY_request_sglist,

		  request_region_sglId,
		  request_region_barr12,
		  request_region_index12,
		  request_region_barr8,
		  request_region_index8,
		  request_region_barr4,
		  request_region_index4,
		  request_region_barr0,
		  request_region_index0,
		  EN_request_region,
		  RDY_request_region,

		  request_idRequest_fd,
		  EN_request_idRequest,
		  RDY_request_idRequest,

		  request_idReturn_sglId,
		  EN_request_idReturn,
		  RDY_request_idReturn,

		  request_setInterface_interfaceId,
		  request_setInterface_sglId,
		  EN_request_setInterface,
		  RDY_request_setInterface,

		  idResponsePipe_first,
		  RDY_idResponsePipe_first,

		  EN_idResponsePipe_deq,
		  RDY_idResponsePipe_deq,

		  idResponsePipe_notEmpty,
		  RDY_idResponsePipe_notEmpty,

		  configResponsePipe_first,
		  RDY_configResponsePipe_first,

		  EN_configResponsePipe_deq,
		  RDY_configResponsePipe_deq,

		  configResponsePipe_notEmpty,
		  RDY_configResponsePipe_notEmpty,

		  errorPipe_first,
		  RDY_errorPipe_first,

		  EN_errorPipe_deq,
		  RDY_errorPipe_deq,

		  errorPipe_notEmpty,
		  RDY_errorPipe_notEmpty,

		  addr_0_request_put,
		  EN_addr_0_request_put,
		  RDY_addr_0_request_put,

		  EN_addr_0_response_get,
		  addr_0_response_get,
		  RDY_addr_0_response_get,

		  addr_1_request_put,
		  EN_addr_1_request_put,
		  RDY_addr_1_request_put,

		  EN_addr_1_response_get,
		  addr_1_response_get,
		  RDY_addr_1_response_get);
  input  [3 : 0] mmuid;
  input  hostMapped;
  input  CLK;
  input  RST_N;

  // action method request_sglist
  input  [31 : 0] request_sglist_sglId;
  input  [31 : 0] request_sglist_sglIndex;
  input  [63 : 0] request_sglist_addr;
  input  [31 : 0] request_sglist_len;
  input  EN_request_sglist;
  output RDY_request_sglist;

  // action method request_region
  input  [31 : 0] request_region_sglId;
  input  [63 : 0] request_region_barr12;
  input  [31 : 0] request_region_index12;
  input  [63 : 0] request_region_barr8;
  input  [31 : 0] request_region_index8;
  input  [63 : 0] request_region_barr4;
  input  [31 : 0] request_region_index4;
  input  [63 : 0] request_region_barr0;
  input  [31 : 0] request_region_index0;
  input  EN_request_region;
  output RDY_request_region;

  // action method request_idRequest
  input  [31 : 0] request_idRequest_fd;
  input  EN_request_idRequest;
  output RDY_request_idRequest;

  // action method request_idReturn
  input  [31 : 0] request_idReturn_sglId;
  input  EN_request_idReturn;
  output RDY_request_idReturn;

  // action method request_setInterface
  input  [31 : 0] request_setInterface_interfaceId;
  input  [31 : 0] request_setInterface_sglId;
  input  EN_request_setInterface;
  output RDY_request_setInterface;

  // value method idResponsePipe_first
  output [4 : 0] idResponsePipe_first;
  output RDY_idResponsePipe_first;

  // action method idResponsePipe_deq
  input  EN_idResponsePipe_deq;
  output RDY_idResponsePipe_deq;

  // value method idResponsePipe_notEmpty
  output idResponsePipe_notEmpty;
  output RDY_idResponsePipe_notEmpty;

  // value method configResponsePipe_first
  output [4 : 0] configResponsePipe_first;
  output RDY_configResponsePipe_first;

  // action method configResponsePipe_deq
  input  EN_configResponsePipe_deq;
  output RDY_configResponsePipe_deq;

  // value method configResponsePipe_notEmpty
  output configResponsePipe_notEmpty;
  output RDY_configResponsePipe_notEmpty;

  // value method errorPipe_first
  output [74 : 0] errorPipe_first;
  output RDY_errorPipe_first;

  // action method errorPipe_deq
  input  EN_errorPipe_deq;
  output RDY_errorPipe_deq;

  // value method errorPipe_notEmpty
  output errorPipe_notEmpty;
  output RDY_errorPipe_notEmpty;

  // action method addr_0_request_put
  input  [44 : 0] addr_0_request_put;
  input  EN_addr_0_request_put;
  output RDY_addr_0_request_put;

  // actionvalue method addr_0_response_get
  input  EN_addr_0_response_get;
  output [42 : 0] addr_0_response_get;
  output RDY_addr_0_response_get;

  // action method addr_1_request_put
  input  [44 : 0] addr_1_request_put;
  input  EN_addr_1_request_put;
  output RDY_addr_1_request_put;

  // actionvalue method addr_1_response_get
  input  EN_addr_1_response_get;
  output [42 : 0] addr_1_response_get;
  output RDY_addr_1_response_get;

  // signals for module outputs
  wire [74 : 0] errorPipe_first;
  wire [42 : 0] addr_0_response_get, addr_1_response_get;
  wire [4 : 0] configResponsePipe_first, idResponsePipe_first;
  wire RDY_addr_0_request_put,
       RDY_addr_0_response_get,
       RDY_addr_1_request_put,
       RDY_addr_1_response_get,
       RDY_configResponsePipe_deq,
       RDY_configResponsePipe_first,
       RDY_configResponsePipe_notEmpty,
       RDY_errorPipe_deq,
       RDY_errorPipe_first,
       RDY_errorPipe_notEmpty,
       RDY_idResponsePipe_deq,
       RDY_idResponsePipe_first,
       RDY_idResponsePipe_notEmpty,
       RDY_request_idRequest,
       RDY_request_idReturn,
       RDY_request_region,
       RDY_request_setInterface,
       RDY_request_sglist,
       configResponsePipe_notEmpty,
       errorPipe_notEmpty,
       idResponsePipe_notEmpty;

  // inlined wires
  wire [31 : 0] sglId_gen_tags_port0__write_1,
		sglId_gen_tags_port1__write_1,
		sglId_gen_tags_port2__read;
  wire regall_cbram_data0_0_whas,
       sglId_gen_counter_dec_wire_whas,
       sglId_gen_tags_EN_port1__write,
       translationTable_cbram_counter_0_inc_wire_whas,
       translationTable_cbram_counter_1_inc_wire_whas;

  // register regall_cbram_counter_0_cnt
  reg [1 : 0] regall_cbram_counter_0_cnt;
  wire [1 : 0] regall_cbram_counter_0_cnt_D_IN;
  wire regall_cbram_counter_0_cnt_EN;

  // register regall_cbram_counter_0_positive_reg
  reg regall_cbram_counter_0_positive_reg;
  wire regall_cbram_counter_0_positive_reg_D_IN,
       regall_cbram_counter_0_positive_reg_EN;

  // register regall_cbram_counter_1_cnt
  reg [1 : 0] regall_cbram_counter_1_cnt;
  wire [1 : 0] regall_cbram_counter_1_cnt_D_IN;
  wire regall_cbram_counter_1_cnt_EN;

  // register regall_cbram_counter_1_positive_reg
  reg regall_cbram_counter_1_positive_reg;
  wire regall_cbram_counter_1_positive_reg_D_IN,
       regall_cbram_counter_1_positive_reg_EN;

  // register regall_cbram_cycles
  reg [31 : 0] regall_cbram_cycles;
  wire [31 : 0] regall_cbram_cycles_D_IN;
  wire regall_cbram_cycles_EN;

  // register regall_cbram_data1_0
  reg [146 : 0] regall_cbram_data1_0;
  wire [146 : 0] regall_cbram_data1_0_D_IN;
  wire regall_cbram_data1_0_EN;

  // register regall_cbram_data1_1
  reg [146 : 0] regall_cbram_data1_1;
  wire [146 : 0] regall_cbram_data1_1_D_IN;
  wire regall_cbram_data1_1_EN;

  // register regall_cbram_data2_0
  reg [146 : 0] regall_cbram_data2_0;
  wire [146 : 0] regall_cbram_data2_0_D_IN;
  wire regall_cbram_data2_0_EN;

  // register regall_cbram_data2_1
  reg [146 : 0] regall_cbram_data2_1;
  wire [146 : 0] regall_cbram_data2_1_D_IN;
  wire regall_cbram_data2_1_EN;

  // register sglId_gen_comp_state
  reg [31 : 0] sglId_gen_comp_state;
  wire [31 : 0] sglId_gen_comp_state_D_IN;
  wire sglId_gen_comp_state_EN;

  // register sglId_gen_counter_cnt
  reg [5 : 0] sglId_gen_counter_cnt;
  wire [5 : 0] sglId_gen_counter_cnt_D_IN;
  wire sglId_gen_counter_cnt_EN;

  // register sglId_gen_counter_positive_reg
  reg sglId_gen_counter_positive_reg;
  wire sglId_gen_counter_positive_reg_D_IN, sglId_gen_counter_positive_reg_EN;

  // register sglId_gen_head_ptr
  reg [4 : 0] sglId_gen_head_ptr;
  wire [4 : 0] sglId_gen_head_ptr_D_IN;
  wire sglId_gen_head_ptr_EN;

  // register sglId_gen_inited
  reg sglId_gen_inited;
  wire sglId_gen_inited_D_IN, sglId_gen_inited_EN;

  // register sglId_gen_tags
  reg [31 : 0] sglId_gen_tags;
  wire [31 : 0] sglId_gen_tags_D_IN;
  wire sglId_gen_tags_EN;

  // register sglId_gen_tail_ptr
  reg [4 : 0] sglId_gen_tail_ptr;
  wire [4 : 0] sglId_gen_tail_ptr_D_IN;
  wire sglId_gen_tail_ptr_EN;

  // register translationTable_cbram_counter_0_cnt
  reg [1 : 0] translationTable_cbram_counter_0_cnt;
  wire [1 : 0] translationTable_cbram_counter_0_cnt_D_IN;
  wire translationTable_cbram_counter_0_cnt_EN;

  // register translationTable_cbram_counter_0_positive_reg
  reg translationTable_cbram_counter_0_positive_reg;
  wire translationTable_cbram_counter_0_positive_reg_D_IN,
       translationTable_cbram_counter_0_positive_reg_EN;

  // register translationTable_cbram_counter_1_cnt
  reg [1 : 0] translationTable_cbram_counter_1_cnt;
  wire [1 : 0] translationTable_cbram_counter_1_cnt_D_IN;
  wire translationTable_cbram_counter_1_cnt_EN;

  // register translationTable_cbram_counter_1_positive_reg
  reg translationTable_cbram_counter_1_positive_reg;
  wire translationTable_cbram_counter_1_positive_reg_D_IN,
       translationTable_cbram_counter_1_positive_reg_EN;

  // register translationTable_cbram_cycles
  reg [31 : 0] translationTable_cbram_cycles;
  wire [31 : 0] translationTable_cbram_cycles_D_IN;
  wire translationTable_cbram_cycles_EN;

  // register translationTable_cbram_data1_0
  reg [29 : 0] translationTable_cbram_data1_0;
  wire [29 : 0] translationTable_cbram_data1_0_D_IN;
  wire translationTable_cbram_data1_0_EN;

  // register translationTable_cbram_data1_1
  reg [29 : 0] translationTable_cbram_data1_1;
  wire [29 : 0] translationTable_cbram_data1_1_D_IN;
  wire translationTable_cbram_data1_1_EN;

  // register translationTable_cbram_data2_0
  reg [29 : 0] translationTable_cbram_data2_0;
  wire [29 : 0] translationTable_cbram_data2_0_D_IN;
  wire translationTable_cbram_data2_0_EN;

  // register translationTable_cbram_data2_1
  reg [29 : 0] translationTable_cbram_data2_1;
  wire [29 : 0] translationTable_cbram_data2_1_D_IN;
  wire translationTable_cbram_data2_1_EN;

  // ports of submodule configResponseFifo
  wire [4 : 0] configResponseFifo_D_IN, configResponseFifo_D_OUT;
  wire configResponseFifo_CLR,
       configResponseFifo_DEQ,
       configResponseFifo_EMPTY_N,
       configResponseFifo_ENQ,
       configResponseFifo_FULL_N;

  // ports of submodule dmaErrorFifo
  wire [74 : 0] dmaErrorFifo_D_IN, dmaErrorFifo_D_OUT;
  wire dmaErrorFifo_CLR,
       dmaErrorFifo_DEQ,
       dmaErrorFifo_EMPTY_N,
       dmaErrorFifo_ENQ,
       dmaErrorFifo_FULL_N;

  // ports of submodule dmaErrorFifos_0
  wire [74 : 0] dmaErrorFifos_0_D_IN, dmaErrorFifos_0_D_OUT;
  wire dmaErrorFifos_0_CLR,
       dmaErrorFifos_0_DEQ,
       dmaErrorFifos_0_EMPTY_N,
       dmaErrorFifos_0_ENQ,
       dmaErrorFifos_0_FULL_N;

  // ports of submodule dmaErrorFifos_1
  wire [74 : 0] dmaErrorFifos_1_D_IN, dmaErrorFifos_1_D_OUT;
  wire dmaErrorFifos_1_CLR,
       dmaErrorFifos_1_DEQ,
       dmaErrorFifos_1_EMPTY_N,
       dmaErrorFifos_1_ENQ,
       dmaErrorFifos_1_FULL_N;

  // ports of submodule idResponseFifo
  wire [4 : 0] idResponseFifo_D_IN, idResponseFifo_D_OUT;
  wire idResponseFifo_CLR,
       idResponseFifo_DEQ,
       idResponseFifo_EMPTY_N,
       idResponseFifo_ENQ,
       idResponseFifo_FULL_N;

  // ports of submodule idReturnFifo
  wire [31 : 0] idReturnFifo_D_IN, idReturnFifo_D_OUT;
  wire idReturnFifo_CLR,
       idReturnFifo_DEQ,
       idReturnFifo_EMPTY_N,
       idReturnFifo_ENQ,
       idReturnFifo_FULL_N;

  // ports of submodule incomingReqs_0
  wire [44 : 0] incomingReqs_0_D_IN, incomingReqs_0_D_OUT;
  wire incomingReqs_0_CLR,
       incomingReqs_0_DEQ,
       incomingReqs_0_EMPTY_N,
       incomingReqs_0_ENQ,
       incomingReqs_0_FULL_N;

  // ports of submodule incomingReqs_1
  wire [44 : 0] incomingReqs_1_D_IN, incomingReqs_1_D_OUT;
  wire incomingReqs_1_CLR,
       incomingReqs_1_DEQ,
       incomingReqs_1_EMPTY_N,
       incomingReqs_1_ENQ,
       incomingReqs_1_FULL_N;

  // ports of submodule offs1_0
  wire [29 : 0] offs1_0_D_IN, offs1_0_D_OUT;
  wire offs1_0_CLR, offs1_0_DEQ, offs1_0_EMPTY_N, offs1_0_ENQ, offs1_0_FULL_N;

  // ports of submodule offs1_1
  wire [29 : 0] offs1_1_D_IN, offs1_1_D_OUT;
  wire offs1_1_CLR, offs1_1_DEQ, offs1_1_EMPTY_N, offs1_1_ENQ, offs1_1_FULL_N;

  // ports of submodule pageResponseFifos_0
  wire [42 : 0] pageResponseFifos_0_D_IN, pageResponseFifos_0_D_OUT;
  wire pageResponseFifos_0_CLR,
       pageResponseFifos_0_DEQ,
       pageResponseFifos_0_EMPTY_N,
       pageResponseFifos_0_ENQ,
       pageResponseFifos_0_FULL_N;

  // ports of submodule pageResponseFifos_1
  wire [42 : 0] pageResponseFifos_1_D_IN, pageResponseFifos_1_D_OUT;
  wire pageResponseFifos_1_CLR,
       pageResponseFifos_1_DEQ,
       pageResponseFifos_1_EMPTY_N,
       pageResponseFifos_1_ENQ,
       pageResponseFifos_1_FULL_N;

  // ports of submodule regall_cbram_bram
  reg [144 : 0] regall_cbram_bram_DIB;
  reg [4 : 0] regall_cbram_bram_ADDRB;
  wire [144 : 0] regall_cbram_bram_DIA,
		 regall_cbram_bram_DOA,
		 regall_cbram_bram_DOB;
  wire [4 : 0] regall_cbram_bram_ADDRA;
  wire regall_cbram_bram_ENA,
       regall_cbram_bram_ENB,
       regall_cbram_bram_WEA,
       regall_cbram_bram_WEB;

  // ports of submodule regall_cbram_responseFifo_0
  wire [144 : 0] regall_cbram_responseFifo_0_D_IN,
		 regall_cbram_responseFifo_0_D_OUT;
  wire regall_cbram_responseFifo_0_CLR,
       regall_cbram_responseFifo_0_DEQ,
       regall_cbram_responseFifo_0_EMPTY_N,
       regall_cbram_responseFifo_0_ENQ,
       regall_cbram_responseFifo_0_FULL_N;

  // ports of submodule regall_cbram_responseFifo_1
  wire [144 : 0] regall_cbram_responseFifo_1_D_IN,
		 regall_cbram_responseFifo_1_D_OUT;
  wire regall_cbram_responseFifo_1_CLR,
       regall_cbram_responseFifo_1_DEQ,
       regall_cbram_responseFifo_1_EMPTY_N,
       regall_cbram_responseFifo_1_ENQ,
       regall_cbram_responseFifo_1_FULL_N;

  // ports of submodule reqs0_0
  wire [44 : 0] reqs0_0_D_IN, reqs0_0_D_OUT;
  wire reqs0_0_CLR, reqs0_0_DEQ, reqs0_0_EMPTY_N, reqs0_0_ENQ, reqs0_0_FULL_N;

  // ports of submodule reqs0_1
  wire [44 : 0] reqs0_1_D_IN, reqs0_1_D_OUT;
  wire reqs0_1_CLR, reqs0_1_DEQ, reqs0_1_EMPTY_N, reqs0_1_ENQ, reqs0_1_FULL_N;

  // ports of submodule sglId_gen_comp_fifo
  wire [4 : 0] sglId_gen_comp_fifo_D_IN;
  wire sglId_gen_comp_fifo_CLR,
       sglId_gen_comp_fifo_DEQ,
       sglId_gen_comp_fifo_EMPTY_N,
       sglId_gen_comp_fifo_ENQ,
       sglId_gen_comp_fifo_FULL_N;

  // ports of submodule sglId_gen_retFifo
  wire [4 : 0] sglId_gen_retFifo_D_IN, sglId_gen_retFifo_D_OUT;
  wire sglId_gen_retFifo_CLR,
       sglId_gen_retFifo_DEQ,
       sglId_gen_retFifo_EMPTY_N,
       sglId_gen_retFifo_ENQ,
       sglId_gen_retFifo_FULL_N;

  // ports of submodule sglId_gen_tagFifo
  wire [4 : 0] sglId_gen_tagFifo_D_IN, sglId_gen_tagFifo_D_OUT;
  wire sglId_gen_tagFifo_CLR,
       sglId_gen_tagFifo_DEQ,
       sglId_gen_tagFifo_EMPTY_N,
       sglId_gen_tagFifo_ENQ,
       sglId_gen_tagFifo_FULL_N;

  // ports of submodule simDma_rws_0
  wire [31 : 0] simDma_rws_0_idreturn_id,
		simDma_rws_0_init_handle,
		simDma_rws_0_init_id,
		simDma_rws_0_init_size,
		simDma_rws_0_initfd_fd,
		simDma_rws_0_initfd_id,
		simDma_rws_0_readrequest_addr,
		simDma_rws_0_readrequest_handle,
		simDma_rws_0_write32_addr,
		simDma_rws_0_write32_data,
		simDma_rws_0_write32_handle;
  wire [3 : 0] simDma_rws_0_write32_byteenable;
  wire simDma_rws_0_en_idreturn,
       simDma_rws_0_en_init,
       simDma_rws_0_en_initfd,
       simDma_rws_0_en_readrequest,
       simDma_rws_0_en_readresponse,
       simDma_rws_0_en_write32;

  // ports of submodule stage3Params_0
  wire [80 : 0] stage3Params_0_D_IN, stage3Params_0_D_OUT;
  wire stage3Params_0_CLR,
       stage3Params_0_DEQ,
       stage3Params_0_EMPTY_N,
       stage3Params_0_ENQ,
       stage3Params_0_FULL_N;

  // ports of submodule stage3Params_1
  wire [80 : 0] stage3Params_1_D_IN, stage3Params_1_D_OUT;
  wire stage3Params_1_CLR,
       stage3Params_1_DEQ,
       stage3Params_1_EMPTY_N,
       stage3Params_1_ENQ,
       stage3Params_1_FULL_N;

  // ports of submodule stage4Params_0
  wire [50 : 0] stage4Params_0_D_IN, stage4Params_0_D_OUT;
  wire stage4Params_0_CLR,
       stage4Params_0_DEQ,
       stage4Params_0_EMPTY_N,
       stage4Params_0_ENQ,
       stage4Params_0_FULL_N;

  // ports of submodule stage4Params_1
  wire [50 : 0] stage4Params_1_D_IN, stage4Params_1_D_OUT;
  wire stage4Params_1_CLR,
       stage4Params_1_DEQ,
       stage4Params_1_EMPTY_N,
       stage4Params_1_ENQ,
       stage4Params_1_FULL_N;

  // ports of submodule translationTable_cbram_bram
  wire [27 : 0] translationTable_cbram_bram_DIA,
		translationTable_cbram_bram_DIB,
		translationTable_cbram_bram_DOA,
		translationTable_cbram_bram_DOB;
  wire [12 : 0] translationTable_cbram_bram_ADDRA,
		translationTable_cbram_bram_ADDRB;
  wire translationTable_cbram_bram_ENA,
       translationTable_cbram_bram_ENB,
       translationTable_cbram_bram_WEA,
       translationTable_cbram_bram_WEB;

  // ports of submodule translationTable_cbram_responseFifo_0
  wire [27 : 0] translationTable_cbram_responseFifo_0_D_IN,
		translationTable_cbram_responseFifo_0_D_OUT;
  wire translationTable_cbram_responseFifo_0_CLR,
       translationTable_cbram_responseFifo_0_DEQ,
       translationTable_cbram_responseFifo_0_EMPTY_N,
       translationTable_cbram_responseFifo_0_ENQ,
       translationTable_cbram_responseFifo_0_FULL_N;

  // ports of submodule translationTable_cbram_responseFifo_1
  wire [27 : 0] translationTable_cbram_responseFifo_1_D_IN,
		translationTable_cbram_responseFifo_1_D_OUT;
  wire translationTable_cbram_responseFifo_1_CLR,
       translationTable_cbram_responseFifo_1_DEQ,
       translationTable_cbram_responseFifo_1_EMPTY_N,
       translationTable_cbram_responseFifo_1_ENQ,
       translationTable_cbram_responseFifo_1_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_stage4,
       CAN_FIRE_RL_stage4_1,
       WILL_FIRE_RL_idReturnRule,
       WILL_FIRE_RL_sglId_gen_complete_rule1,
       WILL_FIRE_RL_stage1_1,
       WILL_FIRE_RL_stage2,
       WILL_FIRE_RL_stage2_1,
       WILL_FIRE_RL_stage4,
       WILL_FIRE_RL_stage4_1;

  // inputs to muxes for submodule ports
  wire [144 : 0] MUX_regall_cbram_bram_b_put_3__VAL_3;
  wire [74 : 0] MUX_dmaErrorFifos_0_enq_1__VAL_1,
		MUX_dmaErrorFifos_0_enq_1__VAL_2,
		MUX_dmaErrorFifos_1_enq_1__VAL_1,
		MUX_dmaErrorFifos_1_enq_1__VAL_2;
  wire [31 : 0] MUX_sglId_gen_comp_state_write_1__VAL_1,
		MUX_sglId_gen_comp_state_write_1__VAL_2;
  wire [12 : 0] MUX_translationTable_cbram_bram_a_put_2__VAL_1,
		MUX_translationTable_cbram_bram_a_put_2__VAL_2;
  wire MUX_dmaErrorFifo_enq_1__SEL_1,
       MUX_dmaErrorFifo_enq_1__SEL_2,
       MUX_dmaErrorFifos_0_enq_1__SEL_1,
       MUX_dmaErrorFifos_1_enq_1__SEL_1,
       MUX_sglId_gen_comp_state_write_1__SEL_1;

  // remaining internal signals
  reg [39 : 0] x_physAddr__h12757, x_physAddr__h14527;
  wire [39 : 0] rv__h12778,
		rv__h12788,
		rv__h12800,
		rv__h12812,
		rv__h14548,
		rv__h14558,
		rv__h14570,
		rv__h14582,
		x__h16099,
		x__h16239,
		x_off__h12070,
		x_off__h14110,
		y__h16252;
  wire [31 : 0] t__h1387,
		x__h1246,
		x__h1414,
		x_pref__h12069,
		x_pref__h14109,
		y__h1266;
  wire [7 : 0] p__h12000,
	       p__h12108,
	       p__h14042,
	       p__h14148,
	       x__h11896,
	       x__h11935,
	       x__h13940,
	       x__h13977,
	       y_avValue_fst__h11680,
	       y_avValue_fst__h11698,
	       y_avValue_fst__h11716,
	       y_avValue_fst__h13799,
	       y_avValue_fst__h13817,
	       y_avValue_fst__h13835,
	       y_avValue_snd_fst__h11823,
	       y_avValue_snd_fst__h11833,
	       y_avValue_snd_fst__h11843,
	       y_avValue_snd_fst__h13869,
	       y_avValue_snd_fst__h13879,
	       y_avValue_snd_fst__h13889;
  wire [5 : 0] sglId_gen_counter_cnt_PLUS_IF_sglId_gen_counte_ETC___d9;
  wire [2 : 0] x1_avValue_snd_snd_pageSize__h11864,
	       x1_avValue_snd_snd_pageSize__h11867,
	       x1_avValue_snd_snd_pageSize__h11870,
	       x1_avValue_snd_snd_pageSize__h11873,
	       x1_avValue_snd_snd_pageSize__h13910,
	       x1_avValue_snd_snd_pageSize__h13913,
	       x1_avValue_snd_snd_pageSize__h13916,
	       x1_avValue_snd_snd_pageSize__h13919;
  wire [1 : 0] regall_cbram_counter_0_cnt_4_PLUS_IF_regall_cb_ETC___d52,
	       regall_cbram_counter_1_cnt_5_PLUS_IF_regall_cb_ETC___d63,
	       translationTable_cbram_counter_0_cnt_08_PLUS_I_ETC___d116,
	       translationTable_cbram_counter_1_cnt_19_PLUS_I_ETC___d127;
  wire NOT_0_CONCAT_mmuid_41_EQ_request_sglist_sglId__ETC___d444,
       regall_cbram_responseFifo_0_i_notEmpty__88_AND_ETC___d194,
       regall_cbram_responseFifo_1_i_notEmpty__16_AND_ETC___d321,
       sglId_gen_tags_port1__read__2_BIT_sglId_gen_ta_ETC___d14;

  // action method request_sglist
  assign RDY_request_sglist = translationTable_cbram_counter_0_positive_reg ;

  // action method request_region
  assign RDY_request_region =
	     regall_cbram_counter_1_positive_reg &&
	     configResponseFifo_FULL_N ;

  // action method request_idRequest
  assign RDY_request_idRequest =
	     sglId_gen_tagFifo_EMPTY_N && idResponseFifo_FULL_N ;

  // action method request_idReturn
  assign RDY_request_idReturn = idReturnFifo_FULL_N ;

  // action method request_setInterface
  assign RDY_request_setInterface = 1'd1 ;

  // value method idResponsePipe_first
  assign idResponsePipe_first = idResponseFifo_D_OUT ;
  assign RDY_idResponsePipe_first = idResponseFifo_EMPTY_N ;

  // action method idResponsePipe_deq
  assign RDY_idResponsePipe_deq = idResponseFifo_EMPTY_N ;

  // value method idResponsePipe_notEmpty
  assign idResponsePipe_notEmpty = idResponseFifo_EMPTY_N ;
  assign RDY_idResponsePipe_notEmpty = 1'd1 ;

  // value method configResponsePipe_first
  assign configResponsePipe_first = configResponseFifo_D_OUT ;
  assign RDY_configResponsePipe_first = configResponseFifo_EMPTY_N ;

  // action method configResponsePipe_deq
  assign RDY_configResponsePipe_deq = configResponseFifo_EMPTY_N ;

  // value method configResponsePipe_notEmpty
  assign configResponsePipe_notEmpty = configResponseFifo_EMPTY_N ;
  assign RDY_configResponsePipe_notEmpty = 1'd1 ;

  // value method errorPipe_first
  assign errorPipe_first = dmaErrorFifo_D_OUT ;
  assign RDY_errorPipe_first = dmaErrorFifo_EMPTY_N ;

  // action method errorPipe_deq
  assign RDY_errorPipe_deq = dmaErrorFifo_EMPTY_N ;

  // value method errorPipe_notEmpty
  assign errorPipe_notEmpty = dmaErrorFifo_EMPTY_N ;
  assign RDY_errorPipe_notEmpty = 1'd1 ;

  // action method addr_0_request_put
  assign RDY_addr_0_request_put = incomingReqs_0_FULL_N ;

  // actionvalue method addr_0_response_get
  assign addr_0_response_get =
	     { pageResponseFifos_0_D_OUT[42:40], x__h16099 } ;
  assign RDY_addr_0_response_get = pageResponseFifos_0_EMPTY_N ;

  // action method addr_1_request_put
  assign RDY_addr_1_request_put = incomingReqs_1_FULL_N ;

  // actionvalue method addr_1_response_get
  assign addr_1_response_get =
	     { pageResponseFifos_1_D_OUT[42:40], x__h16239 } ;
  assign RDY_addr_1_response_get = pageResponseFifos_1_EMPTY_N ;

  // submodule configResponseFifo
  FIFO1 #(.width(32'd5), .guarded(1'd1)) configResponseFifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(configResponseFifo_D_IN),
							    .ENQ(configResponseFifo_ENQ),
							    .DEQ(configResponseFifo_DEQ),
							    .CLR(configResponseFifo_CLR),
							    .D_OUT(configResponseFifo_D_OUT),
							    .FULL_N(configResponseFifo_FULL_N),
							    .EMPTY_N(configResponseFifo_EMPTY_N));

  // submodule dmaErrorFifo
  FIFO1 #(.width(32'd75), .guarded(1'd1)) dmaErrorFifo(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(dmaErrorFifo_D_IN),
						       .ENQ(dmaErrorFifo_ENQ),
						       .DEQ(dmaErrorFifo_DEQ),
						       .CLR(dmaErrorFifo_CLR),
						       .D_OUT(dmaErrorFifo_D_OUT),
						       .FULL_N(dmaErrorFifo_FULL_N),
						       .EMPTY_N(dmaErrorFifo_EMPTY_N));

  // submodule dmaErrorFifos_0
  FIFO1 #(.width(32'd75), .guarded(1'd1)) dmaErrorFifos_0(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(dmaErrorFifos_0_D_IN),
							  .ENQ(dmaErrorFifos_0_ENQ),
							  .DEQ(dmaErrorFifos_0_DEQ),
							  .CLR(dmaErrorFifos_0_CLR),
							  .D_OUT(dmaErrorFifos_0_D_OUT),
							  .FULL_N(dmaErrorFifos_0_FULL_N),
							  .EMPTY_N(dmaErrorFifos_0_EMPTY_N));

  // submodule dmaErrorFifos_1
  FIFO1 #(.width(32'd75), .guarded(1'd1)) dmaErrorFifos_1(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(dmaErrorFifos_1_D_IN),
							  .ENQ(dmaErrorFifos_1_ENQ),
							  .DEQ(dmaErrorFifos_1_DEQ),
							  .CLR(dmaErrorFifos_1_CLR),
							  .D_OUT(dmaErrorFifos_1_D_OUT),
							  .FULL_N(dmaErrorFifos_1_FULL_N),
							  .EMPTY_N(dmaErrorFifos_1_EMPTY_N));

  // submodule idResponseFifo
  FIFO1 #(.width(32'd5), .guarded(1'd1)) idResponseFifo(.RST(RST_N),
							.CLK(CLK),
							.D_IN(idResponseFifo_D_IN),
							.ENQ(idResponseFifo_ENQ),
							.DEQ(idResponseFifo_DEQ),
							.CLR(idResponseFifo_CLR),
							.D_OUT(idResponseFifo_D_OUT),
							.FULL_N(idResponseFifo_FULL_N),
							.EMPTY_N(idResponseFifo_EMPTY_N));

  // submodule idReturnFifo
  FIFO2 #(.width(32'd32), .guarded(1'd1)) idReturnFifo(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(idReturnFifo_D_IN),
						       .ENQ(idReturnFifo_ENQ),
						       .DEQ(idReturnFifo_DEQ),
						       .CLR(idReturnFifo_CLR),
						       .D_OUT(idReturnFifo_D_OUT),
						       .FULL_N(idReturnFifo_FULL_N),
						       .EMPTY_N(idReturnFifo_EMPTY_N));

  // submodule incomingReqs_0
  FIFO2 #(.width(32'd45), .guarded(1'd1)) incomingReqs_0(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(incomingReqs_0_D_IN),
							 .ENQ(incomingReqs_0_ENQ),
							 .DEQ(incomingReqs_0_DEQ),
							 .CLR(incomingReqs_0_CLR),
							 .D_OUT(incomingReqs_0_D_OUT),
							 .FULL_N(incomingReqs_0_FULL_N),
							 .EMPTY_N(incomingReqs_0_EMPTY_N));

  // submodule incomingReqs_1
  FIFO2 #(.width(32'd45), .guarded(1'd1)) incomingReqs_1(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(incomingReqs_1_D_IN),
							 .ENQ(incomingReqs_1_ENQ),
							 .DEQ(incomingReqs_1_DEQ),
							 .CLR(incomingReqs_1_CLR),
							 .D_OUT(incomingReqs_1_D_OUT),
							 .FULL_N(incomingReqs_1_FULL_N),
							 .EMPTY_N(incomingReqs_1_EMPTY_N));

  // submodule offs1_0
  SizedFIFO #(.p1width(32'd30),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) offs1_0(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(offs1_0_D_IN),
				      .ENQ(offs1_0_ENQ),
				      .DEQ(offs1_0_DEQ),
				      .CLR(offs1_0_CLR),
				      .D_OUT(offs1_0_D_OUT),
				      .FULL_N(offs1_0_FULL_N),
				      .EMPTY_N(offs1_0_EMPTY_N));

  // submodule offs1_1
  SizedFIFO #(.p1width(32'd30),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) offs1_1(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(offs1_1_D_IN),
				      .ENQ(offs1_1_ENQ),
				      .DEQ(offs1_1_DEQ),
				      .CLR(offs1_1_CLR),
				      .D_OUT(offs1_1_D_OUT),
				      .FULL_N(offs1_1_FULL_N),
				      .EMPTY_N(offs1_1_EMPTY_N));

  // submodule pageResponseFifos_0
  FIFO2 #(.width(32'd43), .guarded(1'd1)) pageResponseFifos_0(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(pageResponseFifos_0_D_IN),
							      .ENQ(pageResponseFifos_0_ENQ),
							      .DEQ(pageResponseFifos_0_DEQ),
							      .CLR(pageResponseFifos_0_CLR),
							      .D_OUT(pageResponseFifos_0_D_OUT),
							      .FULL_N(pageResponseFifos_0_FULL_N),
							      .EMPTY_N(pageResponseFifos_0_EMPTY_N));

  // submodule pageResponseFifos_1
  FIFO2 #(.width(32'd43), .guarded(1'd1)) pageResponseFifos_1(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(pageResponseFifos_1_D_IN),
							      .ENQ(pageResponseFifos_1_ENQ),
							      .DEQ(pageResponseFifos_1_DEQ),
							      .CLR(pageResponseFifos_1_CLR),
							      .D_OUT(pageResponseFifos_1_D_OUT),
							      .FULL_N(pageResponseFifos_1_FULL_N),
							      .EMPTY_N(pageResponseFifos_1_EMPTY_N));

  // submodule regall_cbram_bram
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd145),
	  .MEMSIZE(6'd32)) regall_cbram_bram(.CLKA(CLK),
					     .CLKB(CLK),
					     .ADDRA(regall_cbram_bram_ADDRA),
					     .ADDRB(regall_cbram_bram_ADDRB),
					     .DIA(regall_cbram_bram_DIA),
					     .DIB(regall_cbram_bram_DIB),
					     .WEA(regall_cbram_bram_WEA),
					     .WEB(regall_cbram_bram_WEB),
					     .ENA(regall_cbram_bram_ENA),
					     .ENB(regall_cbram_bram_ENB),
					     .DOA(regall_cbram_bram_DOA),
					     .DOB(regall_cbram_bram_DOB));

  // submodule regall_cbram_responseFifo_0
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) regall_cbram_responseFifo_0(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(regall_cbram_responseFifo_0_D_IN),
						      .ENQ(regall_cbram_responseFifo_0_ENQ),
						      .DEQ(regall_cbram_responseFifo_0_DEQ),
						      .CLR(regall_cbram_responseFifo_0_CLR),
						      .D_OUT(regall_cbram_responseFifo_0_D_OUT),
						      .FULL_N(regall_cbram_responseFifo_0_FULL_N),
						      .EMPTY_N(regall_cbram_responseFifo_0_EMPTY_N));

  // submodule regall_cbram_responseFifo_1
  FIFO2 #(.width(32'd145),
	  .guarded(1'd1)) regall_cbram_responseFifo_1(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(regall_cbram_responseFifo_1_D_IN),
						      .ENQ(regall_cbram_responseFifo_1_ENQ),
						      .DEQ(regall_cbram_responseFifo_1_DEQ),
						      .CLR(regall_cbram_responseFifo_1_CLR),
						      .D_OUT(regall_cbram_responseFifo_1_D_OUT),
						      .FULL_N(regall_cbram_responseFifo_1_FULL_N),
						      .EMPTY_N(regall_cbram_responseFifo_1_EMPTY_N));

  // submodule reqs0_0
  SizedFIFO #(.p1width(32'd45),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) reqs0_0(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(reqs0_0_D_IN),
				      .ENQ(reqs0_0_ENQ),
				      .DEQ(reqs0_0_DEQ),
				      .CLR(reqs0_0_CLR),
				      .D_OUT(reqs0_0_D_OUT),
				      .FULL_N(reqs0_0_FULL_N),
				      .EMPTY_N(reqs0_0_EMPTY_N));

  // submodule reqs0_1
  SizedFIFO #(.p1width(32'd45),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) reqs0_1(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(reqs0_1_D_IN),
				      .ENQ(reqs0_1_ENQ),
				      .DEQ(reqs0_1_DEQ),
				      .CLR(reqs0_1_CLR),
				      .D_OUT(reqs0_1_D_OUT),
				      .FULL_N(reqs0_1_FULL_N),
				      .EMPTY_N(reqs0_1_EMPTY_N));

  // submodule sglId_gen_comp_fifo
  FIFO2 #(.width(32'd5), .guarded(1'd1)) sglId_gen_comp_fifo(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(sglId_gen_comp_fifo_D_IN),
							     .ENQ(sglId_gen_comp_fifo_ENQ),
							     .DEQ(sglId_gen_comp_fifo_DEQ),
							     .CLR(sglId_gen_comp_fifo_CLR),
							     .D_OUT(),
							     .FULL_N(sglId_gen_comp_fifo_FULL_N),
							     .EMPTY_N(sglId_gen_comp_fifo_EMPTY_N));

  // submodule sglId_gen_retFifo
  FIFO2 #(.width(32'd5), .guarded(1'd1)) sglId_gen_retFifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(sglId_gen_retFifo_D_IN),
							   .ENQ(sglId_gen_retFifo_ENQ),
							   .DEQ(sglId_gen_retFifo_DEQ),
							   .CLR(sglId_gen_retFifo_CLR),
							   .D_OUT(sglId_gen_retFifo_D_OUT),
							   .FULL_N(sglId_gen_retFifo_FULL_N),
							   .EMPTY_N(sglId_gen_retFifo_EMPTY_N));

  // submodule sglId_gen_tagFifo
  FIFO2 #(.width(32'd5), .guarded(1'd1)) sglId_gen_tagFifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(sglId_gen_tagFifo_D_IN),
							   .ENQ(sglId_gen_tagFifo_ENQ),
							   .DEQ(sglId_gen_tagFifo_DEQ),
							   .CLR(sglId_gen_tagFifo_CLR),
							   .D_OUT(sglId_gen_tagFifo_D_OUT),
							   .FULL_N(sglId_gen_tagFifo_FULL_N),
							   .EMPTY_N(sglId_gen_tagFifo_EMPTY_N));

  // submodule simDma_rws_0
  XsimDmaReadWrite simDma_rws_0(.RST(RST_N),
				.CLK(CLK),
				.CLK_GATE(1'd1),
				.idreturn_id(simDma_rws_0_idreturn_id),
				.init_handle(simDma_rws_0_init_handle),
				.init_id(simDma_rws_0_init_id),
				.init_size(simDma_rws_0_init_size),
				.initfd_fd(simDma_rws_0_initfd_fd),
				.initfd_id(simDma_rws_0_initfd_id),
				.readrequest_addr(simDma_rws_0_readrequest_addr),
				.readrequest_handle(simDma_rws_0_readrequest_handle),
				.write32_addr(simDma_rws_0_write32_addr),
				.write32_byteenable(simDma_rws_0_write32_byteenable),
				.write32_data(simDma_rws_0_write32_data),
				.write32_handle(simDma_rws_0_write32_handle),
				.en_init(simDma_rws_0_en_init),
				.en_initfd(simDma_rws_0_en_initfd),
				.en_idreturn(simDma_rws_0_en_idreturn),
				.en_write32(simDma_rws_0_en_write32),
				.en_readrequest(simDma_rws_0_en_readrequest),
				.en_readresponse(simDma_rws_0_en_readresponse),
				.rdy_readrequest(),
				.readresponse_data(),
				.rdy_readresponse());

  // submodule stage3Params_0
  FIFO2 #(.width(32'd81), .guarded(1'd1)) stage3Params_0(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(stage3Params_0_D_IN),
							 .ENQ(stage3Params_0_ENQ),
							 .DEQ(stage3Params_0_DEQ),
							 .CLR(stage3Params_0_CLR),
							 .D_OUT(stage3Params_0_D_OUT),
							 .FULL_N(stage3Params_0_FULL_N),
							 .EMPTY_N(stage3Params_0_EMPTY_N));

  // submodule stage3Params_1
  FIFO2 #(.width(32'd81), .guarded(1'd1)) stage3Params_1(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(stage3Params_1_D_IN),
							 .ENQ(stage3Params_1_ENQ),
							 .DEQ(stage3Params_1_DEQ),
							 .CLR(stage3Params_1_CLR),
							 .D_OUT(stage3Params_1_D_OUT),
							 .FULL_N(stage3Params_1_FULL_N),
							 .EMPTY_N(stage3Params_1_EMPTY_N));

  // submodule stage4Params_0
  FIFO2 #(.width(32'd51), .guarded(1'd1)) stage4Params_0(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(stage4Params_0_D_IN),
							 .ENQ(stage4Params_0_ENQ),
							 .DEQ(stage4Params_0_DEQ),
							 .CLR(stage4Params_0_CLR),
							 .D_OUT(stage4Params_0_D_OUT),
							 .FULL_N(stage4Params_0_FULL_N),
							 .EMPTY_N(stage4Params_0_EMPTY_N));

  // submodule stage4Params_1
  FIFO2 #(.width(32'd51), .guarded(1'd1)) stage4Params_1(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(stage4Params_1_D_IN),
							 .ENQ(stage4Params_1_ENQ),
							 .DEQ(stage4Params_1_DEQ),
							 .CLR(stage4Params_1_CLR),
							 .D_OUT(stage4Params_1_D_OUT),
							 .FULL_N(stage4Params_1_FULL_N),
							 .EMPTY_N(stage4Params_1_EMPTY_N));

  // submodule translationTable_cbram_bram
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd13),
	  .DATA_WIDTH(32'd28),
	  .MEMSIZE(14'd8192)) translationTable_cbram_bram(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(translationTable_cbram_bram_ADDRA),
							  .ADDRB(translationTable_cbram_bram_ADDRB),
							  .DIA(translationTable_cbram_bram_DIA),
							  .DIB(translationTable_cbram_bram_DIB),
							  .WEA(translationTable_cbram_bram_WEA),
							  .WEB(translationTable_cbram_bram_WEB),
							  .ENA(translationTable_cbram_bram_ENA),
							  .ENB(translationTable_cbram_bram_ENB),
							  .DOA(translationTable_cbram_bram_DOA),
							  .DOB(translationTable_cbram_bram_DOB));

  // submodule translationTable_cbram_responseFifo_0
  FIFO2 #(.width(32'd28),
	  .guarded(1'd1)) translationTable_cbram_responseFifo_0(.RST(RST_N),
								.CLK(CLK),
								.D_IN(translationTable_cbram_responseFifo_0_D_IN),
								.ENQ(translationTable_cbram_responseFifo_0_ENQ),
								.DEQ(translationTable_cbram_responseFifo_0_DEQ),
								.CLR(translationTable_cbram_responseFifo_0_CLR),
								.D_OUT(translationTable_cbram_responseFifo_0_D_OUT),
								.FULL_N(translationTable_cbram_responseFifo_0_FULL_N),
								.EMPTY_N(translationTable_cbram_responseFifo_0_EMPTY_N));

  // submodule translationTable_cbram_responseFifo_1
  FIFO2 #(.width(32'd28),
	  .guarded(1'd1)) translationTable_cbram_responseFifo_1(.RST(RST_N),
								.CLK(CLK),
								.D_IN(translationTable_cbram_responseFifo_1_D_IN),
								.ENQ(translationTable_cbram_responseFifo_1_ENQ),
								.DEQ(translationTable_cbram_responseFifo_1_DEQ),
								.CLR(translationTable_cbram_responseFifo_1_CLR),
								.D_OUT(translationTable_cbram_responseFifo_1_D_OUT),
								.FULL_N(translationTable_cbram_responseFifo_1_FULL_N),
								.EMPTY_N(translationTable_cbram_responseFifo_1_EMPTY_N));

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     dmaErrorFifo_FULL_N && dmaErrorFifos_1_EMPTY_N ;

  // rule RL_stage4
  assign CAN_FIRE_RL_stage4 =
	     stage4Params_0_EMPTY_N &&
	     translationTable_cbram_counter_0_positive_reg &&
	     offs1_0_FULL_N &&
	     (stage4Params_0_D_OUT[47:45] != 3'd0 || dmaErrorFifos_1_FULL_N) ;
  assign WILL_FIRE_RL_stage4 = CAN_FIRE_RL_stage4 && !EN_request_sglist ;

  // rule RL_stage1_1
  assign WILL_FIRE_RL_stage1_1 =
	     incomingReqs_1_EMPTY_N && regall_cbram_counter_1_positive_reg &&
	     reqs0_1_FULL_N &&
	     !EN_request_region ;

  // rule RL_stage4_1
  assign CAN_FIRE_RL_stage4_1 =
	     stage4Params_1_EMPTY_N &&
	     translationTable_cbram_counter_1_positive_reg &&
	     offs1_1_FULL_N &&
	     (stage4Params_1_D_OUT[47:45] != 3'd0 || dmaErrorFifos_1_FULL_N) ;
  assign WILL_FIRE_RL_stage4_1 =
	     CAN_FIRE_RL_stage4_1 && !WILL_FIRE_RL_stage4 ;

  // rule RL_idReturnRule
  assign WILL_FIRE_RL_idReturnRule =
	     sglId_gen_inited && regall_cbram_counter_1_positive_reg &&
	     idReturnFifo_EMPTY_N &&
	     sglId_gen_retFifo_FULL_N &&
	     !WILL_FIRE_RL_stage1_1 &&
	     !EN_request_region ;

  // rule RL_sglId_gen_complete_rule1
  assign WILL_FIRE_RL_sglId_gen_complete_rule1 =
	     (sglId_gen_tags_port1__read__2_BIT_sglId_gen_ta_ETC___d14 ||
	      sglId_gen_comp_fifo_FULL_N) &&
	     sglId_gen_comp_state[0] &&
	     !sglId_gen_retFifo_EMPTY_N ;

  // rule RL_stage2
  assign WILL_FIRE_RL_stage2 =
	     reqs0_0_EMPTY_N &&
	     regall_cbram_responseFifo_0_i_notEmpty__88_AND_ETC___d194 ;

  // rule RL_stage2_1
  assign WILL_FIRE_RL_stage2_1 =
	     reqs0_1_EMPTY_N &&
	     regall_cbram_responseFifo_1_i_notEmpty__16_AND_ETC___d321 &&
	     !WILL_FIRE_RL_stage2 ;

  // inputs to muxes for submodule ports
  assign MUX_dmaErrorFifo_enq_1__SEL_1 =
	     dmaErrorFifos_0_EMPTY_N && dmaErrorFifo_FULL_N ;
  assign MUX_dmaErrorFifo_enq_1__SEL_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 &&
	     !MUX_dmaErrorFifo_enq_1__SEL_1 ;
  assign MUX_dmaErrorFifos_0_enq_1__SEL_1 =
	     WILL_FIRE_RL_stage2 && !regall_cbram_responseFifo_0_D_OUT[144] ;
  assign MUX_dmaErrorFifos_1_enq_1__SEL_1 =
	     WILL_FIRE_RL_stage4 && stage4Params_0_D_OUT[47:45] == 3'd0 ;
  assign MUX_sglId_gen_comp_state_write_1__SEL_1 =
	     WILL_FIRE_RL_sglId_gen_complete_rule1 &&
	     !sglId_gen_tags_port1__read__2_BIT_sglId_gen_ta_ETC___d14 ;
  assign MUX_dmaErrorFifos_0_enq_1__VAL_1 = { 30'd805306368, reqs0_0_D_OUT } ;
  assign MUX_dmaErrorFifos_0_enq_1__VAL_2 = { 30'd805306368, reqs0_1_D_OUT } ;
  assign MUX_dmaErrorFifos_1_enq_1__VAL_1 =
	     { 3'd5, x_pref__h12069, x_off__h12070 } ;
  assign MUX_dmaErrorFifos_1_enq_1__VAL_2 =
	     { 3'd5, x_pref__h14109, x_off__h14110 } ;
  assign MUX_regall_cbram_bram_b_put_3__VAL_3 =
	     { 1'd1,
	       request_region_barr12[27:0],
	       request_region_index12[7:0],
	       request_region_barr8[27:0],
	       request_region_index8[7:0],
	       request_region_barr4[27:0],
	       request_region_index4[7:0],
	       request_region_barr0[27:0],
	       request_region_index0[7:0] } ;
  assign MUX_sglId_gen_comp_state_write_1__VAL_1 =
	     { 1'd0, sglId_gen_comp_state[31:1] } ;
  assign MUX_sglId_gen_comp_state_write_1__VAL_2 =
	     { sglId_gen_comp_state[30:0], 1'd1 } ;
  assign MUX_translationTable_cbram_bram_a_put_2__VAL_1 =
	     { stage4Params_0_D_OUT[4:0], p__h12108 } ;
  assign MUX_translationTable_cbram_bram_a_put_2__VAL_2 =
	     { request_sglist_sglId[4:0], request_sglist_sglIndex[7:0] } ;

  // inlined wires
  assign sglId_gen_counter_dec_wire_whas =
	     sglId_gen_tagFifo_FULL_N && sglId_gen_inited &&
	     sglId_gen_counter_positive_reg ;
  assign regall_cbram_data0_0_whas =
	     incomingReqs_0_EMPTY_N && regall_cbram_counter_0_positive_reg &&
	     reqs0_0_FULL_N ;
  assign translationTable_cbram_counter_0_inc_wire_whas =
	     translationTable_cbram_responseFifo_0_EMPTY_N &&
	     offs1_0_EMPTY_N &&
	     pageResponseFifos_0_FULL_N ;
  assign translationTable_cbram_counter_1_inc_wire_whas =
	     translationTable_cbram_responseFifo_1_EMPTY_N &&
	     offs1_1_EMPTY_N &&
	     pageResponseFifos_1_FULL_N ;
  assign sglId_gen_tags_port0__write_1 = sglId_gen_tags & y__h1266 ;
  assign sglId_gen_tags_EN_port1__write =
	     sglId_gen_tagFifo_FULL_N && sglId_gen_inited &&
	     sglId_gen_counter_positive_reg ;
  assign sglId_gen_tags_port1__write_1 = t__h1387 | x__h1414 ;
  assign sglId_gen_tags_port2__read =
	     sglId_gen_tags_EN_port1__write ?
	       sglId_gen_tags_port1__write_1 :
	       t__h1387 ;

  // register regall_cbram_counter_0_cnt
  assign regall_cbram_counter_0_cnt_D_IN =
	     regall_cbram_counter_0_cnt_4_PLUS_IF_regall_cb_ETC___d52 ;
  assign regall_cbram_counter_0_cnt_EN = 1'd1 ;

  // register regall_cbram_counter_0_positive_reg
  assign regall_cbram_counter_0_positive_reg_D_IN =
	     regall_cbram_counter_0_cnt_4_PLUS_IF_regall_cb_ETC___d52 !=
	     2'd0 ;
  assign regall_cbram_counter_0_positive_reg_EN = 1'd1 ;

  // register regall_cbram_counter_1_cnt
  assign regall_cbram_counter_1_cnt_D_IN =
	     regall_cbram_counter_1_cnt_5_PLUS_IF_regall_cb_ETC___d63 ;
  assign regall_cbram_counter_1_cnt_EN = 1'd1 ;

  // register regall_cbram_counter_1_positive_reg
  assign regall_cbram_counter_1_positive_reg_D_IN =
	     regall_cbram_counter_1_cnt_5_PLUS_IF_regall_cb_ETC___d63 !=
	     2'd0 ;
  assign regall_cbram_counter_1_positive_reg_EN = 1'd1 ;

  // register regall_cbram_cycles
  assign regall_cbram_cycles_D_IN = 32'h0 ;
  assign regall_cbram_cycles_EN = 1'b0 ;

  // register regall_cbram_data1_0
  assign regall_cbram_data1_0_D_IN =
	     { regall_cbram_data0_0_whas,
	       146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign regall_cbram_data1_0_EN = 1'b1 ;

  // register regall_cbram_data1_1
  assign regall_cbram_data1_1_D_IN =
	     { WILL_FIRE_RL_stage1_1,
	       146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign regall_cbram_data1_1_EN = 1'b1 ;

  // register regall_cbram_data2_0
  assign regall_cbram_data2_0_D_IN = regall_cbram_data1_0 ;
  assign regall_cbram_data2_0_EN = 1'b1 ;

  // register regall_cbram_data2_1
  assign regall_cbram_data2_1_D_IN = regall_cbram_data1_1 ;
  assign regall_cbram_data2_1_EN = 1'b1 ;

  // register sglId_gen_comp_state
  assign sglId_gen_comp_state_D_IN =
	     MUX_sglId_gen_comp_state_write_1__SEL_1 ?
	       MUX_sglId_gen_comp_state_write_1__VAL_1 :
	       MUX_sglId_gen_comp_state_write_1__VAL_2 ;
  assign sglId_gen_comp_state_EN =
	     WILL_FIRE_RL_sglId_gen_complete_rule1 &&
	     !sglId_gen_tags_port1__read__2_BIT_sglId_gen_ta_ETC___d14 ||
	     sglId_gen_retFifo_EMPTY_N ;

  // register sglId_gen_counter_cnt
  assign sglId_gen_counter_cnt_D_IN =
	     sglId_gen_counter_cnt_PLUS_IF_sglId_gen_counte_ETC___d9 ;
  assign sglId_gen_counter_cnt_EN = 1'd1 ;

  // register sglId_gen_counter_positive_reg
  assign sglId_gen_counter_positive_reg_D_IN =
	     sglId_gen_counter_cnt_PLUS_IF_sglId_gen_counte_ETC___d9 != 6'd0 ;
  assign sglId_gen_counter_positive_reg_EN = 1'd1 ;

  // register sglId_gen_head_ptr
  assign sglId_gen_head_ptr_D_IN = sglId_gen_head_ptr + 5'd1 ;
  assign sglId_gen_head_ptr_EN =
	     sglId_gen_tagFifo_FULL_N && sglId_gen_inited &&
	     sglId_gen_counter_positive_reg ||
	     !sglId_gen_inited ;

  // register sglId_gen_inited
  assign sglId_gen_inited_D_IN = sglId_gen_head_ptr == 5'd31 ;
  assign sglId_gen_inited_EN = !sglId_gen_inited ;

  // register sglId_gen_tags
  assign sglId_gen_tags_D_IN = sglId_gen_tags_port2__read ;
  assign sglId_gen_tags_EN = 1'b1 ;

  // register sglId_gen_tail_ptr
  assign sglId_gen_tail_ptr_D_IN = sglId_gen_tail_ptr + 5'd1 ;
  assign sglId_gen_tail_ptr_EN = MUX_sglId_gen_comp_state_write_1__SEL_1 ;

  // register translationTable_cbram_counter_0_cnt
  assign translationTable_cbram_counter_0_cnt_D_IN =
	     translationTable_cbram_counter_0_cnt_08_PLUS_I_ETC___d116 ;
  assign translationTable_cbram_counter_0_cnt_EN = 1'd1 ;

  // register translationTable_cbram_counter_0_positive_reg
  assign translationTable_cbram_counter_0_positive_reg_D_IN =
	     translationTable_cbram_counter_0_cnt_08_PLUS_I_ETC___d116 !=
	     2'd0 ;
  assign translationTable_cbram_counter_0_positive_reg_EN = 1'd1 ;

  // register translationTable_cbram_counter_1_cnt
  assign translationTable_cbram_counter_1_cnt_D_IN =
	     translationTable_cbram_counter_1_cnt_19_PLUS_I_ETC___d127 ;
  assign translationTable_cbram_counter_1_cnt_EN = 1'd1 ;

  // register translationTable_cbram_counter_1_positive_reg
  assign translationTable_cbram_counter_1_positive_reg_D_IN =
	     translationTable_cbram_counter_1_cnt_19_PLUS_I_ETC___d127 !=
	     2'd0 ;
  assign translationTable_cbram_counter_1_positive_reg_EN = 1'd1 ;

  // register translationTable_cbram_cycles
  assign translationTable_cbram_cycles_D_IN = 32'h0 ;
  assign translationTable_cbram_cycles_EN = 1'b0 ;

  // register translationTable_cbram_data1_0
  assign translationTable_cbram_data1_0_D_IN =
	     { WILL_FIRE_RL_stage4, 29'b01010101010101010101010101010 } ;
  assign translationTable_cbram_data1_0_EN = 1'b1 ;

  // register translationTable_cbram_data1_1
  assign translationTable_cbram_data1_1_D_IN =
	     { WILL_FIRE_RL_stage4_1, 29'b01010101010101010101010101010 } ;
  assign translationTable_cbram_data1_1_EN = 1'b1 ;

  // register translationTable_cbram_data2_0
  assign translationTable_cbram_data2_0_D_IN =
	     translationTable_cbram_data1_0 ;
  assign translationTable_cbram_data2_0_EN = 1'b1 ;

  // register translationTable_cbram_data2_1
  assign translationTable_cbram_data2_1_D_IN =
	     translationTable_cbram_data1_1 ;
  assign translationTable_cbram_data2_1_EN = 1'b1 ;

  // submodule configResponseFifo
  assign configResponseFifo_D_IN = request_region_sglId[4:0] ;
  assign configResponseFifo_ENQ = EN_request_region ;
  assign configResponseFifo_DEQ = EN_configResponsePipe_deq ;
  assign configResponseFifo_CLR = 1'b0 ;

  // submodule dmaErrorFifo
  assign dmaErrorFifo_D_IN =
	     MUX_dmaErrorFifo_enq_1__SEL_1 ?
	       dmaErrorFifos_0_D_OUT :
	       dmaErrorFifos_1_D_OUT ;
  assign dmaErrorFifo_ENQ =
	     MUX_dmaErrorFifo_enq_1__SEL_1 ||
	     CAN_FIRE_RL_mkConnectionGetPut_1 &&
	     !MUX_dmaErrorFifo_enq_1__SEL_1 ;
  assign dmaErrorFifo_DEQ = EN_errorPipe_deq ;
  assign dmaErrorFifo_CLR = 1'b0 ;

  // submodule dmaErrorFifos_0
  assign dmaErrorFifos_0_D_IN =
	     MUX_dmaErrorFifos_0_enq_1__SEL_1 ?
	       MUX_dmaErrorFifos_0_enq_1__VAL_1 :
	       MUX_dmaErrorFifos_0_enq_1__VAL_2 ;
  assign dmaErrorFifos_0_ENQ =
	     WILL_FIRE_RL_stage2 && !regall_cbram_responseFifo_0_D_OUT[144] ||
	     WILL_FIRE_RL_stage2_1 &&
	     !regall_cbram_responseFifo_1_D_OUT[144] ;
  assign dmaErrorFifos_0_DEQ = MUX_dmaErrorFifo_enq_1__SEL_1 ;
  assign dmaErrorFifos_0_CLR = 1'b0 ;

  // submodule dmaErrorFifos_1
  assign dmaErrorFifos_1_D_IN =
	     MUX_dmaErrorFifos_1_enq_1__SEL_1 ?
	       MUX_dmaErrorFifos_1_enq_1__VAL_1 :
	       MUX_dmaErrorFifos_1_enq_1__VAL_2 ;
  assign dmaErrorFifos_1_ENQ =
	     WILL_FIRE_RL_stage4 && stage4Params_0_D_OUT[47:45] == 3'd0 ||
	     WILL_FIRE_RL_stage4_1 && stage4Params_1_D_OUT[47:45] == 3'd0 ;
  assign dmaErrorFifos_1_DEQ = MUX_dmaErrorFifo_enq_1__SEL_2 ;
  assign dmaErrorFifos_1_CLR = 1'b0 ;

  // submodule idResponseFifo
  assign idResponseFifo_D_IN = sglId_gen_tagFifo_D_OUT ;
  assign idResponseFifo_ENQ = EN_request_idRequest ;
  assign idResponseFifo_DEQ = EN_idResponsePipe_deq ;
  assign idResponseFifo_CLR = 1'b0 ;

  // submodule idReturnFifo
  assign idReturnFifo_D_IN = request_idReturn_sglId ;
  assign idReturnFifo_ENQ = EN_request_idReturn ;
  assign idReturnFifo_DEQ = WILL_FIRE_RL_idReturnRule ;
  assign idReturnFifo_CLR = 1'b0 ;

  // submodule incomingReqs_0
  assign incomingReqs_0_D_IN = addr_0_request_put ;
  assign incomingReqs_0_ENQ = EN_addr_0_request_put ;
  assign incomingReqs_0_DEQ = regall_cbram_data0_0_whas ;
  assign incomingReqs_0_CLR = 1'b0 ;

  // submodule incomingReqs_1
  assign incomingReqs_1_D_IN = addr_1_request_put ;
  assign incomingReqs_1_ENQ = EN_addr_1_request_put ;
  assign incomingReqs_1_DEQ = WILL_FIRE_RL_stage1_1 ;
  assign incomingReqs_1_CLR = 1'b0 ;

  // submodule offs1_0
  assign offs1_0_D_IN =
	     { (stage4Params_0_D_OUT[47:45] == 3'd0) ?
		 3'd5 :
		 stage4Params_0_D_OUT[50:48],
	       stage4Params_0_D_OUT[47:21] } ;
  assign offs1_0_ENQ = WILL_FIRE_RL_stage4 ;
  assign offs1_0_DEQ = translationTable_cbram_counter_0_inc_wire_whas ;
  assign offs1_0_CLR = 1'b0 ;

  // submodule offs1_1
  assign offs1_1_D_IN =
	     { (stage4Params_1_D_OUT[47:45] == 3'd0) ?
		 3'd5 :
		 stage4Params_1_D_OUT[50:48],
	       stage4Params_1_D_OUT[47:21] } ;
  assign offs1_1_ENQ = WILL_FIRE_RL_stage4_1 ;
  assign offs1_1_DEQ = translationTable_cbram_counter_1_inc_wire_whas ;
  assign offs1_1_CLR = 1'b0 ;

  // submodule pageResponseFifos_0
  assign pageResponseFifos_0_D_IN =
	     { offs1_0_D_OUT[29:27], x_physAddr__h12757 } ;
  assign pageResponseFifos_0_ENQ =
	     translationTable_cbram_counter_0_inc_wire_whas ;
  assign pageResponseFifos_0_DEQ = EN_addr_0_response_get ;
  assign pageResponseFifos_0_CLR = 1'b0 ;

  // submodule pageResponseFifos_1
  assign pageResponseFifos_1_D_IN =
	     { offs1_1_D_OUT[29:27], x_physAddr__h14527 } ;
  assign pageResponseFifos_1_ENQ =
	     translationTable_cbram_counter_1_inc_wire_whas ;
  assign pageResponseFifos_1_DEQ = EN_addr_1_response_get ;
  assign pageResponseFifos_1_CLR = 1'b0 ;

  // submodule regall_cbram_bram
  assign regall_cbram_bram_ADDRA = incomingReqs_0_D_OUT[44:40] ;
  always@(WILL_FIRE_RL_stage1_1 or
	  incomingReqs_1_D_OUT or
	  WILL_FIRE_RL_idReturnRule or
	  idReturnFifo_D_OUT or EN_request_region or request_region_sglId)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_stage1_1:
	  regall_cbram_bram_ADDRB = incomingReqs_1_D_OUT[44:40];
      WILL_FIRE_RL_idReturnRule:
	  regall_cbram_bram_ADDRB = idReturnFifo_D_OUT[4:0];
      EN_request_region: regall_cbram_bram_ADDRB = request_region_sglId[4:0];
      default: regall_cbram_bram_ADDRB = 5'b01010 /* unspecified value */ ;
    endcase
  end
  assign regall_cbram_bram_DIA =
	     145'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  always@(WILL_FIRE_RL_stage1_1 or
	  WILL_FIRE_RL_idReturnRule or
	  EN_request_region or MUX_regall_cbram_bram_b_put_3__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_stage1_1:
	  regall_cbram_bram_DIB =
	      145'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_idReturnRule:
	  regall_cbram_bram_DIB = 145'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      EN_request_region:
	  regall_cbram_bram_DIB = MUX_regall_cbram_bram_b_put_3__VAL_3;
      default: regall_cbram_bram_DIB =
		   145'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign regall_cbram_bram_WEA = 1'd0 ;
  assign regall_cbram_bram_WEB = !WILL_FIRE_RL_stage1_1 ;
  assign regall_cbram_bram_ENA = regall_cbram_data0_0_whas ;
  assign regall_cbram_bram_ENB =
	     WILL_FIRE_RL_stage1_1 || WILL_FIRE_RL_idReturnRule ||
	     EN_request_region ;

  // submodule regall_cbram_responseFifo_0
  assign regall_cbram_responseFifo_0_D_IN =
	     regall_cbram_data2_0[145] ?
	       regall_cbram_data2_0[144:0] :
	       regall_cbram_bram_DOA ;
  assign regall_cbram_responseFifo_0_ENQ =
	     regall_cbram_data2_0[146] && regall_cbram_responseFifo_0_FULL_N ;
  assign regall_cbram_responseFifo_0_DEQ = WILL_FIRE_RL_stage2 ;
  assign regall_cbram_responseFifo_0_CLR = 1'b0 ;

  // submodule regall_cbram_responseFifo_1
  assign regall_cbram_responseFifo_1_D_IN =
	     regall_cbram_data2_1[145] ?
	       regall_cbram_data2_1[144:0] :
	       regall_cbram_bram_DOB ;
  assign regall_cbram_responseFifo_1_ENQ =
	     regall_cbram_data2_1[146] && regall_cbram_responseFifo_1_FULL_N ;
  assign regall_cbram_responseFifo_1_DEQ = WILL_FIRE_RL_stage2_1 ;
  assign regall_cbram_responseFifo_1_CLR = 1'b0 ;

  // submodule reqs0_0
  assign reqs0_0_D_IN = incomingReqs_0_D_OUT ;
  assign reqs0_0_ENQ = regall_cbram_data0_0_whas ;
  assign reqs0_0_DEQ = WILL_FIRE_RL_stage2 ;
  assign reqs0_0_CLR = 1'b0 ;

  // submodule reqs0_1
  assign reqs0_1_D_IN = incomingReqs_1_D_OUT ;
  assign reqs0_1_ENQ = WILL_FIRE_RL_stage1_1 ;
  assign reqs0_1_DEQ = WILL_FIRE_RL_stage2_1 ;
  assign reqs0_1_CLR = 1'b0 ;

  // submodule sglId_gen_comp_fifo
  assign sglId_gen_comp_fifo_D_IN = sglId_gen_tail_ptr ;
  assign sglId_gen_comp_fifo_ENQ = MUX_sglId_gen_comp_state_write_1__SEL_1 ;
  assign sglId_gen_comp_fifo_DEQ = sglId_gen_comp_fifo_EMPTY_N ;
  assign sglId_gen_comp_fifo_CLR = 1'b0 ;

  // submodule sglId_gen_retFifo
  assign sglId_gen_retFifo_D_IN = idReturnFifo_D_OUT[4:0] ;
  assign sglId_gen_retFifo_ENQ = WILL_FIRE_RL_idReturnRule ;
  assign sglId_gen_retFifo_DEQ = sglId_gen_retFifo_EMPTY_N ;
  assign sglId_gen_retFifo_CLR = 1'b0 ;

  // submodule sglId_gen_tagFifo
  assign sglId_gen_tagFifo_D_IN = sglId_gen_head_ptr ;
  assign sglId_gen_tagFifo_ENQ = sglId_gen_counter_dec_wire_whas ;
  assign sglId_gen_tagFifo_DEQ = EN_request_idRequest ;
  assign sglId_gen_tagFifo_CLR = 1'b0 ;

  // submodule simDma_rws_0
  assign simDma_rws_0_idreturn_id = request_idReturn_sglId ;
  assign simDma_rws_0_init_handle = { 16'd0, request_sglist_sglId[15:0] } ;
  assign simDma_rws_0_init_id = { 16'd0, request_sglist_sglId[31:16] } ;
  assign simDma_rws_0_init_size = request_sglist_len ;
  assign simDma_rws_0_initfd_fd = request_idRequest_fd ;
  assign simDma_rws_0_initfd_id =
	     { 12'd0, mmuid, 11'd0, sglId_gen_tagFifo_D_OUT } ;
  assign simDma_rws_0_readrequest_addr = 32'h0 ;
  assign simDma_rws_0_readrequest_handle = 32'h0 ;
  assign simDma_rws_0_write32_addr = 32'h0 ;
  assign simDma_rws_0_write32_byteenable = 4'h0 ;
  assign simDma_rws_0_write32_data = 32'h0 ;
  assign simDma_rws_0_write32_handle = 32'h0 ;
  assign simDma_rws_0_en_init = EN_request_sglist && hostMapped ;
  assign simDma_rws_0_en_initfd = EN_request_idRequest && hostMapped ;
  assign simDma_rws_0_en_idreturn = EN_request_idReturn && hostMapped ;
  assign simDma_rws_0_en_write32 = 1'b0 ;
  assign simDma_rws_0_en_readrequest = 1'b0 ;
  assign simDma_rws_0_en_readresponse = 1'b0 ;

  // submodule stage3Params_0
  assign stage3Params_0_D_IN =
	     { reqs0_0_D_OUT[39:24] <
	       regall_cbram_responseFifo_0_D_OUT[131:116],
	       reqs0_0_D_OUT[39:20] <
	       regall_cbram_responseFifo_0_D_OUT[99:80],
	       reqs0_0_D_OUT[39:16] <
	       regall_cbram_responseFifo_0_D_OUT[67:44],
	       reqs0_0_D_OUT[39:12] < regall_cbram_responseFifo_0_D_OUT[35:8],
	       regall_cbram_responseFifo_0_D_OUT[115:108],
	       regall_cbram_responseFifo_0_D_OUT[79:72],
	       regall_cbram_responseFifo_0_D_OUT[43:36],
	       regall_cbram_responseFifo_0_D_OUT[7:0],
	       reqs0_0_D_OUT } ;
  assign stage3Params_0_ENQ =
	     WILL_FIRE_RL_stage2 && regall_cbram_responseFifo_0_D_OUT[144] ;
  assign stage3Params_0_DEQ =
	     stage3Params_0_EMPTY_N && stage4Params_0_FULL_N ;
  assign stage3Params_0_CLR = 1'b0 ;

  // submodule stage3Params_1
  assign stage3Params_1_D_IN =
	     { reqs0_1_D_OUT[39:24] <
	       regall_cbram_responseFifo_1_D_OUT[131:116],
	       reqs0_1_D_OUT[39:20] <
	       regall_cbram_responseFifo_1_D_OUT[99:80],
	       reqs0_1_D_OUT[39:16] <
	       regall_cbram_responseFifo_1_D_OUT[67:44],
	       reqs0_1_D_OUT[39:12] < regall_cbram_responseFifo_1_D_OUT[35:8],
	       regall_cbram_responseFifo_1_D_OUT[115:108],
	       regall_cbram_responseFifo_1_D_OUT[79:72],
	       regall_cbram_responseFifo_1_D_OUT[43:36],
	       regall_cbram_responseFifo_1_D_OUT[7:0],
	       reqs0_1_D_OUT } ;
  assign stage3Params_1_ENQ =
	     WILL_FIRE_RL_stage2_1 && regall_cbram_responseFifo_1_D_OUT[144] ;
  assign stage3Params_1_DEQ =
	     stage3Params_1_EMPTY_N && stage4Params_1_FULL_N ;
  assign stage3Params_1_CLR = 1'b0 ;

  // submodule stage4Params_0
  assign stage4Params_0_D_IN =
	     { 3'd0,
	       x1_avValue_snd_snd_pageSize__h11873,
	       stage3Params_0_D_OUT[23:0],
	       x__h11896,
	       x__h11935,
	       stage3Params_0_D_OUT[44:40] } ;
  assign stage4Params_0_ENQ =
	     stage3Params_0_EMPTY_N && stage4Params_0_FULL_N ;
  assign stage4Params_0_DEQ = WILL_FIRE_RL_stage4 ;
  assign stage4Params_0_CLR = 1'b0 ;

  // submodule stage4Params_1
  assign stage4Params_1_D_IN =
	     { 3'd0,
	       x1_avValue_snd_snd_pageSize__h13919,
	       stage3Params_1_D_OUT[23:0],
	       x__h13940,
	       x__h13977,
	       stage3Params_1_D_OUT[44:40] } ;
  assign stage4Params_1_ENQ =
	     stage3Params_1_EMPTY_N && stage4Params_1_FULL_N ;
  assign stage4Params_1_DEQ = WILL_FIRE_RL_stage4_1 ;
  assign stage4Params_1_CLR = 1'b0 ;

  // submodule translationTable_cbram_bram
  assign translationTable_cbram_bram_ADDRA =
	     WILL_FIRE_RL_stage4 ?
	       MUX_translationTable_cbram_bram_a_put_2__VAL_1 :
	       MUX_translationTable_cbram_bram_a_put_2__VAL_2 ;
  assign translationTable_cbram_bram_ADDRB =
	     { stage4Params_1_D_OUT[4:0], p__h14148 } ;
  assign translationTable_cbram_bram_DIA =
	     WILL_FIRE_RL_stage4 ?
	       28'b1010101010101010101010101010 /* unspecified value */  :
	       request_sglist_addr[27:0] ;
  assign translationTable_cbram_bram_DIB =
	     28'b1010101010101010101010101010 /* unspecified value */  ;
  assign translationTable_cbram_bram_WEA = !WILL_FIRE_RL_stage4 ;
  assign translationTable_cbram_bram_WEB = 1'd0 ;
  assign translationTable_cbram_bram_ENA =
	     WILL_FIRE_RL_stage4 || EN_request_sglist ;
  assign translationTable_cbram_bram_ENB = WILL_FIRE_RL_stage4_1 ;

  // submodule translationTable_cbram_responseFifo_0
  assign translationTable_cbram_responseFifo_0_D_IN =
	     translationTable_cbram_data2_0[28] ?
	       translationTable_cbram_data2_0[27:0] :
	       translationTable_cbram_bram_DOA ;
  assign translationTable_cbram_responseFifo_0_ENQ =
	     translationTable_cbram_data2_0[29] &&
	     translationTable_cbram_responseFifo_0_FULL_N ;
  assign translationTable_cbram_responseFifo_0_DEQ =
	     translationTable_cbram_counter_0_inc_wire_whas ;
  assign translationTable_cbram_responseFifo_0_CLR = 1'b0 ;

  // submodule translationTable_cbram_responseFifo_1
  assign translationTable_cbram_responseFifo_1_D_IN =
	     translationTable_cbram_data2_1[28] ?
	       translationTable_cbram_data2_1[27:0] :
	       translationTable_cbram_bram_DOB ;
  assign translationTable_cbram_responseFifo_1_ENQ =
	     translationTable_cbram_data2_1[29] &&
	     translationTable_cbram_responseFifo_1_FULL_N ;
  assign translationTable_cbram_responseFifo_1_DEQ =
	     translationTable_cbram_counter_1_inc_wire_whas ;
  assign translationTable_cbram_responseFifo_1_CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_0_CONCAT_mmuid_41_EQ_request_sglist_sglId__ETC___d444 =
	     { 12'd0, mmuid } != request_sglist_sglId[31:16] ;
  assign p__h12000 =
	     stage4Params_0_D_OUT[20:13] + stage4Params_0_D_OUT[12:5] ;
  assign p__h12108 =
	     (stage4Params_0_D_OUT[47:45] == 3'd0) ? 8'd0 : p__h12000 ;
  assign p__h14042 =
	     stage4Params_1_D_OUT[20:13] + stage4Params_1_D_OUT[12:5] ;
  assign p__h14148 =
	     (stage4Params_1_D_OUT[47:45] == 3'd0) ? 8'd0 : p__h14042 ;
  assign regall_cbram_counter_0_cnt_4_PLUS_IF_regall_cb_ETC___d52 =
	     regall_cbram_counter_0_cnt +
	     (WILL_FIRE_RL_stage2 ? 2'd1 : 2'd0) -
	     (regall_cbram_data0_0_whas ? 2'd1 : 2'd0) ;
  assign regall_cbram_counter_1_cnt_5_PLUS_IF_regall_cb_ETC___d63 =
	     regall_cbram_counter_1_cnt +
	     (WILL_FIRE_RL_stage2_1 ? 2'd1 : 2'd0) -
	     (WILL_FIRE_RL_stage1_1 ? 2'd1 : 2'd0) ;
  assign regall_cbram_responseFifo_0_i_notEmpty__88_AND_ETC___d194 =
	     regall_cbram_responseFifo_0_EMPTY_N &&
	     (regall_cbram_responseFifo_0_D_OUT[144] ?
		stage3Params_0_FULL_N :
		dmaErrorFifos_0_FULL_N) ;
  assign regall_cbram_responseFifo_1_i_notEmpty__16_AND_ETC___d321 =
	     regall_cbram_responseFifo_1_EMPTY_N &&
	     (regall_cbram_responseFifo_1_D_OUT[144] ?
		stage3Params_1_FULL_N :
		dmaErrorFifos_0_FULL_N) ;
  assign rv__h12778 =
	     { translationTable_cbram_responseFifo_0_D_OUT,
	       offs1_0_D_OUT[11:0] } ;
  assign rv__h12788 =
	     { translationTable_cbram_responseFifo_0_D_OUT[23:0],
	       offs1_0_D_OUT[15:0] } ;
  assign rv__h12800 =
	     { translationTable_cbram_responseFifo_0_D_OUT[19:0],
	       offs1_0_D_OUT[19:0] } ;
  assign rv__h12812 =
	     { translationTable_cbram_responseFifo_0_D_OUT[15:0],
	       offs1_0_D_OUT[23:0] } ;
  assign rv__h14548 =
	     { translationTable_cbram_responseFifo_1_D_OUT,
	       offs1_1_D_OUT[11:0] } ;
  assign rv__h14558 =
	     { translationTable_cbram_responseFifo_1_D_OUT[23:0],
	       offs1_1_D_OUT[15:0] } ;
  assign rv__h14570 =
	     { translationTable_cbram_responseFifo_1_D_OUT[19:0],
	       offs1_1_D_OUT[19:0] } ;
  assign rv__h14582 =
	     { translationTable_cbram_responseFifo_1_D_OUT[15:0],
	       offs1_1_D_OUT[23:0] } ;
  assign sglId_gen_counter_cnt_PLUS_IF_sglId_gen_counte_ETC___d9 =
	     sglId_gen_counter_cnt +
	     (MUX_sglId_gen_comp_state_write_1__SEL_1 ? 6'd1 : 6'd0) -
	     (sglId_gen_counter_dec_wire_whas ? 6'd1 : 6'd0) ;
  assign sglId_gen_tags_port1__read__2_BIT_sglId_gen_ta_ETC___d14 =
	     t__h1387[sglId_gen_tail_ptr] ;
  assign t__h1387 =
	     sglId_gen_retFifo_EMPTY_N ?
	       sglId_gen_tags_port0__write_1 :
	       sglId_gen_tags ;
  assign translationTable_cbram_counter_0_cnt_08_PLUS_I_ETC___d116 =
	     translationTable_cbram_counter_0_cnt +
	     (translationTable_cbram_counter_0_inc_wire_whas ? 2'd1 : 2'd0) -
	     (WILL_FIRE_RL_stage4 ? 2'd1 : 2'd0) ;
  assign translationTable_cbram_counter_1_cnt_19_PLUS_I_ETC___d127 =
	     translationTable_cbram_counter_1_cnt +
	     (translationTable_cbram_counter_1_inc_wire_whas ? 2'd1 : 2'd0) -
	     (WILL_FIRE_RL_stage4_1 ? 2'd1 : 2'd0) ;
  assign x1_avValue_snd_snd_pageSize__h11864 =
	     stage3Params_0_D_OUT[77] ? 3'd1 : 3'd0 ;
  assign x1_avValue_snd_snd_pageSize__h11867 =
	     stage3Params_0_D_OUT[78] ?
	       3'd2 :
	       x1_avValue_snd_snd_pageSize__h11864 ;
  assign x1_avValue_snd_snd_pageSize__h11870 =
	     stage3Params_0_D_OUT[79] ?
	       3'd3 :
	       x1_avValue_snd_snd_pageSize__h11867 ;
  assign x1_avValue_snd_snd_pageSize__h11873 =
	     stage3Params_0_D_OUT[80] ?
	       3'd4 :
	       x1_avValue_snd_snd_pageSize__h11870 ;
  assign x1_avValue_snd_snd_pageSize__h13910 =
	     stage3Params_1_D_OUT[77] ? 3'd1 : 3'd0 ;
  assign x1_avValue_snd_snd_pageSize__h13913 =
	     stage3Params_1_D_OUT[78] ?
	       3'd2 :
	       x1_avValue_snd_snd_pageSize__h13910 ;
  assign x1_avValue_snd_snd_pageSize__h13916 =
	     stage3Params_1_D_OUT[79] ?
	       3'd3 :
	       x1_avValue_snd_snd_pageSize__h13913 ;
  assign x1_avValue_snd_snd_pageSize__h13919 =
	     stage3Params_1_D_OUT[80] ?
	       3'd4 :
	       x1_avValue_snd_snd_pageSize__h13916 ;
  assign x__h11896 =
	     stage3Params_0_D_OUT[80] ?
	       stage3Params_0_D_OUT[31:24] :
	       y_avValue_snd_fst__h11823 ;
  assign x__h11935 =
	     stage3Params_0_D_OUT[80] ?
	       stage3Params_0_D_OUT[76:69] :
	       y_avValue_fst__h11716 ;
  assign x__h1246 = 32'd1 << sglId_gen_retFifo_D_OUT ;
  assign x__h13940 =
	     stage3Params_1_D_OUT[80] ?
	       stage3Params_1_D_OUT[31:24] :
	       y_avValue_snd_fst__h13869 ;
  assign x__h13977 =
	     stage3Params_1_D_OUT[80] ?
	       stage3Params_1_D_OUT[76:69] :
	       y_avValue_fst__h13835 ;
  assign x__h1414 = 32'd1 << sglId_gen_head_ptr ;
  assign x__h16099 = pageResponseFifos_0_D_OUT[39:0] | y__h16252 ;
  assign x__h16239 = pageResponseFifos_1_D_OUT[39:0] | y__h16252 ;
  assign x_off__h12070 = { 16'd0, stage4Params_0_D_OUT[44:21] } ;
  assign x_off__h14110 = { 16'd0, stage4Params_1_D_OUT[44:21] } ;
  assign x_pref__h12069 = { 27'd0, stage4Params_0_D_OUT[4:0] } ;
  assign x_pref__h14109 = { 27'd0, stage4Params_1_D_OUT[4:0] } ;
  assign y__h1266 = ~x__h1246 ;
  assign y__h16252 = { mmuid[2:0], 37'd0 } ;
  assign y_avValue_fst__h11680 =
	     stage3Params_0_D_OUT[77] ? stage3Params_0_D_OUT[52:45] : 8'd0 ;
  assign y_avValue_fst__h11698 =
	     stage3Params_0_D_OUT[78] ?
	       stage3Params_0_D_OUT[60:53] :
	       y_avValue_fst__h11680 ;
  assign y_avValue_fst__h11716 =
	     stage3Params_0_D_OUT[79] ?
	       stage3Params_0_D_OUT[68:61] :
	       y_avValue_fst__h11698 ;
  assign y_avValue_fst__h13799 =
	     stage3Params_1_D_OUT[77] ? stage3Params_1_D_OUT[52:45] : 8'd0 ;
  assign y_avValue_fst__h13817 =
	     stage3Params_1_D_OUT[78] ?
	       stage3Params_1_D_OUT[60:53] :
	       y_avValue_fst__h13799 ;
  assign y_avValue_fst__h13835 =
	     stage3Params_1_D_OUT[79] ?
	       stage3Params_1_D_OUT[68:61] :
	       y_avValue_fst__h13817 ;
  assign y_avValue_snd_fst__h11823 =
	     stage3Params_0_D_OUT[79] ?
	       stage3Params_0_D_OUT[27:20] :
	       y_avValue_snd_fst__h11833 ;
  assign y_avValue_snd_fst__h11833 =
	     stage3Params_0_D_OUT[78] ?
	       stage3Params_0_D_OUT[23:16] :
	       y_avValue_snd_fst__h11843 ;
  assign y_avValue_snd_fst__h11843 =
	     stage3Params_0_D_OUT[77] ? stage3Params_0_D_OUT[19:12] : 8'd0 ;
  assign y_avValue_snd_fst__h13869 =
	     stage3Params_1_D_OUT[79] ?
	       stage3Params_1_D_OUT[27:20] :
	       y_avValue_snd_fst__h13879 ;
  assign y_avValue_snd_fst__h13879 =
	     stage3Params_1_D_OUT[78] ?
	       stage3Params_1_D_OUT[23:16] :
	       y_avValue_snd_fst__h13889 ;
  assign y_avValue_snd_fst__h13889 =
	     stage3Params_1_D_OUT[77] ? stage3Params_1_D_OUT[19:12] : 8'd0 ;
  always@(offs1_0_D_OUT or
	  rv__h12812 or rv__h12778 or rv__h12788 or rv__h12800)
  begin
    case (offs1_0_D_OUT[26:24])
      3'd1: x_physAddr__h12757 = rv__h12778;
      3'd2: x_physAddr__h12757 = rv__h12788;
      3'd3: x_physAddr__h12757 = rv__h12800;
      default: x_physAddr__h12757 = rv__h12812;
    endcase
  end
  always@(offs1_1_D_OUT or
	  rv__h14582 or rv__h14548 or rv__h14558 or rv__h14570)
  begin
    case (offs1_1_D_OUT[26:24])
      3'd1: x_physAddr__h14527 = rv__h14548;
      3'd2: x_physAddr__h14527 = rv__h14558;
      3'd3: x_physAddr__h14527 = rv__h14570;
      default: x_physAddr__h14527 = rv__h14582;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        regall_cbram_counter_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd2;
	regall_cbram_counter_0_positive_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	regall_cbram_counter_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd2;
	regall_cbram_counter_1_positive_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	regall_cbram_cycles <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regall_cbram_data1_0 <= `BSV_ASSIGNMENT_DELAY
	    147'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	regall_cbram_data1_1 <= `BSV_ASSIGNMENT_DELAY
	    147'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	regall_cbram_data2_0 <= `BSV_ASSIGNMENT_DELAY
	    147'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	regall_cbram_data2_1 <= `BSV_ASSIGNMENT_DELAY
	    147'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	sglId_gen_comp_state <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sglId_gen_counter_cnt <= `BSV_ASSIGNMENT_DELAY 6'd32;
	sglId_gen_counter_positive_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sglId_gen_head_ptr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	sglId_gen_inited <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sglId_gen_tags <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sglId_gen_tail_ptr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	translationTable_cbram_counter_0_cnt <= `BSV_ASSIGNMENT_DELAY 2'd2;
	translationTable_cbram_counter_0_positive_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	translationTable_cbram_counter_1_cnt <= `BSV_ASSIGNMENT_DELAY 2'd2;
	translationTable_cbram_counter_1_positive_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	translationTable_cbram_cycles <= `BSV_ASSIGNMENT_DELAY 32'd0;
	translationTable_cbram_data1_0 <= `BSV_ASSIGNMENT_DELAY 30'd178956970;
	translationTable_cbram_data1_1 <= `BSV_ASSIGNMENT_DELAY 30'd178956970;
	translationTable_cbram_data2_0 <= `BSV_ASSIGNMENT_DELAY 30'd178956970;
	translationTable_cbram_data2_1 <= `BSV_ASSIGNMENT_DELAY 30'd178956970;
      end
    else
      begin
        if (regall_cbram_counter_0_cnt_EN)
	  regall_cbram_counter_0_cnt <= `BSV_ASSIGNMENT_DELAY
	      regall_cbram_counter_0_cnt_D_IN;
	if (regall_cbram_counter_0_positive_reg_EN)
	  regall_cbram_counter_0_positive_reg <= `BSV_ASSIGNMENT_DELAY
	      regall_cbram_counter_0_positive_reg_D_IN;
	if (regall_cbram_counter_1_cnt_EN)
	  regall_cbram_counter_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      regall_cbram_counter_1_cnt_D_IN;
	if (regall_cbram_counter_1_positive_reg_EN)
	  regall_cbram_counter_1_positive_reg <= `BSV_ASSIGNMENT_DELAY
	      regall_cbram_counter_1_positive_reg_D_IN;
	if (regall_cbram_cycles_EN)
	  regall_cbram_cycles <= `BSV_ASSIGNMENT_DELAY
	      regall_cbram_cycles_D_IN;
	if (regall_cbram_data1_0_EN)
	  regall_cbram_data1_0 <= `BSV_ASSIGNMENT_DELAY
	      regall_cbram_data1_0_D_IN;
	if (regall_cbram_data1_1_EN)
	  regall_cbram_data1_1 <= `BSV_ASSIGNMENT_DELAY
	      regall_cbram_data1_1_D_IN;
	if (regall_cbram_data2_0_EN)
	  regall_cbram_data2_0 <= `BSV_ASSIGNMENT_DELAY
	      regall_cbram_data2_0_D_IN;
	if (regall_cbram_data2_1_EN)
	  regall_cbram_data2_1 <= `BSV_ASSIGNMENT_DELAY
	      regall_cbram_data2_1_D_IN;
	if (sglId_gen_comp_state_EN)
	  sglId_gen_comp_state <= `BSV_ASSIGNMENT_DELAY
	      sglId_gen_comp_state_D_IN;
	if (sglId_gen_counter_cnt_EN)
	  sglId_gen_counter_cnt <= `BSV_ASSIGNMENT_DELAY
	      sglId_gen_counter_cnt_D_IN;
	if (sglId_gen_counter_positive_reg_EN)
	  sglId_gen_counter_positive_reg <= `BSV_ASSIGNMENT_DELAY
	      sglId_gen_counter_positive_reg_D_IN;
	if (sglId_gen_head_ptr_EN)
	  sglId_gen_head_ptr <= `BSV_ASSIGNMENT_DELAY sglId_gen_head_ptr_D_IN;
	if (sglId_gen_inited_EN)
	  sglId_gen_inited <= `BSV_ASSIGNMENT_DELAY sglId_gen_inited_D_IN;
	if (sglId_gen_tags_EN)
	  sglId_gen_tags <= `BSV_ASSIGNMENT_DELAY sglId_gen_tags_D_IN;
	if (sglId_gen_tail_ptr_EN)
	  sglId_gen_tail_ptr <= `BSV_ASSIGNMENT_DELAY sglId_gen_tail_ptr_D_IN;
	if (translationTable_cbram_counter_0_cnt_EN)
	  translationTable_cbram_counter_0_cnt <= `BSV_ASSIGNMENT_DELAY
	      translationTable_cbram_counter_0_cnt_D_IN;
	if (translationTable_cbram_counter_0_positive_reg_EN)
	  translationTable_cbram_counter_0_positive_reg <= `BSV_ASSIGNMENT_DELAY
	      translationTable_cbram_counter_0_positive_reg_D_IN;
	if (translationTable_cbram_counter_1_cnt_EN)
	  translationTable_cbram_counter_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      translationTable_cbram_counter_1_cnt_D_IN;
	if (translationTable_cbram_counter_1_positive_reg_EN)
	  translationTable_cbram_counter_1_positive_reg <= `BSV_ASSIGNMENT_DELAY
	      translationTable_cbram_counter_1_positive_reg_D_IN;
	if (translationTable_cbram_cycles_EN)
	  translationTable_cbram_cycles <= `BSV_ASSIGNMENT_DELAY
	      translationTable_cbram_cycles_D_IN;
	if (translationTable_cbram_data1_0_EN)
	  translationTable_cbram_data1_0 <= `BSV_ASSIGNMENT_DELAY
	      translationTable_cbram_data1_0_D_IN;
	if (translationTable_cbram_data1_1_EN)
	  translationTable_cbram_data1_1 <= `BSV_ASSIGNMENT_DELAY
	      translationTable_cbram_data1_1_D_IN;
	if (translationTable_cbram_data2_0_EN)
	  translationTable_cbram_data2_0 <= `BSV_ASSIGNMENT_DELAY
	      translationTable_cbram_data2_0_D_IN;
	if (translationTable_cbram_data2_1_EN)
	  translationTable_cbram_data2_1 <= `BSV_ASSIGNMENT_DELAY
	      translationTable_cbram_data2_1_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    regall_cbram_counter_0_cnt = 2'h2;
    regall_cbram_counter_0_positive_reg = 1'h0;
    regall_cbram_counter_1_cnt = 2'h2;
    regall_cbram_counter_1_positive_reg = 1'h0;
    regall_cbram_cycles = 32'hAAAAAAAA;
    regall_cbram_data1_0 = 147'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    regall_cbram_data1_1 = 147'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    regall_cbram_data2_0 = 147'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    regall_cbram_data2_1 = 147'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    sglId_gen_comp_state = 32'hAAAAAAAA;
    sglId_gen_counter_cnt = 6'h2A;
    sglId_gen_counter_positive_reg = 1'h0;
    sglId_gen_head_ptr = 5'h0A;
    sglId_gen_inited = 1'h0;
    sglId_gen_tags = 32'hAAAAAAAA;
    sglId_gen_tail_ptr = 5'h0A;
    translationTable_cbram_counter_0_cnt = 2'h2;
    translationTable_cbram_counter_0_positive_reg = 1'h0;
    translationTable_cbram_counter_1_cnt = 2'h2;
    translationTable_cbram_counter_1_positive_reg = 1'h0;
    translationTable_cbram_cycles = 32'hAAAAAAAA;
    translationTable_cbram_data1_0 = 30'h2AAAAAAA;
    translationTable_cbram_data1_1 = 30'h2AAAAAAA;
    translationTable_cbram_data2_0 = 30'h2AAAAAAA;
    translationTable_cbram_data2_1 = 30'h2AAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_request_sglist &&
	  NOT_0_CONCAT_mmuid_41_EQ_request_sglist_sglId__ETC___d444)
	$display("mkMMU::sglist ERROR");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_request_sglist &&
	  NOT_0_CONCAT_mmuid_41_EQ_request_sglist_sglId__ETC___d444)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_idReturnRule)
	$display("idReturn %d", idReturnFifo_D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (regall_cbram_data2_0[146] && !regall_cbram_responseFifo_0_FULL_N)
	$display("Error: responseFifo is unexpectedly full");
    if (RST_N != `BSV_RESET_VALUE)
      if (regall_cbram_data2_1[146] && !regall_cbram_responseFifo_1_FULL_N)
	$display("Error: responseFifo is unexpectedly full");
    if (RST_N != `BSV_RESET_VALUE)
      if (translationTable_cbram_data2_0[29] &&
	  !translationTable_cbram_responseFifo_0_FULL_N)
	$display("Error: responseFifo is unexpectedly full");
    if (RST_N != `BSV_RESET_VALUE)
      if (translationTable_cbram_data2_1[29] &&
	  !translationTable_cbram_responseFifo_1_FULL_N)
	$display("Error: responseFifo is unexpectedly full");
  end
  // synopsys translate_on
endmodule  // mkMMUSynth

