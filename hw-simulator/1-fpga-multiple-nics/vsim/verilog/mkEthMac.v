//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule tx  CF ( tx, rx, packet_tx_put, packet_rx_get );
//
// schedule rx  CF ( tx, rx, packet_tx_put, packet_rx_get );
//
// schedule packet_tx_put  CF ( tx, rx, packet_rx_get );
// schedule packet_tx_put  C ( packet_tx_put );
//
// schedule packet_rx_get  CF ( tx, rx, packet_tx_put );
// schedule packet_rx_get  C ( packet_rx_get );
//
//
// Ports:
// Name                         I/O  size props
// tx                             O    72
// RDY_packet_tx_put              O     1
// packet_rx_get                  O    74 reg
// RDY_packet_rx_get              O     1 reg
// CLK_clk_50                     I     1 clock
// CLK_clk_156_25                 I     1 clock
// CLK_rx_clk                     I     1 clock
// RST_N_rst_156_25_n             I     1 reset
// CLK                            I     1 unused
// RST_N                          I     1 reset
// rx_v                           I    72
// packet_tx_put                  I    74
// EN_packet_tx_put               I     1
// EN_packet_rx_get               I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkEthMac(CLK_clk_50,
		CLK_clk_156_25,
		CLK_rx_clk,
		RST_N_rst_156_25_n,
		CLK,
		RST_N,

		tx,

		rx_v,

		packet_tx_put,
		EN_packet_tx_put,
		RDY_packet_tx_put,

		EN_packet_rx_get,
		packet_rx_get,
		RDY_packet_rx_get);
  input  CLK_clk_50;
  input  CLK_clk_156_25;
  input  CLK_rx_clk;
  input  RST_N_rst_156_25_n;
  input  CLK;
  input  RST_N;

  // value method tx
  output [71 : 0] tx;

  // action method rx
  input  [71 : 0] rx_v;

  // action method packet_tx_put
  input  [73 : 0] packet_tx_put;
  input  EN_packet_tx_put;
  output RDY_packet_tx_put;

  // actionvalue method packet_rx_get
  input  EN_packet_rx_get;
  output [73 : 0] packet_rx_get;
  output RDY_packet_rx_get;

  // signals for module outputs
  wire [73 : 0] packet_rx_get;
  wire [71 : 0] tx;
  wire RDY_packet_rx_get, RDY_packet_tx_put;

  // inlined wires
  wire [64 : 0] tx_data_w_wget;

  // ports of submodule mac
  wire [71 : 0] mac_xgmii_rx_data, mac_xgmii_tx_data;
  wire [63 : 0] mac_rx_sc_fifo_out_data, mac_tx_sc_fifo_in_data;
  wire [31 : 0] mac_mm_pipeline_bridge_writedata;
  wire [16 : 0] mac_mm_pipeline_bridge_address;
  wire [2 : 0] mac_rx_sc_fifo_out_empty, mac_tx_sc_fifo_in_empty;
  wire mac_mm_pipeline_bridge_read,
       mac_mm_pipeline_bridge_write,
       mac_rx_sc_fifo_out_endofpacket,
       mac_rx_sc_fifo_out_ready,
       mac_rx_sc_fifo_out_startofpacket,
       mac_rx_sc_fifo_out_valid,
       mac_tx_sc_fifo_in_endofpacket,
       mac_tx_sc_fifo_in_error,
       mac_tx_sc_fifo_in_ready,
       mac_tx_sc_fifo_in_startofpacket,
       mac_tx_sc_fifo_in_valid;

  // ports of submodule rst_50_n
  wire rst_50_n_OUT_RST;

  // ports of submodule rx_fifo
  wire [73 : 0] rx_fifo_D_IN, rx_fifo_D_OUT;
  wire rx_fifo_CLR, rx_fifo_DEQ, rx_fifo_EMPTY_N, rx_fifo_ENQ, rx_fifo_FULL_N;

  // ports of submodule rx_rst_n
  wire rx_rst_n_OUT_RST;

  // remaining internal signals
  wire [7 : 0] _255_MINUS_packet_tx_put_BITS_9_TO_2_5___d36, x_mask__h1039;
  wire [3 : 0] x__h1214,
	       x__h1230,
	       x__h1242,
	       x__h1254,
	       x__h1266,
	       x__h1278,
	       x__h1290,
	       x__h1302,
	       y__h1231,
	       y__h1243,
	       y__h1255,
	       y__h1267,
	       y__h1279,
	       y__h1291,
	       y__h1303;
  wire [2 : 0] x__h1056;

  // value method tx
  assign tx = mac_xgmii_tx_data ;

  // action method packet_tx_put
  assign RDY_packet_tx_put = mac_tx_sc_fifo_in_ready ;

  // actionvalue method packet_rx_get
  assign packet_rx_get = rx_fifo_D_OUT ;
  assign RDY_packet_rx_get = rx_fifo_EMPTY_N ;

  // submodule mac
  mac_10gbe mac(.mm_clk_clk(CLK_clk_50),
		.mm_reset_reset_n(rst_50_n_OUT_RST),
		.rx_clk_clk(CLK_rx_clk),
		.rx_reset_reset_n(rx_rst_n_OUT_RST),
		.tx_clk_clk(CLK_clk_156_25),
		.tx_reset_reset_n(RST_N_rst_156_25_n),
		.mm_pipeline_bridge_address(mac_mm_pipeline_bridge_address),
		.mm_pipeline_bridge_read(mac_mm_pipeline_bridge_read),
		.mm_pipeline_bridge_write(mac_mm_pipeline_bridge_write),
		.mm_pipeline_bridge_writedata(mac_mm_pipeline_bridge_writedata),
		.rx_sc_fifo_out_ready(mac_rx_sc_fifo_out_ready),
		.tx_sc_fifo_in_data(mac_tx_sc_fifo_in_data),
		.tx_sc_fifo_in_empty(mac_tx_sc_fifo_in_empty),
		.tx_sc_fifo_in_endofpacket(mac_tx_sc_fifo_in_endofpacket),
		.tx_sc_fifo_in_error(mac_tx_sc_fifo_in_error),
		.tx_sc_fifo_in_startofpacket(mac_tx_sc_fifo_in_startofpacket),
		.tx_sc_fifo_in_valid(mac_tx_sc_fifo_in_valid),
		.xgmii_rx_data(mac_xgmii_rx_data),
		.link_fault_status_xgmii_rx_data(),
		.rx_sc_fifo_out_data(mac_rx_sc_fifo_out_data),
		.rx_sc_fifo_out_empty(mac_rx_sc_fifo_out_empty),
		.rx_sc_fifo_out_endofpacket(mac_rx_sc_fifo_out_endofpacket),
		.rx_sc_fifo_out_error(),
		.rx_sc_fifo_out_startofpacket(mac_rx_sc_fifo_out_startofpacket),
		.rx_sc_fifo_out_valid(mac_rx_sc_fifo_out_valid),
		.tx_sc_fifo_in_ready(mac_tx_sc_fifo_in_ready),
		.avalon_st_rxstatus_data(),
		.avalon_st_rxstatus_error(),
		.avalon_st_rxstatus_valid(),
		.avalon_st_txstatus_data(),
		.avalon_st_txstatus_error(),
		.avalon_st_txstatus_valid(),
		.xgmii_tx_data(mac_xgmii_tx_data),
		.mm_pipeline_bridge_waitrequest(),
		.mm_pipeline_bridge_readdata());

  // submodule rst_50_n
  SyncResetA #(.RSTDELAY(32'd1)) rst_50_n(.CLK(CLK_clk_50),
					  .IN_RST(RST_N),
					  .OUT_RST(rst_50_n_OUT_RST));

  // submodule rx_fifo
  FIFO2 #(.width(32'd74), .guarded(1'd1)) rx_fifo(.RST(rx_rst_n_OUT_RST),
						  .CLK(CLK_rx_clk),
						  .D_IN(rx_fifo_D_IN),
						  .ENQ(rx_fifo_ENQ),
						  .DEQ(rx_fifo_DEQ),
						  .CLR(rx_fifo_CLR),
						  .D_OUT(rx_fifo_D_OUT),
						  .FULL_N(rx_fifo_FULL_N),
						  .EMPTY_N(rx_fifo_EMPTY_N));

  // submodule rx_rst_n
  SyncResetA #(.RSTDELAY(32'd1)) rx_rst_n(.CLK(CLK_rx_clk),
					  .IN_RST(RST_N_rst_156_25_n),
					  .OUT_RST(rx_rst_n_OUT_RST));

  // inlined wires
  assign tx_data_w_wget = { 1'd1, packet_tx_put[73:10] } ;

  // submodule mac
  assign mac_mm_pipeline_bridge_address = 17'h0 ;
  assign mac_mm_pipeline_bridge_read = 1'b0 ;
  assign mac_mm_pipeline_bridge_write = 1'b0 ;
  assign mac_mm_pipeline_bridge_writedata = 32'h0 ;
  assign mac_rx_sc_fifo_out_ready = rx_fifo_FULL_N ;
  assign mac_tx_sc_fifo_in_data =
	     (!EN_packet_tx_put || !tx_data_w_wget[64]) ?
	       64'd0 :
	       tx_data_w_wget[63:0] ;
  assign mac_tx_sc_fifo_in_empty = EN_packet_tx_put ? x__h1214[2:0] : 3'd0 ;
  assign mac_tx_sc_fifo_in_endofpacket =
	     EN_packet_tx_put && packet_tx_put[0] ;
  assign mac_tx_sc_fifo_in_error = 1'b0 ;
  assign mac_tx_sc_fifo_in_startofpacket =
	     EN_packet_tx_put && packet_tx_put[1] ;
  assign mac_tx_sc_fifo_in_valid = EN_packet_tx_put && tx_data_w_wget[64] ;
  assign mac_xgmii_rx_data = rx_v ;

  // submodule rx_fifo
  assign rx_fifo_D_IN =
	     { mac_rx_sc_fifo_out_data,
	       x_mask__h1039,
	       mac_rx_sc_fifo_out_startofpacket,
	       mac_rx_sc_fifo_out_endofpacket } ;
  assign rx_fifo_ENQ =
	     (!mac_rx_sc_fifo_out_valid || rx_fifo_FULL_N) &&
	     mac_rx_sc_fifo_out_valid ;
  assign rx_fifo_DEQ = EN_packet_rx_get ;
  assign rx_fifo_CLR = 1'b0 ;

  // remaining internal signals
  assign _255_MINUS_packet_tx_put_BITS_9_TO_2_5___d36 =
	     8'd255 - packet_tx_put[9:2] ;
  assign x__h1056 = mac_rx_sc_fifo_out_empty - 3'd1 ;
  assign x__h1214 = x__h1230 + y__h1231 ;
  assign x__h1230 = x__h1242 + y__h1243 ;
  assign x__h1242 = x__h1254 + y__h1255 ;
  assign x__h1254 = x__h1266 + y__h1267 ;
  assign x__h1266 = x__h1278 + y__h1279 ;
  assign x__h1278 = x__h1290 + y__h1291 ;
  assign x__h1290 = x__h1302 + y__h1303 ;
  assign x__h1302 =
	     { 3'd0, _255_MINUS_packet_tx_put_BITS_9_TO_2_5___d36[7] } ;
  assign x_mask__h1039 = 8'd1 << x__h1056 ;
  assign y__h1231 =
	     { 3'd0, _255_MINUS_packet_tx_put_BITS_9_TO_2_5___d36[0] } ;
  assign y__h1243 =
	     { 3'd0, _255_MINUS_packet_tx_put_BITS_9_TO_2_5___d36[1] } ;
  assign y__h1255 =
	     { 3'd0, _255_MINUS_packet_tx_put_BITS_9_TO_2_5___d36[2] } ;
  assign y__h1267 =
	     { 3'd0, _255_MINUS_packet_tx_put_BITS_9_TO_2_5___d36[3] } ;
  assign y__h1279 =
	     { 3'd0, _255_MINUS_packet_tx_put_BITS_9_TO_2_5___d36[4] } ;
  assign y__h1291 =
	     { 3'd0, _255_MINUS_packet_tx_put_BITS_9_TO_2_5___d36[5] } ;
  assign y__h1303 =
	     { 3'd0, _255_MINUS_packet_tx_put_BITS_9_TO_2_5___d36[6] } ;
endmodule  // mkEthMac

