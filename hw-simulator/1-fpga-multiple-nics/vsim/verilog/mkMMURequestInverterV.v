//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_sglist  CF ( ifc_sglist,
// 			  ifc_region,
// 			  ifc_idRequest,
// 			  ifc_idReturn,
// 			  ifc_setInterface,
// 			  inverseIfc_sglist,
// 			  inverseIfc_region,
// 			  inverseIfc_idRequest,
// 			  inverseIfc_idReturn,
// 			  inverseIfc_setInterface );
//
// schedule ifc_region  CF ( ifc_sglist,
// 			  ifc_region,
// 			  ifc_idRequest,
// 			  ifc_idReturn,
// 			  ifc_setInterface,
// 			  inverseIfc_sglist,
// 			  inverseIfc_region,
// 			  inverseIfc_idRequest,
// 			  inverseIfc_idReturn,
// 			  inverseIfc_setInterface );
//
// schedule ifc_idRequest  CF ( ifc_sglist,
// 			     ifc_region,
// 			     ifc_idRequest,
// 			     ifc_idReturn,
// 			     ifc_setInterface,
// 			     inverseIfc_sglist,
// 			     inverseIfc_region,
// 			     inverseIfc_idRequest,
// 			     inverseIfc_idReturn,
// 			     inverseIfc_setInterface );
//
// schedule ifc_idReturn  CF ( ifc_sglist,
// 			    ifc_region,
// 			    ifc_idRequest,
// 			    ifc_idReturn,
// 			    ifc_setInterface,
// 			    inverseIfc_sglist,
// 			    inverseIfc_region,
// 			    inverseIfc_idRequest,
// 			    inverseIfc_idReturn,
// 			    inverseIfc_setInterface );
//
// schedule ifc_setInterface  CF ( ifc_sglist,
// 				ifc_region,
// 				ifc_idRequest,
// 				ifc_idReturn,
// 				ifc_setInterface,
// 				inverseIfc_sglist,
// 				inverseIfc_region,
// 				inverseIfc_idRequest,
// 				inverseIfc_idReturn,
// 				inverseIfc_setInterface );
//
// schedule inverseIfc_sglist  CF ( ifc_sglist,
// 				 ifc_region,
// 				 ifc_idRequest,
// 				 ifc_idReturn,
// 				 ifc_setInterface,
// 				 inverseIfc_sglist,
// 				 inverseIfc_region,
// 				 inverseIfc_idRequest,
// 				 inverseIfc_idReturn,
// 				 inverseIfc_setInterface );
//
// schedule inverseIfc_region  CF ( ifc_sglist,
// 				 ifc_region,
// 				 ifc_idRequest,
// 				 ifc_idReturn,
// 				 ifc_setInterface,
// 				 inverseIfc_sglist,
// 				 inverseIfc_region,
// 				 inverseIfc_idRequest,
// 				 inverseIfc_idReturn,
// 				 inverseIfc_setInterface );
//
// schedule inverseIfc_idRequest  CF ( ifc_sglist,
// 				    ifc_region,
// 				    ifc_idRequest,
// 				    ifc_idReturn,
// 				    ifc_setInterface,
// 				    inverseIfc_sglist,
// 				    inverseIfc_region,
// 				    inverseIfc_idRequest,
// 				    inverseIfc_idReturn,
// 				    inverseIfc_setInterface );
//
// schedule inverseIfc_idReturn  CF ( ifc_sglist,
// 				   ifc_region,
// 				   ifc_idRequest,
// 				   ifc_idReturn,
// 				   ifc_setInterface,
// 				   inverseIfc_sglist,
// 				   inverseIfc_region,
// 				   inverseIfc_idRequest,
// 				   inverseIfc_idReturn,
// 				   inverseIfc_setInterface );
//
// schedule inverseIfc_setInterface  CF ( ifc_sglist,
// 				       ifc_region,
// 				       ifc_idRequest,
// 				       ifc_idReturn,
// 				       ifc_setInterface,
// 				       inverseIfc_sglist,
// 				       inverseIfc_region,
// 				       inverseIfc_idRequest,
// 				       inverseIfc_idReturn,
// 				       inverseIfc_setInterface );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_sglist                 O     1
// RDY_ifc_region                 O     1
// RDY_ifc_idRequest              O     1
// RDY_ifc_idReturn               O     1
// RDY_ifc_setInterface           O     1
// inverseIfc_sglist              O   160
// RDY_inverseIfc_sglist          O     1
// inverseIfc_region              O   416
// RDY_inverseIfc_region          O     1
// inverseIfc_idRequest           O    32
// RDY_inverseIfc_idRequest       O     1
// inverseIfc_idReturn            O    32
// RDY_inverseIfc_idReturn        O     1
// inverseIfc_setInterface        O    64
// RDY_inverseIfc_setInterface    O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_sglist_sglId               I    32
// ifc_sglist_sglIndex            I    32
// ifc_sglist_addr                I    64
// ifc_sglist_len                 I    32
// ifc_region_sglId               I    32
// ifc_region_barr12              I    64
// ifc_region_index12             I    32
// ifc_region_barr8               I    64
// ifc_region_index8              I    32
// ifc_region_barr4               I    64
// ifc_region_index4              I    32
// ifc_region_barr0               I    64
// ifc_region_index0              I    32
// ifc_idRequest_fd               I    32
// ifc_idReturn_sglId             I    32
// ifc_setInterface_interfaceId   I    32
// ifc_setInterface_sglId         I    32
// EN_ifc_sglist                  I     1
// EN_ifc_region                  I     1
// EN_ifc_idRequest               I     1
// EN_ifc_idReturn                I     1
// EN_ifc_setInterface            I     1
// EN_inverseIfc_sglist           I     1
// EN_inverseIfc_region           I     1
// EN_inverseIfc_idRequest        I     1
// EN_inverseIfc_idReturn         I     1
// EN_inverseIfc_setInterface     I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMURequestInverterV(CLK,
			     RST_N,

			     ifc_sglist_sglId,
			     ifc_sglist_sglIndex,
			     ifc_sglist_addr,
			     ifc_sglist_len,
			     EN_ifc_sglist,
			     RDY_ifc_sglist,

			     ifc_region_sglId,
			     ifc_region_barr12,
			     ifc_region_index12,
			     ifc_region_barr8,
			     ifc_region_index8,
			     ifc_region_barr4,
			     ifc_region_index4,
			     ifc_region_barr0,
			     ifc_region_index0,
			     EN_ifc_region,
			     RDY_ifc_region,

			     ifc_idRequest_fd,
			     EN_ifc_idRequest,
			     RDY_ifc_idRequest,

			     ifc_idReturn_sglId,
			     EN_ifc_idReturn,
			     RDY_ifc_idReturn,

			     ifc_setInterface_interfaceId,
			     ifc_setInterface_sglId,
			     EN_ifc_setInterface,
			     RDY_ifc_setInterface,

			     EN_inverseIfc_sglist,
			     inverseIfc_sglist,
			     RDY_inverseIfc_sglist,

			     EN_inverseIfc_region,
			     inverseIfc_region,
			     RDY_inverseIfc_region,

			     EN_inverseIfc_idRequest,
			     inverseIfc_idRequest,
			     RDY_inverseIfc_idRequest,

			     EN_inverseIfc_idReturn,
			     inverseIfc_idReturn,
			     RDY_inverseIfc_idReturn,

			     EN_inverseIfc_setInterface,
			     inverseIfc_setInterface,
			     RDY_inverseIfc_setInterface);
  input  CLK;
  input  RST_N;

  // action method ifc_sglist
  input  [31 : 0] ifc_sglist_sglId;
  input  [31 : 0] ifc_sglist_sglIndex;
  input  [63 : 0] ifc_sglist_addr;
  input  [31 : 0] ifc_sglist_len;
  input  EN_ifc_sglist;
  output RDY_ifc_sglist;

  // action method ifc_region
  input  [31 : 0] ifc_region_sglId;
  input  [63 : 0] ifc_region_barr12;
  input  [31 : 0] ifc_region_index12;
  input  [63 : 0] ifc_region_barr8;
  input  [31 : 0] ifc_region_index8;
  input  [63 : 0] ifc_region_barr4;
  input  [31 : 0] ifc_region_index4;
  input  [63 : 0] ifc_region_barr0;
  input  [31 : 0] ifc_region_index0;
  input  EN_ifc_region;
  output RDY_ifc_region;

  // action method ifc_idRequest
  input  [31 : 0] ifc_idRequest_fd;
  input  EN_ifc_idRequest;
  output RDY_ifc_idRequest;

  // action method ifc_idReturn
  input  [31 : 0] ifc_idReturn_sglId;
  input  EN_ifc_idReturn;
  output RDY_ifc_idReturn;

  // action method ifc_setInterface
  input  [31 : 0] ifc_setInterface_interfaceId;
  input  [31 : 0] ifc_setInterface_sglId;
  input  EN_ifc_setInterface;
  output RDY_ifc_setInterface;

  // actionvalue method inverseIfc_sglist
  input  EN_inverseIfc_sglist;
  output [159 : 0] inverseIfc_sglist;
  output RDY_inverseIfc_sglist;

  // actionvalue method inverseIfc_region
  input  EN_inverseIfc_region;
  output [415 : 0] inverseIfc_region;
  output RDY_inverseIfc_region;

  // actionvalue method inverseIfc_idRequest
  input  EN_inverseIfc_idRequest;
  output [31 : 0] inverseIfc_idRequest;
  output RDY_inverseIfc_idRequest;

  // actionvalue method inverseIfc_idReturn
  input  EN_inverseIfc_idReturn;
  output [31 : 0] inverseIfc_idReturn;
  output RDY_inverseIfc_idReturn;

  // actionvalue method inverseIfc_setInterface
  input  EN_inverseIfc_setInterface;
  output [63 : 0] inverseIfc_setInterface;
  output RDY_inverseIfc_setInterface;

  // signals for module outputs
  wire [415 : 0] inverseIfc_region;
  wire [159 : 0] inverseIfc_sglist;
  wire [63 : 0] inverseIfc_setInterface;
  wire [31 : 0] inverseIfc_idRequest, inverseIfc_idReturn;
  wire RDY_ifc_idRequest,
       RDY_ifc_idReturn,
       RDY_ifc_region,
       RDY_ifc_setInterface,
       RDY_ifc_sglist,
       RDY_inverseIfc_idRequest,
       RDY_inverseIfc_idReturn,
       RDY_inverseIfc_region,
       RDY_inverseIfc_setInterface,
       RDY_inverseIfc_sglist;

  // ports of submodule inv_idRequest_inverter
  wire [31 : 0] inv_idRequest_inverter_get, inv_idRequest_inverter_put;
  wire inv_idRequest_inverter_EN_get,
       inv_idRequest_inverter_EN_put,
       inv_idRequest_inverter_RDY_get,
       inv_idRequest_inverter_RDY_put;

  // ports of submodule inv_idReturn_inverter
  wire [31 : 0] inv_idReturn_inverter_get, inv_idReturn_inverter_put;
  wire inv_idReturn_inverter_EN_get,
       inv_idReturn_inverter_EN_put,
       inv_idReturn_inverter_RDY_get,
       inv_idReturn_inverter_RDY_put;

  // ports of submodule inv_region_inverter
  wire [415 : 0] inv_region_inverter_get, inv_region_inverter_put;
  wire inv_region_inverter_EN_get,
       inv_region_inverter_EN_put,
       inv_region_inverter_RDY_get,
       inv_region_inverter_RDY_put;

  // ports of submodule inv_setInterface_inverter
  wire [63 : 0] inv_setInterface_inverter_get, inv_setInterface_inverter_put;
  wire inv_setInterface_inverter_EN_get,
       inv_setInterface_inverter_EN_put,
       inv_setInterface_inverter_RDY_get,
       inv_setInterface_inverter_RDY_put;

  // ports of submodule inv_sglist_inverter
  wire [159 : 0] inv_sglist_inverter_get, inv_sglist_inverter_put;
  wire inv_sglist_inverter_EN_get,
       inv_sglist_inverter_EN_put,
       inv_sglist_inverter_RDY_get,
       inv_sglist_inverter_RDY_put;

  // action method ifc_sglist
  assign RDY_ifc_sglist = inv_sglist_inverter_RDY_put ;

  // action method ifc_region
  assign RDY_ifc_region = inv_region_inverter_RDY_put ;

  // action method ifc_idRequest
  assign RDY_ifc_idRequest = inv_idRequest_inverter_RDY_put ;

  // action method ifc_idReturn
  assign RDY_ifc_idReturn = inv_idReturn_inverter_RDY_put ;

  // action method ifc_setInterface
  assign RDY_ifc_setInterface = inv_setInterface_inverter_RDY_put ;

  // actionvalue method inverseIfc_sglist
  assign inverseIfc_sglist = inv_sglist_inverter_get ;
  assign RDY_inverseIfc_sglist = inv_sglist_inverter_RDY_get ;

  // actionvalue method inverseIfc_region
  assign inverseIfc_region = inv_region_inverter_get ;
  assign RDY_inverseIfc_region = inv_region_inverter_RDY_get ;

  // actionvalue method inverseIfc_idRequest
  assign inverseIfc_idRequest = inv_idRequest_inverter_get ;
  assign RDY_inverseIfc_idRequest = inv_idRequest_inverter_RDY_get ;

  // actionvalue method inverseIfc_idReturn
  assign inverseIfc_idReturn = inv_idReturn_inverter_get ;
  assign RDY_inverseIfc_idReturn = inv_idReturn_inverter_RDY_get ;

  // actionvalue method inverseIfc_setInterface
  assign inverseIfc_setInterface = inv_setInterface_inverter_get ;
  assign RDY_inverseIfc_setInterface = inv_setInterface_inverter_RDY_get ;

  // submodule inv_idRequest_inverter
  PutInverter #(.DATA_WIDTH(32'd32)) inv_idRequest_inverter(.CLK(CLK),
							    .RST(RST_N),
							    .put(inv_idRequest_inverter_put),
							    .EN_put(inv_idRequest_inverter_EN_put),
							    .EN_get(inv_idRequest_inverter_EN_get),
							    .RDY_put(inv_idRequest_inverter_RDY_put),
							    .get(inv_idRequest_inverter_get),
							    .RDY_get(inv_idRequest_inverter_RDY_get));

  // submodule inv_idReturn_inverter
  PutInverter #(.DATA_WIDTH(32'd32)) inv_idReturn_inverter(.CLK(CLK),
							   .RST(RST_N),
							   .put(inv_idReturn_inverter_put),
							   .EN_put(inv_idReturn_inverter_EN_put),
							   .EN_get(inv_idReturn_inverter_EN_get),
							   .RDY_put(inv_idReturn_inverter_RDY_put),
							   .get(inv_idReturn_inverter_get),
							   .RDY_get(inv_idReturn_inverter_RDY_get));

  // submodule inv_region_inverter
  PutInverter #(.DATA_WIDTH(32'd416)) inv_region_inverter(.CLK(CLK),
							  .RST(RST_N),
							  .put(inv_region_inverter_put),
							  .EN_put(inv_region_inverter_EN_put),
							  .EN_get(inv_region_inverter_EN_get),
							  .RDY_put(inv_region_inverter_RDY_put),
							  .get(inv_region_inverter_get),
							  .RDY_get(inv_region_inverter_RDY_get));

  // submodule inv_setInterface_inverter
  PutInverter #(.DATA_WIDTH(32'd64)) inv_setInterface_inverter(.CLK(CLK),
							       .RST(RST_N),
							       .put(inv_setInterface_inverter_put),
							       .EN_put(inv_setInterface_inverter_EN_put),
							       .EN_get(inv_setInterface_inverter_EN_get),
							       .RDY_put(inv_setInterface_inverter_RDY_put),
							       .get(inv_setInterface_inverter_get),
							       .RDY_get(inv_setInterface_inverter_RDY_get));

  // submodule inv_sglist_inverter
  PutInverter #(.DATA_WIDTH(32'd160)) inv_sglist_inverter(.CLK(CLK),
							  .RST(RST_N),
							  .put(inv_sglist_inverter_put),
							  .EN_put(inv_sglist_inverter_EN_put),
							  .EN_get(inv_sglist_inverter_EN_get),
							  .RDY_put(inv_sglist_inverter_RDY_put),
							  .get(inv_sglist_inverter_get),
							  .RDY_get(inv_sglist_inverter_RDY_get));

  // submodule inv_idRequest_inverter
  assign inv_idRequest_inverter_put = ifc_idRequest_fd ;
  assign inv_idRequest_inverter_EN_put = EN_ifc_idRequest ;
  assign inv_idRequest_inverter_EN_get = EN_inverseIfc_idRequest ;

  // submodule inv_idReturn_inverter
  assign inv_idReturn_inverter_put = ifc_idReturn_sglId ;
  assign inv_idReturn_inverter_EN_put = EN_ifc_idReturn ;
  assign inv_idReturn_inverter_EN_get = EN_inverseIfc_idReturn ;

  // submodule inv_region_inverter
  assign inv_region_inverter_put =
	     { ifc_region_sglId,
	       ifc_region_barr12,
	       ifc_region_index12,
	       ifc_region_barr8,
	       ifc_region_index8,
	       ifc_region_barr4,
	       ifc_region_index4,
	       ifc_region_barr0,
	       ifc_region_index0 } ;
  assign inv_region_inverter_EN_put = EN_ifc_region ;
  assign inv_region_inverter_EN_get = EN_inverseIfc_region ;

  // submodule inv_setInterface_inverter
  assign inv_setInterface_inverter_put =
	     { ifc_setInterface_interfaceId, ifc_setInterface_sglId } ;
  assign inv_setInterface_inverter_EN_put = EN_ifc_setInterface ;
  assign inv_setInterface_inverter_EN_get = EN_inverseIfc_setInterface ;

  // submodule inv_sglist_inverter
  assign inv_sglist_inverter_put =
	     { ifc_sglist_sglId,
	       ifc_sglist_sglIndex,
	       ifc_sglist_addr,
	       ifc_sglist_len } ;
  assign inv_sglist_inverter_EN_put = EN_ifc_sglist ;
  assign inv_sglist_inverter_EN_get = EN_inverseIfc_sglist ;
endmodule  // mkMMURequestInverterV

