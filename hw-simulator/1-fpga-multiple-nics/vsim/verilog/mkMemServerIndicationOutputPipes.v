//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule methods_addrResponse_enq  CF ( methods_reportStateDbg_enq,
// 					methods_reportStateDbg_notFull,
// 					methods_reportMemoryTraffic_enq,
// 					methods_reportMemoryTraffic_notFull,
// 					methods_error_enq,
// 					methods_error_notFull,
// 					portalIfc_messageSize_size,
// 					portalIfc_indications_0_first,
// 					portalIfc_indications_0_deq,
// 					portalIfc_indications_1_first,
// 					portalIfc_indications_1_deq,
// 					portalIfc_indications_1_notEmpty,
// 					portalIfc_indications_2_first,
// 					portalIfc_indications_2_deq,
// 					portalIfc_indications_2_notEmpty,
// 					portalIfc_indications_3_first,
// 					portalIfc_indications_3_deq,
// 					portalIfc_indications_3_notEmpty );
// schedule methods_addrResponse_enq  C ( methods_addrResponse_enq );
//
// schedule methods_addrResponse_notFull  CF ( methods_addrResponse_notFull,
// 					    methods_reportStateDbg_enq,
// 					    methods_reportStateDbg_notFull,
// 					    methods_reportMemoryTraffic_enq,
// 					    methods_reportMemoryTraffic_notFull,
// 					    methods_error_enq,
// 					    methods_error_notFull,
// 					    portalIfc_messageSize_size,
// 					    portalIfc_indications_0_first,
// 					    portalIfc_indications_0_notEmpty,
// 					    portalIfc_indications_1_first,
// 					    portalIfc_indications_1_deq,
// 					    portalIfc_indications_1_notEmpty,
// 					    portalIfc_indications_2_first,
// 					    portalIfc_indications_2_deq,
// 					    portalIfc_indications_2_notEmpty,
// 					    portalIfc_indications_3_first,
// 					    portalIfc_indications_3_deq,
// 					    portalIfc_indications_3_notEmpty,
// 					    portalIfc_intr_status,
// 					    portalIfc_intr_channel );
// schedule methods_addrResponse_notFull  SB ( methods_addrResponse_enq,
// 					    portalIfc_indications_0_deq );
//
// schedule methods_reportStateDbg_enq  CF ( methods_addrResponse_enq,
// 					  methods_addrResponse_notFull,
// 					  methods_reportMemoryTraffic_enq,
// 					  methods_reportMemoryTraffic_notFull,
// 					  methods_error_enq,
// 					  methods_error_notFull,
// 					  portalIfc_messageSize_size,
// 					  portalIfc_indications_0_first,
// 					  portalIfc_indications_0_deq,
// 					  portalIfc_indications_0_notEmpty,
// 					  portalIfc_indications_1_first,
// 					  portalIfc_indications_1_deq,
// 					  portalIfc_indications_2_first,
// 					  portalIfc_indications_2_deq,
// 					  portalIfc_indications_2_notEmpty,
// 					  portalIfc_indications_3_first,
// 					  portalIfc_indications_3_deq,
// 					  portalIfc_indications_3_notEmpty );
// schedule methods_reportStateDbg_enq  C ( methods_reportStateDbg_enq );
//
// schedule methods_reportStateDbg_notFull  CF ( methods_addrResponse_enq,
// 					      methods_addrResponse_notFull,
// 					      methods_reportStateDbg_notFull,
// 					      methods_reportMemoryTraffic_enq,
// 					      methods_reportMemoryTraffic_notFull,
// 					      methods_error_enq,
// 					      methods_error_notFull,
// 					      portalIfc_messageSize_size,
// 					      portalIfc_indications_0_first,
// 					      portalIfc_indications_0_deq,
// 					      portalIfc_indications_0_notEmpty,
// 					      portalIfc_indications_1_first,
// 					      portalIfc_indications_1_notEmpty,
// 					      portalIfc_indications_2_first,
// 					      portalIfc_indications_2_deq,
// 					      portalIfc_indications_2_notEmpty,
// 					      portalIfc_indications_3_first,
// 					      portalIfc_indications_3_deq,
// 					      portalIfc_indications_3_notEmpty,
// 					      portalIfc_intr_status,
// 					      portalIfc_intr_channel );
// schedule methods_reportStateDbg_notFull  SB ( methods_reportStateDbg_enq,
// 					      portalIfc_indications_1_deq );
//
// schedule methods_reportMemoryTraffic_enq  CF ( methods_addrResponse_enq,
// 					       methods_addrResponse_notFull,
// 					       methods_reportStateDbg_enq,
// 					       methods_reportStateDbg_notFull,
// 					       methods_error_enq,
// 					       methods_error_notFull,
// 					       portalIfc_messageSize_size,
// 					       portalIfc_indications_0_first,
// 					       portalIfc_indications_0_deq,
// 					       portalIfc_indications_0_notEmpty,
// 					       portalIfc_indications_1_first,
// 					       portalIfc_indications_1_deq,
// 					       portalIfc_indications_1_notEmpty,
// 					       portalIfc_indications_2_first,
// 					       portalIfc_indications_2_deq,
// 					       portalIfc_indications_3_first,
// 					       portalIfc_indications_3_deq,
// 					       portalIfc_indications_3_notEmpty );
// schedule methods_reportMemoryTraffic_enq  C ( methods_reportMemoryTraffic_enq );
//
// schedule methods_reportMemoryTraffic_notFull  CF ( methods_addrResponse_enq,
// 						   methods_addrResponse_notFull,
// 						   methods_reportStateDbg_enq,
// 						   methods_reportStateDbg_notFull,
// 						   methods_reportMemoryTraffic_notFull,
// 						   methods_error_enq,
// 						   methods_error_notFull,
// 						   portalIfc_messageSize_size,
// 						   portalIfc_indications_0_first,
// 						   portalIfc_indications_0_deq,
// 						   portalIfc_indications_0_notEmpty,
// 						   portalIfc_indications_1_first,
// 						   portalIfc_indications_1_deq,
// 						   portalIfc_indications_1_notEmpty,
// 						   portalIfc_indications_2_first,
// 						   portalIfc_indications_2_notEmpty,
// 						   portalIfc_indications_3_first,
// 						   portalIfc_indications_3_deq,
// 						   portalIfc_indications_3_notEmpty,
// 						   portalIfc_intr_status,
// 						   portalIfc_intr_channel );
// schedule methods_reportMemoryTraffic_notFull  SB ( methods_reportMemoryTraffic_enq,
// 						   portalIfc_indications_2_deq );
//
// schedule methods_error_enq  CF ( methods_addrResponse_enq,
// 				 methods_addrResponse_notFull,
// 				 methods_reportStateDbg_enq,
// 				 methods_reportStateDbg_notFull,
// 				 methods_reportMemoryTraffic_enq,
// 				 methods_reportMemoryTraffic_notFull,
// 				 portalIfc_messageSize_size,
// 				 portalIfc_indications_0_first,
// 				 portalIfc_indications_0_deq,
// 				 portalIfc_indications_0_notEmpty,
// 				 portalIfc_indications_1_first,
// 				 portalIfc_indications_1_deq,
// 				 portalIfc_indications_1_notEmpty,
// 				 portalIfc_indications_2_first,
// 				 portalIfc_indications_2_deq,
// 				 portalIfc_indications_2_notEmpty,
// 				 portalIfc_indications_3_first,
// 				 portalIfc_indications_3_deq );
// schedule methods_error_enq  C ( methods_error_enq );
//
// schedule methods_error_notFull  CF ( methods_addrResponse_enq,
// 				     methods_addrResponse_notFull,
// 				     methods_reportStateDbg_enq,
// 				     methods_reportStateDbg_notFull,
// 				     methods_reportMemoryTraffic_enq,
// 				     methods_reportMemoryTraffic_notFull,
// 				     methods_error_notFull,
// 				     portalIfc_messageSize_size,
// 				     portalIfc_indications_0_first,
// 				     portalIfc_indications_0_deq,
// 				     portalIfc_indications_0_notEmpty,
// 				     portalIfc_indications_1_first,
// 				     portalIfc_indications_1_deq,
// 				     portalIfc_indications_1_notEmpty,
// 				     portalIfc_indications_2_first,
// 				     portalIfc_indications_2_deq,
// 				     portalIfc_indications_2_notEmpty,
// 				     portalIfc_indications_3_first,
// 				     portalIfc_indications_3_notEmpty,
// 				     portalIfc_intr_status,
// 				     portalIfc_intr_channel );
// schedule methods_error_notFull  SB ( methods_error_enq,
// 				     portalIfc_indications_3_deq );
//
// schedule portalIfc_messageSize_size  CF ( methods_addrResponse_enq,
// 					  methods_addrResponse_notFull,
// 					  methods_reportStateDbg_enq,
// 					  methods_reportStateDbg_notFull,
// 					  methods_reportMemoryTraffic_enq,
// 					  methods_reportMemoryTraffic_notFull,
// 					  methods_error_enq,
// 					  methods_error_notFull,
// 					  portalIfc_messageSize_size,
// 					  portalIfc_indications_0_first,
// 					  portalIfc_indications_0_deq,
// 					  portalIfc_indications_0_notEmpty,
// 					  portalIfc_indications_1_first,
// 					  portalIfc_indications_1_deq,
// 					  portalIfc_indications_1_notEmpty,
// 					  portalIfc_indications_2_first,
// 					  portalIfc_indications_2_deq,
// 					  portalIfc_indications_2_notEmpty,
// 					  portalIfc_indications_3_first,
// 					  portalIfc_indications_3_deq,
// 					  portalIfc_indications_3_notEmpty,
// 					  portalIfc_intr_status,
// 					  portalIfc_intr_channel );
//
// schedule portalIfc_indications_0_first  CF ( methods_addrResponse_enq,
// 					     methods_addrResponse_notFull,
// 					     methods_reportStateDbg_enq,
// 					     methods_reportStateDbg_notFull,
// 					     methods_reportMemoryTraffic_enq,
// 					     methods_reportMemoryTraffic_notFull,
// 					     methods_error_enq,
// 					     methods_error_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_deq,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_indications_3_first,
// 					     portalIfc_indications_3_deq,
// 					     portalIfc_indications_3_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_0_first  SB ( portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_0_deq  CF ( methods_addrResponse_enq,
// 					   methods_reportStateDbg_enq,
// 					   methods_reportStateDbg_notFull,
// 					   methods_reportMemoryTraffic_enq,
// 					   methods_reportMemoryTraffic_notFull,
// 					   methods_error_enq,
// 					   methods_error_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty,
// 					   portalIfc_indications_2_first,
// 					   portalIfc_indications_2_deq,
// 					   portalIfc_indications_2_notEmpty,
// 					   portalIfc_indications_3_first,
// 					   portalIfc_indications_3_deq,
// 					   portalIfc_indications_3_notEmpty );
// schedule portalIfc_indications_0_deq  C ( portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_0_notEmpty  CF ( methods_addrResponse_notFull,
// 						methods_reportStateDbg_enq,
// 						methods_reportStateDbg_notFull,
// 						methods_reportMemoryTraffic_enq,
// 						methods_reportMemoryTraffic_notFull,
// 						methods_error_enq,
// 						methods_error_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_deq,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_deq,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_indications_3_first,
// 						portalIfc_indications_3_deq,
// 						portalIfc_indications_3_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_0_notEmpty  SB ( methods_addrResponse_enq,
// 						portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_1_first  CF ( methods_addrResponse_enq,
// 					     methods_addrResponse_notFull,
// 					     methods_reportStateDbg_enq,
// 					     methods_reportStateDbg_notFull,
// 					     methods_reportMemoryTraffic_enq,
// 					     methods_reportMemoryTraffic_notFull,
// 					     methods_error_enq,
// 					     methods_error_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_deq,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_indications_3_first,
// 					     portalIfc_indications_3_deq,
// 					     portalIfc_indications_3_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_1_first  SB ( portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_1_deq  CF ( methods_addrResponse_enq,
// 					   methods_addrResponse_notFull,
// 					   methods_reportStateDbg_enq,
// 					   methods_reportMemoryTraffic_enq,
// 					   methods_reportMemoryTraffic_notFull,
// 					   methods_error_enq,
// 					   methods_error_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty,
// 					   portalIfc_indications_2_first,
// 					   portalIfc_indications_2_deq,
// 					   portalIfc_indications_2_notEmpty,
// 					   portalIfc_indications_3_first,
// 					   portalIfc_indications_3_deq,
// 					   portalIfc_indications_3_notEmpty );
// schedule portalIfc_indications_1_deq  C ( portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_1_notEmpty  CF ( methods_addrResponse_enq,
// 						methods_addrResponse_notFull,
// 						methods_reportStateDbg_notFull,
// 						methods_reportMemoryTraffic_enq,
// 						methods_reportMemoryTraffic_notFull,
// 						methods_error_enq,
// 						methods_error_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_deq,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_deq,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_indications_3_first,
// 						portalIfc_indications_3_deq,
// 						portalIfc_indications_3_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_1_notEmpty  SB ( methods_reportStateDbg_enq,
// 						portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_2_first  CF ( methods_addrResponse_enq,
// 					     methods_addrResponse_notFull,
// 					     methods_reportStateDbg_enq,
// 					     methods_reportStateDbg_notFull,
// 					     methods_reportMemoryTraffic_enq,
// 					     methods_reportMemoryTraffic_notFull,
// 					     methods_error_enq,
// 					     methods_error_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_indications_3_first,
// 					     portalIfc_indications_3_deq,
// 					     portalIfc_indications_3_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_2_first  SB ( portalIfc_indications_2_deq );
//
// schedule portalIfc_indications_2_deq  CF ( methods_addrResponse_enq,
// 					   methods_addrResponse_notFull,
// 					   methods_reportStateDbg_enq,
// 					   methods_reportStateDbg_notFull,
// 					   methods_reportMemoryTraffic_enq,
// 					   methods_error_enq,
// 					   methods_error_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty,
// 					   portalIfc_indications_3_first,
// 					   portalIfc_indications_3_deq,
// 					   portalIfc_indications_3_notEmpty );
// schedule portalIfc_indications_2_deq  C ( portalIfc_indications_2_deq );
//
// schedule portalIfc_indications_2_notEmpty  CF ( methods_addrResponse_enq,
// 						methods_addrResponse_notFull,
// 						methods_reportStateDbg_enq,
// 						methods_reportStateDbg_notFull,
// 						methods_reportMemoryTraffic_notFull,
// 						methods_error_enq,
// 						methods_error_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_deq,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_deq,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_indications_3_first,
// 						portalIfc_indications_3_deq,
// 						portalIfc_indications_3_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_2_notEmpty  SB ( methods_reportMemoryTraffic_enq,
// 						portalIfc_indications_2_deq );
//
// schedule portalIfc_indications_3_first  CF ( methods_addrResponse_enq,
// 					     methods_addrResponse_notFull,
// 					     methods_reportStateDbg_enq,
// 					     methods_reportStateDbg_notFull,
// 					     methods_reportMemoryTraffic_enq,
// 					     methods_reportMemoryTraffic_notFull,
// 					     methods_error_enq,
// 					     methods_error_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_deq,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_indications_3_first,
// 					     portalIfc_indications_3_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_3_first  SB ( portalIfc_indications_3_deq );
//
// schedule portalIfc_indications_3_deq  CF ( methods_addrResponse_enq,
// 					   methods_addrResponse_notFull,
// 					   methods_reportStateDbg_enq,
// 					   methods_reportStateDbg_notFull,
// 					   methods_reportMemoryTraffic_enq,
// 					   methods_reportMemoryTraffic_notFull,
// 					   methods_error_enq,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty,
// 					   portalIfc_indications_2_first,
// 					   portalIfc_indications_2_deq,
// 					   portalIfc_indications_2_notEmpty );
// schedule portalIfc_indications_3_deq  C ( portalIfc_indications_3_deq );
//
// schedule portalIfc_indications_3_notEmpty  CF ( methods_addrResponse_enq,
// 						methods_addrResponse_notFull,
// 						methods_reportStateDbg_enq,
// 						methods_reportStateDbg_notFull,
// 						methods_reportMemoryTraffic_enq,
// 						methods_reportMemoryTraffic_notFull,
// 						methods_error_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_deq,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_deq,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_deq,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_indications_3_first,
// 						portalIfc_indications_3_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_3_notEmpty  SB ( methods_error_enq,
// 						portalIfc_indications_3_deq );
//
// schedule portalIfc_intr_status  CF ( methods_addrResponse_notFull,
// 				     methods_reportStateDbg_notFull,
// 				     methods_reportMemoryTraffic_notFull,
// 				     methods_error_notFull,
// 				     portalIfc_messageSize_size,
// 				     portalIfc_indications_0_first,
// 				     portalIfc_indications_0_notEmpty,
// 				     portalIfc_indications_1_first,
// 				     portalIfc_indications_1_notEmpty,
// 				     portalIfc_indications_2_first,
// 				     portalIfc_indications_2_notEmpty,
// 				     portalIfc_indications_3_first,
// 				     portalIfc_indications_3_notEmpty,
// 				     portalIfc_intr_status,
// 				     portalIfc_intr_channel );
// schedule portalIfc_intr_status  SB ( methods_addrResponse_enq,
// 				     methods_reportStateDbg_enq,
// 				     methods_reportMemoryTraffic_enq,
// 				     methods_error_enq,
// 				     portalIfc_indications_0_deq,
// 				     portalIfc_indications_1_deq,
// 				     portalIfc_indications_2_deq,
// 				     portalIfc_indications_3_deq );
//
// schedule portalIfc_intr_channel  CF ( methods_addrResponse_notFull,
// 				      methods_reportStateDbg_notFull,
// 				      methods_reportMemoryTraffic_notFull,
// 				      methods_error_notFull,
// 				      portalIfc_messageSize_size,
// 				      portalIfc_indications_0_first,
// 				      portalIfc_indications_0_notEmpty,
// 				      portalIfc_indications_1_first,
// 				      portalIfc_indications_1_notEmpty,
// 				      portalIfc_indications_2_first,
// 				      portalIfc_indications_2_notEmpty,
// 				      portalIfc_indications_3_first,
// 				      portalIfc_indications_3_notEmpty,
// 				      portalIfc_intr_status,
// 				      portalIfc_intr_channel );
// schedule portalIfc_intr_channel  SB ( methods_addrResponse_enq,
// 				      methods_reportStateDbg_enq,
// 				      methods_reportMemoryTraffic_enq,
// 				      methods_error_enq,
// 				      portalIfc_indications_0_deq,
// 				      portalIfc_indications_1_deq,
// 				      portalIfc_indications_2_deq,
// 				      portalIfc_indications_3_deq );
//
//
// Ports:
// Name                         I/O  size props
// RDY_methods_addrResponse_enq   O     1
// methods_addrResponse_notFull   O     1
// RDY_methods_addrResponse_notFull  O     1 const
// RDY_methods_reportStateDbg_enq  O     1
// methods_reportStateDbg_notFull  O     1
// RDY_methods_reportStateDbg_notFull  O     1 const
// RDY_methods_reportMemoryTraffic_enq  O     1
// methods_reportMemoryTraffic_notFull  O     1
// RDY_methods_reportMemoryTraffic_notFull  O     1 const
// RDY_methods_error_enq          O     1
// methods_error_notFull          O     1
// RDY_methods_error_notFull      O     1 const
// portalIfc_messageSize_size     O    16
// RDY_portalIfc_messageSize_size  O     1 const
// portalIfc_indications_0_first  O    32 reg
// RDY_portalIfc_indications_0_first  O     1 reg
// RDY_portalIfc_indications_0_deq  O     1 reg
// portalIfc_indications_0_notEmpty  O     1 reg
// RDY_portalIfc_indications_0_notEmpty  O     1 const
// portalIfc_indications_1_first  O    32 reg
// RDY_portalIfc_indications_1_first  O     1 reg
// RDY_portalIfc_indications_1_deq  O     1 reg
// portalIfc_indications_1_notEmpty  O     1 reg
// RDY_portalIfc_indications_1_notEmpty  O     1 const
// portalIfc_indications_2_first  O    32 reg
// RDY_portalIfc_indications_2_first  O     1 reg
// RDY_portalIfc_indications_2_deq  O     1 reg
// portalIfc_indications_2_notEmpty  O     1 reg
// RDY_portalIfc_indications_2_notEmpty  O     1 const
// portalIfc_indications_3_first  O    32 reg
// RDY_portalIfc_indications_3_first  O     1 reg
// RDY_portalIfc_indications_3_deq  O     1 reg
// portalIfc_indications_3_notEmpty  O     1 reg
// RDY_portalIfc_indications_3_notEmpty  O     1 const
// portalIfc_intr_status          O     1
// RDY_portalIfc_intr_status      O     1 const
// portalIfc_intr_channel         O    32
// RDY_portalIfc_intr_channel     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// methods_addrResponse_enq_v     I    64
// methods_reportStateDbg_enq_v   I   128
// methods_reportMemoryTraffic_enq_v  I    64
// methods_error_enq_v            I   192
// portalIfc_messageSize_size_methodNumber  I    16
// EN_methods_addrResponse_enq    I     1
// EN_methods_reportStateDbg_enq  I     1
// EN_methods_reportMemoryTraffic_enq  I     1
// EN_methods_error_enq           I     1
// EN_portalIfc_indications_0_deq  I     1
// EN_portalIfc_indications_1_deq  I     1
// EN_portalIfc_indications_2_deq  I     1
// EN_portalIfc_indications_3_deq  I     1
//
// Combinational paths from inputs to outputs:
//   portalIfc_messageSize_size_methodNumber -> portalIfc_messageSize_size
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMemServerIndicationOutputPipes(CLK,
					RST_N,

					methods_addrResponse_enq_v,
					EN_methods_addrResponse_enq,
					RDY_methods_addrResponse_enq,

					methods_addrResponse_notFull,
					RDY_methods_addrResponse_notFull,

					methods_reportStateDbg_enq_v,
					EN_methods_reportStateDbg_enq,
					RDY_methods_reportStateDbg_enq,

					methods_reportStateDbg_notFull,
					RDY_methods_reportStateDbg_notFull,

					methods_reportMemoryTraffic_enq_v,
					EN_methods_reportMemoryTraffic_enq,
					RDY_methods_reportMemoryTraffic_enq,

					methods_reportMemoryTraffic_notFull,
					RDY_methods_reportMemoryTraffic_notFull,

					methods_error_enq_v,
					EN_methods_error_enq,
					RDY_methods_error_enq,

					methods_error_notFull,
					RDY_methods_error_notFull,

					portalIfc_messageSize_size_methodNumber,
					portalIfc_messageSize_size,
					RDY_portalIfc_messageSize_size,

					portalIfc_indications_0_first,
					RDY_portalIfc_indications_0_first,

					EN_portalIfc_indications_0_deq,
					RDY_portalIfc_indications_0_deq,

					portalIfc_indications_0_notEmpty,
					RDY_portalIfc_indications_0_notEmpty,

					portalIfc_indications_1_first,
					RDY_portalIfc_indications_1_first,

					EN_portalIfc_indications_1_deq,
					RDY_portalIfc_indications_1_deq,

					portalIfc_indications_1_notEmpty,
					RDY_portalIfc_indications_1_notEmpty,

					portalIfc_indications_2_first,
					RDY_portalIfc_indications_2_first,

					EN_portalIfc_indications_2_deq,
					RDY_portalIfc_indications_2_deq,

					portalIfc_indications_2_notEmpty,
					RDY_portalIfc_indications_2_notEmpty,

					portalIfc_indications_3_first,
					RDY_portalIfc_indications_3_first,

					EN_portalIfc_indications_3_deq,
					RDY_portalIfc_indications_3_deq,

					portalIfc_indications_3_notEmpty,
					RDY_portalIfc_indications_3_notEmpty,

					portalIfc_intr_status,
					RDY_portalIfc_intr_status,

					portalIfc_intr_channel,
					RDY_portalIfc_intr_channel);
  input  CLK;
  input  RST_N;

  // action method methods_addrResponse_enq
  input  [63 : 0] methods_addrResponse_enq_v;
  input  EN_methods_addrResponse_enq;
  output RDY_methods_addrResponse_enq;

  // value method methods_addrResponse_notFull
  output methods_addrResponse_notFull;
  output RDY_methods_addrResponse_notFull;

  // action method methods_reportStateDbg_enq
  input  [127 : 0] methods_reportStateDbg_enq_v;
  input  EN_methods_reportStateDbg_enq;
  output RDY_methods_reportStateDbg_enq;

  // value method methods_reportStateDbg_notFull
  output methods_reportStateDbg_notFull;
  output RDY_methods_reportStateDbg_notFull;

  // action method methods_reportMemoryTraffic_enq
  input  [63 : 0] methods_reportMemoryTraffic_enq_v;
  input  EN_methods_reportMemoryTraffic_enq;
  output RDY_methods_reportMemoryTraffic_enq;

  // value method methods_reportMemoryTraffic_notFull
  output methods_reportMemoryTraffic_notFull;
  output RDY_methods_reportMemoryTraffic_notFull;

  // action method methods_error_enq
  input  [191 : 0] methods_error_enq_v;
  input  EN_methods_error_enq;
  output RDY_methods_error_enq;

  // value method methods_error_notFull
  output methods_error_notFull;
  output RDY_methods_error_notFull;

  // value method portalIfc_messageSize_size
  input  [15 : 0] portalIfc_messageSize_size_methodNumber;
  output [15 : 0] portalIfc_messageSize_size;
  output RDY_portalIfc_messageSize_size;

  // value method portalIfc_indications_0_first
  output [31 : 0] portalIfc_indications_0_first;
  output RDY_portalIfc_indications_0_first;

  // action method portalIfc_indications_0_deq
  input  EN_portalIfc_indications_0_deq;
  output RDY_portalIfc_indications_0_deq;

  // value method portalIfc_indications_0_notEmpty
  output portalIfc_indications_0_notEmpty;
  output RDY_portalIfc_indications_0_notEmpty;

  // value method portalIfc_indications_1_first
  output [31 : 0] portalIfc_indications_1_first;
  output RDY_portalIfc_indications_1_first;

  // action method portalIfc_indications_1_deq
  input  EN_portalIfc_indications_1_deq;
  output RDY_portalIfc_indications_1_deq;

  // value method portalIfc_indications_1_notEmpty
  output portalIfc_indications_1_notEmpty;
  output RDY_portalIfc_indications_1_notEmpty;

  // value method portalIfc_indications_2_first
  output [31 : 0] portalIfc_indications_2_first;
  output RDY_portalIfc_indications_2_first;

  // action method portalIfc_indications_2_deq
  input  EN_portalIfc_indications_2_deq;
  output RDY_portalIfc_indications_2_deq;

  // value method portalIfc_indications_2_notEmpty
  output portalIfc_indications_2_notEmpty;
  output RDY_portalIfc_indications_2_notEmpty;

  // value method portalIfc_indications_3_first
  output [31 : 0] portalIfc_indications_3_first;
  output RDY_portalIfc_indications_3_first;

  // action method portalIfc_indications_3_deq
  input  EN_portalIfc_indications_3_deq;
  output RDY_portalIfc_indications_3_deq;

  // value method portalIfc_indications_3_notEmpty
  output portalIfc_indications_3_notEmpty;
  output RDY_portalIfc_indications_3_notEmpty;

  // value method portalIfc_intr_status
  output portalIfc_intr_status;
  output RDY_portalIfc_intr_status;

  // value method portalIfc_intr_channel
  output [31 : 0] portalIfc_intr_channel;
  output RDY_portalIfc_intr_channel;

  // signals for module outputs
  reg [15 : 0] portalIfc_messageSize_size;
  wire [31 : 0] portalIfc_indications_0_first,
		portalIfc_indications_1_first,
		portalIfc_indications_2_first,
		portalIfc_indications_3_first,
		portalIfc_intr_channel;
  wire RDY_methods_addrResponse_enq,
       RDY_methods_addrResponse_notFull,
       RDY_methods_error_enq,
       RDY_methods_error_notFull,
       RDY_methods_reportMemoryTraffic_enq,
       RDY_methods_reportMemoryTraffic_notFull,
       RDY_methods_reportStateDbg_enq,
       RDY_methods_reportStateDbg_notFull,
       RDY_portalIfc_indications_0_deq,
       RDY_portalIfc_indications_0_first,
       RDY_portalIfc_indications_0_notEmpty,
       RDY_portalIfc_indications_1_deq,
       RDY_portalIfc_indications_1_first,
       RDY_portalIfc_indications_1_notEmpty,
       RDY_portalIfc_indications_2_deq,
       RDY_portalIfc_indications_2_first,
       RDY_portalIfc_indications_2_notEmpty,
       RDY_portalIfc_indications_3_deq,
       RDY_portalIfc_indications_3_first,
       RDY_portalIfc_indications_3_notEmpty,
       RDY_portalIfc_intr_channel,
       RDY_portalIfc_intr_status,
       RDY_portalIfc_messageSize_size,
       methods_addrResponse_notFull,
       methods_error_notFull,
       methods_reportMemoryTraffic_notFull,
       methods_reportStateDbg_notFull,
       portalIfc_indications_0_notEmpty,
       portalIfc_indications_1_notEmpty,
       portalIfc_indications_2_notEmpty,
       portalIfc_indications_3_notEmpty,
       portalIfc_intr_status;

  // register addrResponse_responseAdapter_bits
  reg [63 : 0] addrResponse_responseAdapter_bits;
  wire [63 : 0] addrResponse_responseAdapter_bits_D_IN;
  wire addrResponse_responseAdapter_bits_EN;

  // register addrResponse_responseAdapter_count
  reg addrResponse_responseAdapter_count;
  wire addrResponse_responseAdapter_count_D_IN,
       addrResponse_responseAdapter_count_EN;

  // register addrResponse_responseAdapter_notEmptyReg
  reg addrResponse_responseAdapter_notEmptyReg;
  wire addrResponse_responseAdapter_notEmptyReg_D_IN,
       addrResponse_responseAdapter_notEmptyReg_EN;

  // register addrResponse_responseAdapter_shift
  reg [6 : 0] addrResponse_responseAdapter_shift;
  wire [6 : 0] addrResponse_responseAdapter_shift_D_IN;
  wire addrResponse_responseAdapter_shift_EN;

  // register error_responseAdapter_bits
  reg [191 : 0] error_responseAdapter_bits;
  wire [191 : 0] error_responseAdapter_bits_D_IN;
  wire error_responseAdapter_bits_EN;

  // register error_responseAdapter_count
  reg [2 : 0] error_responseAdapter_count;
  wire [2 : 0] error_responseAdapter_count_D_IN;
  wire error_responseAdapter_count_EN;

  // register error_responseAdapter_notEmptyReg
  reg error_responseAdapter_notEmptyReg;
  wire error_responseAdapter_notEmptyReg_D_IN,
       error_responseAdapter_notEmptyReg_EN;

  // register error_responseAdapter_shift
  reg [8 : 0] error_responseAdapter_shift;
  wire [8 : 0] error_responseAdapter_shift_D_IN;
  wire error_responseAdapter_shift_EN;

  // register reportMemoryTraffic_responseAdapter_bits
  reg [63 : 0] reportMemoryTraffic_responseAdapter_bits;
  wire [63 : 0] reportMemoryTraffic_responseAdapter_bits_D_IN;
  wire reportMemoryTraffic_responseAdapter_bits_EN;

  // register reportMemoryTraffic_responseAdapter_count
  reg reportMemoryTraffic_responseAdapter_count;
  wire reportMemoryTraffic_responseAdapter_count_D_IN,
       reportMemoryTraffic_responseAdapter_count_EN;

  // register reportMemoryTraffic_responseAdapter_notEmptyReg
  reg reportMemoryTraffic_responseAdapter_notEmptyReg;
  wire reportMemoryTraffic_responseAdapter_notEmptyReg_D_IN,
       reportMemoryTraffic_responseAdapter_notEmptyReg_EN;

  // register reportMemoryTraffic_responseAdapter_shift
  reg [6 : 0] reportMemoryTraffic_responseAdapter_shift;
  wire [6 : 0] reportMemoryTraffic_responseAdapter_shift_D_IN;
  wire reportMemoryTraffic_responseAdapter_shift_EN;

  // register reportStateDbg_responseAdapter_bits
  reg [127 : 0] reportStateDbg_responseAdapter_bits;
  wire [127 : 0] reportStateDbg_responseAdapter_bits_D_IN;
  wire reportStateDbg_responseAdapter_bits_EN;

  // register reportStateDbg_responseAdapter_count
  reg [1 : 0] reportStateDbg_responseAdapter_count;
  wire [1 : 0] reportStateDbg_responseAdapter_count_D_IN;
  wire reportStateDbg_responseAdapter_count_EN;

  // register reportStateDbg_responseAdapter_notEmptyReg
  reg reportStateDbg_responseAdapter_notEmptyReg;
  wire reportStateDbg_responseAdapter_notEmptyReg_D_IN,
       reportStateDbg_responseAdapter_notEmptyReg_EN;

  // register reportStateDbg_responseAdapter_shift
  reg [7 : 0] reportStateDbg_responseAdapter_shift;
  wire [7 : 0] reportStateDbg_responseAdapter_shift_D_IN;
  wire reportStateDbg_responseAdapter_shift_EN;

  // inputs to muxes for submodule ports
  wire [191 : 0] MUX_error_responseAdapter_bits_write_1__VAL_1;
  wire [127 : 0] MUX_reportStateDbg_responseAdapter_bits_write_1__VAL_1;
  wire [63 : 0] MUX_addrResponse_responseAdapter_bits_write_1__VAL_1,
		MUX_reportMemoryTraffic_responseAdapter_bits_write_1__VAL_1;
  wire MUX_addrResponse_responseAdapter_bits_write_1__SEL_1,
       MUX_addrResponse_responseAdapter_notEmptyReg_write_1__SEL_1,
       MUX_error_responseAdapter_bits_write_1__SEL_1,
       MUX_error_responseAdapter_notEmptyReg_write_1__SEL_1,
       MUX_reportMemoryTraffic_responseAdapter_bits_write_1__SEL_1,
       MUX_reportMemoryTraffic_responseAdapter_notEmptyReg_write_1__SEL_1,
       MUX_reportStateDbg_responseAdapter_bits_write_1__SEL_1,
       MUX_reportStateDbg_responseAdapter_notEmptyReg_write_1__SEL_1;

  // remaining internal signals
  wire [31 : 0] IF_reportStateDbg_responseAdapter_notEmptyReg__ETC___d58;
  wire [2 : 0] x__h1783;
  wire [1 : 0] x__h1465;
  wire x__h1305, x__h1624;

  // action method methods_addrResponse_enq
  assign RDY_methods_addrResponse_enq =
	     !addrResponse_responseAdapter_notEmptyReg ;

  // value method methods_addrResponse_notFull
  assign methods_addrResponse_notFull =
	     !addrResponse_responseAdapter_notEmptyReg ;
  assign RDY_methods_addrResponse_notFull = 1'd1 ;

  // action method methods_reportStateDbg_enq
  assign RDY_methods_reportStateDbg_enq =
	     !reportStateDbg_responseAdapter_notEmptyReg ;

  // value method methods_reportStateDbg_notFull
  assign methods_reportStateDbg_notFull =
	     !reportStateDbg_responseAdapter_notEmptyReg ;
  assign RDY_methods_reportStateDbg_notFull = 1'd1 ;

  // action method methods_reportMemoryTraffic_enq
  assign RDY_methods_reportMemoryTraffic_enq =
	     !reportMemoryTraffic_responseAdapter_notEmptyReg ;

  // value method methods_reportMemoryTraffic_notFull
  assign methods_reportMemoryTraffic_notFull =
	     !reportMemoryTraffic_responseAdapter_notEmptyReg ;
  assign RDY_methods_reportMemoryTraffic_notFull = 1'd1 ;

  // action method methods_error_enq
  assign RDY_methods_error_enq = !error_responseAdapter_notEmptyReg ;

  // value method methods_error_notFull
  assign methods_error_notFull = !error_responseAdapter_notEmptyReg ;
  assign RDY_methods_error_notFull = 1'd1 ;

  // value method portalIfc_messageSize_size
  always@(portalIfc_messageSize_size_methodNumber)
  begin
    case (portalIfc_messageSize_size_methodNumber)
      16'd0, 16'd2: portalIfc_messageSize_size = 16'd64;
      16'd1: portalIfc_messageSize_size = 16'd128;
      default: portalIfc_messageSize_size = 16'd192;
    endcase
  end
  assign RDY_portalIfc_messageSize_size = 1'd1 ;

  // value method portalIfc_indications_0_first
  assign portalIfc_indications_0_first =
	     addrResponse_responseAdapter_bits[63:32] ;
  assign RDY_portalIfc_indications_0_first =
	     addrResponse_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_0_deq
  assign RDY_portalIfc_indications_0_deq =
	     addrResponse_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_0_notEmpty
  assign portalIfc_indications_0_notEmpty =
	     addrResponse_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_0_notEmpty = 1'd1 ;

  // value method portalIfc_indications_1_first
  assign portalIfc_indications_1_first =
	     reportStateDbg_responseAdapter_bits[127:96] ;
  assign RDY_portalIfc_indications_1_first =
	     reportStateDbg_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_1_deq
  assign RDY_portalIfc_indications_1_deq =
	     reportStateDbg_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_1_notEmpty
  assign portalIfc_indications_1_notEmpty =
	     reportStateDbg_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_1_notEmpty = 1'd1 ;

  // value method portalIfc_indications_2_first
  assign portalIfc_indications_2_first =
	     reportMemoryTraffic_responseAdapter_bits[63:32] ;
  assign RDY_portalIfc_indications_2_first =
	     reportMemoryTraffic_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_2_deq
  assign RDY_portalIfc_indications_2_deq =
	     reportMemoryTraffic_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_2_notEmpty
  assign portalIfc_indications_2_notEmpty =
	     reportMemoryTraffic_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_2_notEmpty = 1'd1 ;

  // value method portalIfc_indications_3_first
  assign portalIfc_indications_3_first = error_responseAdapter_bits[191:160] ;
  assign RDY_portalIfc_indications_3_first =
	     error_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_3_deq
  assign RDY_portalIfc_indications_3_deq = error_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_3_notEmpty
  assign portalIfc_indications_3_notEmpty =
	     error_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_3_notEmpty = 1'd1 ;

  // value method portalIfc_intr_status
  assign portalIfc_intr_status =
	     addrResponse_responseAdapter_notEmptyReg ||
	     reportStateDbg_responseAdapter_notEmptyReg ||
	     reportMemoryTraffic_responseAdapter_notEmptyReg ||
	     error_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_intr_status = 1'd1 ;

  // value method portalIfc_intr_channel
  assign portalIfc_intr_channel =
	     addrResponse_responseAdapter_notEmptyReg ?
	       32'd0 :
	       IF_reportStateDbg_responseAdapter_notEmptyReg__ETC___d58 ;
  assign RDY_portalIfc_intr_channel = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_addrResponse_responseAdapter_bits_write_1__SEL_1 =
	     EN_portalIfc_indications_0_deq &&
	     !addrResponse_responseAdapter_count ;
  assign MUX_addrResponse_responseAdapter_notEmptyReg_write_1__SEL_1 =
	     EN_portalIfc_indications_0_deq &&
	     addrResponse_responseAdapter_count ;
  assign MUX_error_responseAdapter_bits_write_1__SEL_1 =
	     EN_portalIfc_indications_3_deq &&
	     error_responseAdapter_count != 3'd5 ;
  assign MUX_error_responseAdapter_notEmptyReg_write_1__SEL_1 =
	     EN_portalIfc_indications_3_deq &&
	     error_responseAdapter_count == 3'd5 ;
  assign MUX_reportMemoryTraffic_responseAdapter_bits_write_1__SEL_1 =
	     EN_portalIfc_indications_2_deq &&
	     !reportMemoryTraffic_responseAdapter_count ;
  assign MUX_reportMemoryTraffic_responseAdapter_notEmptyReg_write_1__SEL_1 =
	     EN_portalIfc_indications_2_deq &&
	     reportMemoryTraffic_responseAdapter_count ;
  assign MUX_reportStateDbg_responseAdapter_bits_write_1__SEL_1 =
	     EN_portalIfc_indications_1_deq &&
	     reportStateDbg_responseAdapter_count != 2'd3 ;
  assign MUX_reportStateDbg_responseAdapter_notEmptyReg_write_1__SEL_1 =
	     EN_portalIfc_indications_1_deq &&
	     reportStateDbg_responseAdapter_count == 2'd3 ;
  assign MUX_addrResponse_responseAdapter_bits_write_1__VAL_1 =
	     { addrResponse_responseAdapter_bits[31:0], 32'd0 } ;
  assign MUX_error_responseAdapter_bits_write_1__VAL_1 =
	     { error_responseAdapter_bits[159:0], 32'd0 } ;
  assign MUX_reportMemoryTraffic_responseAdapter_bits_write_1__VAL_1 =
	     { reportMemoryTraffic_responseAdapter_bits[31:0], 32'd0 } ;
  assign MUX_reportStateDbg_responseAdapter_bits_write_1__VAL_1 =
	     { reportStateDbg_responseAdapter_bits[95:0], 32'd0 } ;

  // register addrResponse_responseAdapter_bits
  assign addrResponse_responseAdapter_bits_D_IN =
	     MUX_addrResponse_responseAdapter_bits_write_1__SEL_1 ?
	       MUX_addrResponse_responseAdapter_bits_write_1__VAL_1 :
	       methods_addrResponse_enq_v ;
  assign addrResponse_responseAdapter_bits_EN =
	     EN_portalIfc_indications_0_deq &&
	     !addrResponse_responseAdapter_count ||
	     EN_methods_addrResponse_enq ;

  // register addrResponse_responseAdapter_count
  assign addrResponse_responseAdapter_count_D_IN =
	     !addrResponse_responseAdapter_count && x__h1305 ;
  assign addrResponse_responseAdapter_count_EN =
	     EN_portalIfc_indications_0_deq ;

  // register addrResponse_responseAdapter_notEmptyReg
  assign addrResponse_responseAdapter_notEmptyReg_D_IN =
	     !MUX_addrResponse_responseAdapter_notEmptyReg_write_1__SEL_1 ;
  assign addrResponse_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_0_deq &&
	     addrResponse_responseAdapter_count ||
	     EN_methods_addrResponse_enq ;

  // register addrResponse_responseAdapter_shift
  assign addrResponse_responseAdapter_shift_D_IN =
	     addrResponse_responseAdapter_shift + 7'd32 ;
  assign addrResponse_responseAdapter_shift_EN =
	     MUX_addrResponse_responseAdapter_bits_write_1__SEL_1 ;

  // register error_responseAdapter_bits
  assign error_responseAdapter_bits_D_IN =
	     MUX_error_responseAdapter_bits_write_1__SEL_1 ?
	       MUX_error_responseAdapter_bits_write_1__VAL_1 :
	       methods_error_enq_v ;
  assign error_responseAdapter_bits_EN =
	     EN_portalIfc_indications_3_deq &&
	     error_responseAdapter_count != 3'd5 ||
	     EN_methods_error_enq ;

  // register error_responseAdapter_count
  assign error_responseAdapter_count_D_IN =
	     (error_responseAdapter_count == 3'd5) ? 3'd0 : x__h1783 ;
  assign error_responseAdapter_count_EN = EN_portalIfc_indications_3_deq ;

  // register error_responseAdapter_notEmptyReg
  assign error_responseAdapter_notEmptyReg_D_IN =
	     !MUX_error_responseAdapter_notEmptyReg_write_1__SEL_1 ;
  assign error_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_3_deq &&
	     error_responseAdapter_count == 3'd5 ||
	     EN_methods_error_enq ;

  // register error_responseAdapter_shift
  assign error_responseAdapter_shift_D_IN =
	     error_responseAdapter_shift + 9'd32 ;
  assign error_responseAdapter_shift_EN =
	     MUX_error_responseAdapter_bits_write_1__SEL_1 ;

  // register reportMemoryTraffic_responseAdapter_bits
  assign reportMemoryTraffic_responseAdapter_bits_D_IN =
	     MUX_reportMemoryTraffic_responseAdapter_bits_write_1__SEL_1 ?
	       MUX_reportMemoryTraffic_responseAdapter_bits_write_1__VAL_1 :
	       methods_reportMemoryTraffic_enq_v ;
  assign reportMemoryTraffic_responseAdapter_bits_EN =
	     EN_portalIfc_indications_2_deq &&
	     !reportMemoryTraffic_responseAdapter_count ||
	     EN_methods_reportMemoryTraffic_enq ;

  // register reportMemoryTraffic_responseAdapter_count
  assign reportMemoryTraffic_responseAdapter_count_D_IN =
	     !reportMemoryTraffic_responseAdapter_count && x__h1624 ;
  assign reportMemoryTraffic_responseAdapter_count_EN =
	     EN_portalIfc_indications_2_deq ;

  // register reportMemoryTraffic_responseAdapter_notEmptyReg
  assign reportMemoryTraffic_responseAdapter_notEmptyReg_D_IN =
	     !MUX_reportMemoryTraffic_responseAdapter_notEmptyReg_write_1__SEL_1 ;
  assign reportMemoryTraffic_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_2_deq &&
	     reportMemoryTraffic_responseAdapter_count ||
	     EN_methods_reportMemoryTraffic_enq ;

  // register reportMemoryTraffic_responseAdapter_shift
  assign reportMemoryTraffic_responseAdapter_shift_D_IN =
	     reportMemoryTraffic_responseAdapter_shift + 7'd32 ;
  assign reportMemoryTraffic_responseAdapter_shift_EN =
	     MUX_reportMemoryTraffic_responseAdapter_bits_write_1__SEL_1 ;

  // register reportStateDbg_responseAdapter_bits
  assign reportStateDbg_responseAdapter_bits_D_IN =
	     MUX_reportStateDbg_responseAdapter_bits_write_1__SEL_1 ?
	       MUX_reportStateDbg_responseAdapter_bits_write_1__VAL_1 :
	       methods_reportStateDbg_enq_v ;
  assign reportStateDbg_responseAdapter_bits_EN =
	     EN_portalIfc_indications_1_deq &&
	     reportStateDbg_responseAdapter_count != 2'd3 ||
	     EN_methods_reportStateDbg_enq ;

  // register reportStateDbg_responseAdapter_count
  assign reportStateDbg_responseAdapter_count_D_IN =
	     (reportStateDbg_responseAdapter_count == 2'd3) ?
	       2'd0 :
	       x__h1465 ;
  assign reportStateDbg_responseAdapter_count_EN =
	     EN_portalIfc_indications_1_deq ;

  // register reportStateDbg_responseAdapter_notEmptyReg
  assign reportStateDbg_responseAdapter_notEmptyReg_D_IN =
	     !MUX_reportStateDbg_responseAdapter_notEmptyReg_write_1__SEL_1 ;
  assign reportStateDbg_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_1_deq &&
	     reportStateDbg_responseAdapter_count == 2'd3 ||
	     EN_methods_reportStateDbg_enq ;

  // register reportStateDbg_responseAdapter_shift
  assign reportStateDbg_responseAdapter_shift_D_IN =
	     reportStateDbg_responseAdapter_shift + 8'd32 ;
  assign reportStateDbg_responseAdapter_shift_EN =
	     MUX_reportStateDbg_responseAdapter_bits_write_1__SEL_1 ;

  // remaining internal signals
  assign IF_reportStateDbg_responseAdapter_notEmptyReg__ETC___d58 =
	     reportStateDbg_responseAdapter_notEmptyReg ?
	       32'd1 :
	       (reportMemoryTraffic_responseAdapter_notEmptyReg ?
		  32'd2 :
		  (error_responseAdapter_notEmptyReg ?
		     32'd3 :
		     32'hFFFFFFFF)) ;
  assign x__h1305 = addrResponse_responseAdapter_count + 1'd1 ;
  assign x__h1465 = reportStateDbg_responseAdapter_count + 2'd1 ;
  assign x__h1624 = reportMemoryTraffic_responseAdapter_count + 1'd1 ;
  assign x__h1783 = error_responseAdapter_count + 3'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        addrResponse_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 64'd0;
	addrResponse_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
	addrResponse_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	addrResponse_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 7'd0;
	error_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 192'd0;
	error_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY 3'd0;
	error_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	error_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 9'd0;
	reportMemoryTraffic_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	    64'd0;
	reportMemoryTraffic_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	reportMemoryTraffic_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	reportMemoryTraffic_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	    7'd0;
	reportStateDbg_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 128'd0;
	reportStateDbg_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY 2'd0;
	reportStateDbg_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	reportStateDbg_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (addrResponse_responseAdapter_bits_EN)
	  addrResponse_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      addrResponse_responseAdapter_bits_D_IN;
	if (addrResponse_responseAdapter_count_EN)
	  addrResponse_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY
	      addrResponse_responseAdapter_count_D_IN;
	if (addrResponse_responseAdapter_notEmptyReg_EN)
	  addrResponse_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      addrResponse_responseAdapter_notEmptyReg_D_IN;
	if (addrResponse_responseAdapter_shift_EN)
	  addrResponse_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      addrResponse_responseAdapter_shift_D_IN;
	if (error_responseAdapter_bits_EN)
	  error_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      error_responseAdapter_bits_D_IN;
	if (error_responseAdapter_count_EN)
	  error_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY
	      error_responseAdapter_count_D_IN;
	if (error_responseAdapter_notEmptyReg_EN)
	  error_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      error_responseAdapter_notEmptyReg_D_IN;
	if (error_responseAdapter_shift_EN)
	  error_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      error_responseAdapter_shift_D_IN;
	if (reportMemoryTraffic_responseAdapter_bits_EN)
	  reportMemoryTraffic_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      reportMemoryTraffic_responseAdapter_bits_D_IN;
	if (reportMemoryTraffic_responseAdapter_count_EN)
	  reportMemoryTraffic_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY
	      reportMemoryTraffic_responseAdapter_count_D_IN;
	if (reportMemoryTraffic_responseAdapter_notEmptyReg_EN)
	  reportMemoryTraffic_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      reportMemoryTraffic_responseAdapter_notEmptyReg_D_IN;
	if (reportMemoryTraffic_responseAdapter_shift_EN)
	  reportMemoryTraffic_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      reportMemoryTraffic_responseAdapter_shift_D_IN;
	if (reportStateDbg_responseAdapter_bits_EN)
	  reportStateDbg_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      reportStateDbg_responseAdapter_bits_D_IN;
	if (reportStateDbg_responseAdapter_count_EN)
	  reportStateDbg_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY
	      reportStateDbg_responseAdapter_count_D_IN;
	if (reportStateDbg_responseAdapter_notEmptyReg_EN)
	  reportStateDbg_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      reportStateDbg_responseAdapter_notEmptyReg_D_IN;
	if (reportStateDbg_responseAdapter_shift_EN)
	  reportStateDbg_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      reportStateDbg_responseAdapter_shift_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    addrResponse_responseAdapter_bits = 64'hAAAAAAAAAAAAAAAA;
    addrResponse_responseAdapter_count = 1'h0;
    addrResponse_responseAdapter_notEmptyReg = 1'h0;
    addrResponse_responseAdapter_shift = 7'h2A;
    error_responseAdapter_bits =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    error_responseAdapter_count = 3'h2;
    error_responseAdapter_notEmptyReg = 1'h0;
    error_responseAdapter_shift = 9'h0AA;
    reportMemoryTraffic_responseAdapter_bits = 64'hAAAAAAAAAAAAAAAA;
    reportMemoryTraffic_responseAdapter_count = 1'h0;
    reportMemoryTraffic_responseAdapter_notEmptyReg = 1'h0;
    reportMemoryTraffic_responseAdapter_shift = 7'h2A;
    reportStateDbg_responseAdapter_bits =
	128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    reportStateDbg_responseAdapter_count = 2'h2;
    reportStateDbg_responseAdapter_notEmptyReg = 1'h0;
    reportStateDbg_responseAdapter_shift = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMemServerIndicationOutputPipes

