//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_addrTrans  CF ( ifc_setTileState,
// 			     ifc_stateDbg,
// 			     ifc_memoryTraffic,
// 			     inverseIfc_addrTrans,
// 			     inverseIfc_setTileState,
// 			     inverseIfc_stateDbg,
// 			     inverseIfc_memoryTraffic );
// schedule ifc_addrTrans  C ( ifc_addrTrans );
//
// schedule ifc_setTileState  CF ( ifc_addrTrans,
// 				ifc_stateDbg,
// 				ifc_memoryTraffic,
// 				inverseIfc_addrTrans,
// 				inverseIfc_setTileState,
// 				inverseIfc_stateDbg,
// 				inverseIfc_memoryTraffic );
// schedule ifc_setTileState  C ( ifc_setTileState );
//
// schedule ifc_stateDbg  CF ( ifc_addrTrans,
// 			    ifc_setTileState,
// 			    ifc_memoryTraffic,
// 			    inverseIfc_addrTrans,
// 			    inverseIfc_setTileState,
// 			    inverseIfc_stateDbg,
// 			    inverseIfc_memoryTraffic );
// schedule ifc_stateDbg  C ( ifc_stateDbg );
//
// schedule ifc_memoryTraffic  CF ( ifc_addrTrans,
// 				 ifc_setTileState,
// 				 ifc_stateDbg,
// 				 inverseIfc_addrTrans,
// 				 inverseIfc_setTileState,
// 				 inverseIfc_stateDbg,
// 				 inverseIfc_memoryTraffic );
// schedule ifc_memoryTraffic  C ( ifc_memoryTraffic );
//
// schedule inverseIfc_addrTrans  CF ( ifc_addrTrans,
// 				    ifc_setTileState,
// 				    ifc_stateDbg,
// 				    ifc_memoryTraffic,
// 				    inverseIfc_setTileState,
// 				    inverseIfc_stateDbg,
// 				    inverseIfc_memoryTraffic );
// schedule inverseIfc_addrTrans  C ( inverseIfc_addrTrans );
//
// schedule inverseIfc_setTileState  CF ( ifc_addrTrans,
// 				       ifc_setTileState,
// 				       ifc_stateDbg,
// 				       ifc_memoryTraffic,
// 				       inverseIfc_addrTrans,
// 				       inverseIfc_stateDbg,
// 				       inverseIfc_memoryTraffic );
// schedule inverseIfc_setTileState  C ( inverseIfc_setTileState );
//
// schedule inverseIfc_stateDbg  CF ( ifc_addrTrans,
// 				   ifc_setTileState,
// 				   ifc_stateDbg,
// 				   ifc_memoryTraffic,
// 				   inverseIfc_addrTrans,
// 				   inverseIfc_setTileState,
// 				   inverseIfc_memoryTraffic );
// schedule inverseIfc_stateDbg  C ( inverseIfc_stateDbg );
//
// schedule inverseIfc_memoryTraffic  CF ( ifc_addrTrans,
// 					ifc_setTileState,
// 					ifc_stateDbg,
// 					ifc_memoryTraffic,
// 					inverseIfc_addrTrans,
// 					inverseIfc_setTileState,
// 					inverseIfc_stateDbg );
// schedule inverseIfc_memoryTraffic  C ( inverseIfc_memoryTraffic );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_addrTrans              O     1 reg
// RDY_ifc_setTileState           O     1 reg
// RDY_ifc_stateDbg               O     1 reg
// RDY_ifc_memoryTraffic          O     1 reg
// inverseIfc_addrTrans           O    64 reg
// RDY_inverseIfc_addrTrans       O     1 reg
// inverseIfc_setTileState        O     4 reg
// RDY_inverseIfc_setTileState    O     1 reg
// inverseIfc_stateDbg            O     1 reg
// RDY_inverseIfc_stateDbg        O     1 reg
// inverseIfc_memoryTraffic       O     1 reg
// RDY_inverseIfc_memoryTraffic   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_addrTrans_sglId            I    32 reg
// ifc_addrTrans_offset           I    32 reg
// ifc_setTileState_tc            I     4 reg
// ifc_stateDbg_rc                I     1 reg
// ifc_memoryTraffic_rc           I     1 reg
// EN_ifc_addrTrans               I     1
// EN_ifc_setTileState            I     1
// EN_ifc_stateDbg                I     1
// EN_ifc_memoryTraffic           I     1
// EN_inverseIfc_addrTrans        I     1
// EN_inverseIfc_setTileState     I     1
// EN_inverseIfc_stateDbg         I     1
// EN_inverseIfc_memoryTraffic    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMemServerRequestInverter(CLK,
				  RST_N,

				  ifc_addrTrans_sglId,
				  ifc_addrTrans_offset,
				  EN_ifc_addrTrans,
				  RDY_ifc_addrTrans,

				  ifc_setTileState_tc,
				  EN_ifc_setTileState,
				  RDY_ifc_setTileState,

				  ifc_stateDbg_rc,
				  EN_ifc_stateDbg,
				  RDY_ifc_stateDbg,

				  ifc_memoryTraffic_rc,
				  EN_ifc_memoryTraffic,
				  RDY_ifc_memoryTraffic,

				  EN_inverseIfc_addrTrans,
				  inverseIfc_addrTrans,
				  RDY_inverseIfc_addrTrans,

				  EN_inverseIfc_setTileState,
				  inverseIfc_setTileState,
				  RDY_inverseIfc_setTileState,

				  EN_inverseIfc_stateDbg,
				  inverseIfc_stateDbg,
				  RDY_inverseIfc_stateDbg,

				  EN_inverseIfc_memoryTraffic,
				  inverseIfc_memoryTraffic,
				  RDY_inverseIfc_memoryTraffic);
  input  CLK;
  input  RST_N;

  // action method ifc_addrTrans
  input  [31 : 0] ifc_addrTrans_sglId;
  input  [31 : 0] ifc_addrTrans_offset;
  input  EN_ifc_addrTrans;
  output RDY_ifc_addrTrans;

  // action method ifc_setTileState
  input  [3 : 0] ifc_setTileState_tc;
  input  EN_ifc_setTileState;
  output RDY_ifc_setTileState;

  // action method ifc_stateDbg
  input  ifc_stateDbg_rc;
  input  EN_ifc_stateDbg;
  output RDY_ifc_stateDbg;

  // action method ifc_memoryTraffic
  input  ifc_memoryTraffic_rc;
  input  EN_ifc_memoryTraffic;
  output RDY_ifc_memoryTraffic;

  // actionvalue method inverseIfc_addrTrans
  input  EN_inverseIfc_addrTrans;
  output [63 : 0] inverseIfc_addrTrans;
  output RDY_inverseIfc_addrTrans;

  // actionvalue method inverseIfc_setTileState
  input  EN_inverseIfc_setTileState;
  output [3 : 0] inverseIfc_setTileState;
  output RDY_inverseIfc_setTileState;

  // actionvalue method inverseIfc_stateDbg
  input  EN_inverseIfc_stateDbg;
  output inverseIfc_stateDbg;
  output RDY_inverseIfc_stateDbg;

  // actionvalue method inverseIfc_memoryTraffic
  input  EN_inverseIfc_memoryTraffic;
  output inverseIfc_memoryTraffic;
  output RDY_inverseIfc_memoryTraffic;

  // signals for module outputs
  wire [63 : 0] inverseIfc_addrTrans;
  wire [3 : 0] inverseIfc_setTileState;
  wire RDY_ifc_addrTrans,
       RDY_ifc_memoryTraffic,
       RDY_ifc_setTileState,
       RDY_ifc_stateDbg,
       RDY_inverseIfc_addrTrans,
       RDY_inverseIfc_memoryTraffic,
       RDY_inverseIfc_setTileState,
       RDY_inverseIfc_stateDbg,
       inverseIfc_memoryTraffic,
       inverseIfc_stateDbg;

  // ports of submodule fifo_addrTrans
  wire [63 : 0] fifo_addrTrans_D_IN, fifo_addrTrans_D_OUT;
  wire fifo_addrTrans_CLR,
       fifo_addrTrans_DEQ,
       fifo_addrTrans_EMPTY_N,
       fifo_addrTrans_ENQ,
       fifo_addrTrans_FULL_N;

  // ports of submodule fifo_memoryTraffic
  wire fifo_memoryTraffic_CLR,
       fifo_memoryTraffic_DEQ,
       fifo_memoryTraffic_D_IN,
       fifo_memoryTraffic_D_OUT,
       fifo_memoryTraffic_EMPTY_N,
       fifo_memoryTraffic_ENQ,
       fifo_memoryTraffic_FULL_N;

  // ports of submodule fifo_setTileState
  wire [3 : 0] fifo_setTileState_D_IN, fifo_setTileState_D_OUT;
  wire fifo_setTileState_CLR,
       fifo_setTileState_DEQ,
       fifo_setTileState_EMPTY_N,
       fifo_setTileState_ENQ,
       fifo_setTileState_FULL_N;

  // ports of submodule fifo_stateDbg
  wire fifo_stateDbg_CLR,
       fifo_stateDbg_DEQ,
       fifo_stateDbg_D_IN,
       fifo_stateDbg_D_OUT,
       fifo_stateDbg_EMPTY_N,
       fifo_stateDbg_ENQ,
       fifo_stateDbg_FULL_N;

  // action method ifc_addrTrans
  assign RDY_ifc_addrTrans = fifo_addrTrans_FULL_N ;

  // action method ifc_setTileState
  assign RDY_ifc_setTileState = fifo_setTileState_FULL_N ;

  // action method ifc_stateDbg
  assign RDY_ifc_stateDbg = fifo_stateDbg_FULL_N ;

  // action method ifc_memoryTraffic
  assign RDY_ifc_memoryTraffic = fifo_memoryTraffic_FULL_N ;

  // actionvalue method inverseIfc_addrTrans
  assign inverseIfc_addrTrans = fifo_addrTrans_D_OUT ;
  assign RDY_inverseIfc_addrTrans = fifo_addrTrans_EMPTY_N ;

  // actionvalue method inverseIfc_setTileState
  assign inverseIfc_setTileState = fifo_setTileState_D_OUT ;
  assign RDY_inverseIfc_setTileState = fifo_setTileState_EMPTY_N ;

  // actionvalue method inverseIfc_stateDbg
  assign inverseIfc_stateDbg = fifo_stateDbg_D_OUT ;
  assign RDY_inverseIfc_stateDbg = fifo_stateDbg_EMPTY_N ;

  // actionvalue method inverseIfc_memoryTraffic
  assign inverseIfc_memoryTraffic = fifo_memoryTraffic_D_OUT ;
  assign RDY_inverseIfc_memoryTraffic = fifo_memoryTraffic_EMPTY_N ;

  // submodule fifo_addrTrans
  FIFO2 #(.width(32'd64), .guarded(1'd1)) fifo_addrTrans(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(fifo_addrTrans_D_IN),
							 .ENQ(fifo_addrTrans_ENQ),
							 .DEQ(fifo_addrTrans_DEQ),
							 .CLR(fifo_addrTrans_CLR),
							 .D_OUT(fifo_addrTrans_D_OUT),
							 .FULL_N(fifo_addrTrans_FULL_N),
							 .EMPTY_N(fifo_addrTrans_EMPTY_N));

  // submodule fifo_memoryTraffic
  FIFO2 #(.width(32'd1), .guarded(1'd1)) fifo_memoryTraffic(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(fifo_memoryTraffic_D_IN),
							    .ENQ(fifo_memoryTraffic_ENQ),
							    .DEQ(fifo_memoryTraffic_DEQ),
							    .CLR(fifo_memoryTraffic_CLR),
							    .D_OUT(fifo_memoryTraffic_D_OUT),
							    .FULL_N(fifo_memoryTraffic_FULL_N),
							    .EMPTY_N(fifo_memoryTraffic_EMPTY_N));

  // submodule fifo_setTileState
  FIFO2 #(.width(32'd4), .guarded(1'd1)) fifo_setTileState(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(fifo_setTileState_D_IN),
							   .ENQ(fifo_setTileState_ENQ),
							   .DEQ(fifo_setTileState_DEQ),
							   .CLR(fifo_setTileState_CLR),
							   .D_OUT(fifo_setTileState_D_OUT),
							   .FULL_N(fifo_setTileState_FULL_N),
							   .EMPTY_N(fifo_setTileState_EMPTY_N));

  // submodule fifo_stateDbg
  FIFO2 #(.width(32'd1), .guarded(1'd1)) fifo_stateDbg(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(fifo_stateDbg_D_IN),
						       .ENQ(fifo_stateDbg_ENQ),
						       .DEQ(fifo_stateDbg_DEQ),
						       .CLR(fifo_stateDbg_CLR),
						       .D_OUT(fifo_stateDbg_D_OUT),
						       .FULL_N(fifo_stateDbg_FULL_N),
						       .EMPTY_N(fifo_stateDbg_EMPTY_N));

  // submodule fifo_addrTrans
  assign fifo_addrTrans_D_IN = { ifc_addrTrans_sglId, ifc_addrTrans_offset } ;
  assign fifo_addrTrans_ENQ = EN_ifc_addrTrans ;
  assign fifo_addrTrans_DEQ = EN_inverseIfc_addrTrans ;
  assign fifo_addrTrans_CLR = 1'b0 ;

  // submodule fifo_memoryTraffic
  assign fifo_memoryTraffic_D_IN = ifc_memoryTraffic_rc ;
  assign fifo_memoryTraffic_ENQ = EN_ifc_memoryTraffic ;
  assign fifo_memoryTraffic_DEQ = EN_inverseIfc_memoryTraffic ;
  assign fifo_memoryTraffic_CLR = 1'b0 ;

  // submodule fifo_setTileState
  assign fifo_setTileState_D_IN = ifc_setTileState_tc ;
  assign fifo_setTileState_ENQ = EN_ifc_setTileState ;
  assign fifo_setTileState_DEQ = EN_inverseIfc_setTileState ;
  assign fifo_setTileState_CLR = 1'b0 ;

  // submodule fifo_stateDbg
  assign fifo_stateDbg_D_IN = ifc_stateDbg_rc ;
  assign fifo_stateDbg_ENQ = EN_ifc_stateDbg ;
  assign fifo_stateDbg_DEQ = EN_inverseIfc_stateDbg ;
  assign fifo_stateDbg_CLR = 1'b0 ;
endmodule  // mkMemServerRequestInverter

