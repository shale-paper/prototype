//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule methods_addrTrans_enq  CF ( methods_setTileState_enq,
// 				     methods_setTileState_notFull,
// 				     methods_stateDbg_enq,
// 				     methods_stateDbg_notFull,
// 				     methods_memoryTraffic_enq,
// 				     methods_memoryTraffic_notFull,
// 				     portalIfc_messageSize_size,
// 				     portalIfc_indications_0_first,
// 				     portalIfc_indications_0_deq,
// 				     portalIfc_indications_1_first,
// 				     portalIfc_indications_1_deq,
// 				     portalIfc_indications_1_notEmpty,
// 				     portalIfc_indications_2_first,
// 				     portalIfc_indications_2_deq,
// 				     portalIfc_indications_2_notEmpty,
// 				     portalIfc_indications_3_first,
// 				     portalIfc_indications_3_deq,
// 				     portalIfc_indications_3_notEmpty );
// schedule methods_addrTrans_enq  C ( methods_addrTrans_enq );
//
// schedule methods_addrTrans_notFull  CF ( methods_addrTrans_notFull,
// 					 methods_setTileState_enq,
// 					 methods_setTileState_notFull,
// 					 methods_stateDbg_enq,
// 					 methods_stateDbg_notFull,
// 					 methods_memoryTraffic_enq,
// 					 methods_memoryTraffic_notFull,
// 					 portalIfc_messageSize_size,
// 					 portalIfc_indications_0_first,
// 					 portalIfc_indications_0_notEmpty,
// 					 portalIfc_indications_1_first,
// 					 portalIfc_indications_1_deq,
// 					 portalIfc_indications_1_notEmpty,
// 					 portalIfc_indications_2_first,
// 					 portalIfc_indications_2_deq,
// 					 portalIfc_indications_2_notEmpty,
// 					 portalIfc_indications_3_first,
// 					 portalIfc_indications_3_deq,
// 					 portalIfc_indications_3_notEmpty,
// 					 portalIfc_intr_status,
// 					 portalIfc_intr_channel );
// schedule methods_addrTrans_notFull  SB ( methods_addrTrans_enq,
// 					 portalIfc_indications_0_deq );
//
// schedule methods_setTileState_enq  CF ( methods_addrTrans_enq,
// 					methods_addrTrans_notFull,
// 					methods_stateDbg_enq,
// 					methods_stateDbg_notFull,
// 					methods_memoryTraffic_enq,
// 					methods_memoryTraffic_notFull,
// 					portalIfc_messageSize_size,
// 					portalIfc_indications_0_first,
// 					portalIfc_indications_0_deq,
// 					portalIfc_indications_0_notEmpty,
// 					portalIfc_indications_1_first,
// 					portalIfc_indications_1_deq,
// 					portalIfc_indications_2_first,
// 					portalIfc_indications_2_deq,
// 					portalIfc_indications_2_notEmpty,
// 					portalIfc_indications_3_first,
// 					portalIfc_indications_3_deq,
// 					portalIfc_indications_3_notEmpty );
// schedule methods_setTileState_enq  C ( methods_setTileState_enq );
//
// schedule methods_setTileState_notFull  CF ( methods_addrTrans_enq,
// 					    methods_addrTrans_notFull,
// 					    methods_setTileState_notFull,
// 					    methods_stateDbg_enq,
// 					    methods_stateDbg_notFull,
// 					    methods_memoryTraffic_enq,
// 					    methods_memoryTraffic_notFull,
// 					    portalIfc_messageSize_size,
// 					    portalIfc_indications_0_first,
// 					    portalIfc_indications_0_deq,
// 					    portalIfc_indications_0_notEmpty,
// 					    portalIfc_indications_1_first,
// 					    portalIfc_indications_1_notEmpty,
// 					    portalIfc_indications_2_first,
// 					    portalIfc_indications_2_deq,
// 					    portalIfc_indications_2_notEmpty,
// 					    portalIfc_indications_3_first,
// 					    portalIfc_indications_3_deq,
// 					    portalIfc_indications_3_notEmpty,
// 					    portalIfc_intr_status,
// 					    portalIfc_intr_channel );
// schedule methods_setTileState_notFull  SB ( methods_setTileState_enq,
// 					    portalIfc_indications_1_deq );
//
// schedule methods_stateDbg_enq  CF ( methods_addrTrans_enq,
// 				    methods_addrTrans_notFull,
// 				    methods_setTileState_enq,
// 				    methods_setTileState_notFull,
// 				    methods_memoryTraffic_enq,
// 				    methods_memoryTraffic_notFull,
// 				    portalIfc_messageSize_size,
// 				    portalIfc_indications_0_first,
// 				    portalIfc_indications_0_deq,
// 				    portalIfc_indications_0_notEmpty,
// 				    portalIfc_indications_1_first,
// 				    portalIfc_indications_1_deq,
// 				    portalIfc_indications_1_notEmpty,
// 				    portalIfc_indications_2_first,
// 				    portalIfc_indications_2_deq,
// 				    portalIfc_indications_3_first,
// 				    portalIfc_indications_3_deq,
// 				    portalIfc_indications_3_notEmpty );
// schedule methods_stateDbg_enq  C ( methods_stateDbg_enq );
//
// schedule methods_stateDbg_notFull  CF ( methods_addrTrans_enq,
// 					methods_addrTrans_notFull,
// 					methods_setTileState_enq,
// 					methods_setTileState_notFull,
// 					methods_stateDbg_notFull,
// 					methods_memoryTraffic_enq,
// 					methods_memoryTraffic_notFull,
// 					portalIfc_messageSize_size,
// 					portalIfc_indications_0_first,
// 					portalIfc_indications_0_deq,
// 					portalIfc_indications_0_notEmpty,
// 					portalIfc_indications_1_first,
// 					portalIfc_indications_1_deq,
// 					portalIfc_indications_1_notEmpty,
// 					portalIfc_indications_2_first,
// 					portalIfc_indications_2_notEmpty,
// 					portalIfc_indications_3_first,
// 					portalIfc_indications_3_deq,
// 					portalIfc_indications_3_notEmpty,
// 					portalIfc_intr_status,
// 					portalIfc_intr_channel );
// schedule methods_stateDbg_notFull  SB ( methods_stateDbg_enq,
// 					portalIfc_indications_2_deq );
//
// schedule methods_memoryTraffic_enq  CF ( methods_addrTrans_enq,
// 					 methods_addrTrans_notFull,
// 					 methods_setTileState_enq,
// 					 methods_setTileState_notFull,
// 					 methods_stateDbg_enq,
// 					 methods_stateDbg_notFull,
// 					 portalIfc_messageSize_size,
// 					 portalIfc_indications_0_first,
// 					 portalIfc_indications_0_deq,
// 					 portalIfc_indications_0_notEmpty,
// 					 portalIfc_indications_1_first,
// 					 portalIfc_indications_1_deq,
// 					 portalIfc_indications_1_notEmpty,
// 					 portalIfc_indications_2_first,
// 					 portalIfc_indications_2_deq,
// 					 portalIfc_indications_2_notEmpty,
// 					 portalIfc_indications_3_first,
// 					 portalIfc_indications_3_deq );
// schedule methods_memoryTraffic_enq  C ( methods_memoryTraffic_enq );
//
// schedule methods_memoryTraffic_notFull  CF ( methods_addrTrans_enq,
// 					     methods_addrTrans_notFull,
// 					     methods_setTileState_enq,
// 					     methods_setTileState_notFull,
// 					     methods_stateDbg_enq,
// 					     methods_stateDbg_notFull,
// 					     methods_memoryTraffic_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_deq,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_indications_3_first,
// 					     portalIfc_indications_3_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule methods_memoryTraffic_notFull  SB ( methods_memoryTraffic_enq,
// 					     portalIfc_indications_3_deq );
//
// schedule portalIfc_messageSize_size  CF ( methods_addrTrans_enq,
// 					  methods_addrTrans_notFull,
// 					  methods_setTileState_enq,
// 					  methods_setTileState_notFull,
// 					  methods_stateDbg_enq,
// 					  methods_stateDbg_notFull,
// 					  methods_memoryTraffic_enq,
// 					  methods_memoryTraffic_notFull,
// 					  portalIfc_messageSize_size,
// 					  portalIfc_indications_0_first,
// 					  portalIfc_indications_0_deq,
// 					  portalIfc_indications_0_notEmpty,
// 					  portalIfc_indications_1_first,
// 					  portalIfc_indications_1_deq,
// 					  portalIfc_indications_1_notEmpty,
// 					  portalIfc_indications_2_first,
// 					  portalIfc_indications_2_deq,
// 					  portalIfc_indications_2_notEmpty,
// 					  portalIfc_indications_3_first,
// 					  portalIfc_indications_3_deq,
// 					  portalIfc_indications_3_notEmpty,
// 					  portalIfc_intr_status,
// 					  portalIfc_intr_channel );
//
// schedule portalIfc_indications_0_first  CF ( methods_addrTrans_enq,
// 					     methods_addrTrans_notFull,
// 					     methods_setTileState_enq,
// 					     methods_setTileState_notFull,
// 					     methods_stateDbg_enq,
// 					     methods_stateDbg_notFull,
// 					     methods_memoryTraffic_enq,
// 					     methods_memoryTraffic_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_deq,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_indications_3_first,
// 					     portalIfc_indications_3_deq,
// 					     portalIfc_indications_3_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_0_first  SB ( portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_0_deq  CF ( methods_addrTrans_enq,
// 					   methods_setTileState_enq,
// 					   methods_setTileState_notFull,
// 					   methods_stateDbg_enq,
// 					   methods_stateDbg_notFull,
// 					   methods_memoryTraffic_enq,
// 					   methods_memoryTraffic_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty,
// 					   portalIfc_indications_2_first,
// 					   portalIfc_indications_2_deq,
// 					   portalIfc_indications_2_notEmpty,
// 					   portalIfc_indications_3_first,
// 					   portalIfc_indications_3_deq,
// 					   portalIfc_indications_3_notEmpty );
// schedule portalIfc_indications_0_deq  C ( portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_0_notEmpty  CF ( methods_addrTrans_notFull,
// 						methods_setTileState_enq,
// 						methods_setTileState_notFull,
// 						methods_stateDbg_enq,
// 						methods_stateDbg_notFull,
// 						methods_memoryTraffic_enq,
// 						methods_memoryTraffic_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_deq,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_deq,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_indications_3_first,
// 						portalIfc_indications_3_deq,
// 						portalIfc_indications_3_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_0_notEmpty  SB ( methods_addrTrans_enq,
// 						portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_1_first  CF ( methods_addrTrans_enq,
// 					     methods_addrTrans_notFull,
// 					     methods_setTileState_enq,
// 					     methods_setTileState_notFull,
// 					     methods_stateDbg_enq,
// 					     methods_stateDbg_notFull,
// 					     methods_memoryTraffic_enq,
// 					     methods_memoryTraffic_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_deq,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_indications_3_first,
// 					     portalIfc_indications_3_deq,
// 					     portalIfc_indications_3_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_1_first  SB ( portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_1_deq  CF ( methods_addrTrans_enq,
// 					   methods_addrTrans_notFull,
// 					   methods_setTileState_enq,
// 					   methods_stateDbg_enq,
// 					   methods_stateDbg_notFull,
// 					   methods_memoryTraffic_enq,
// 					   methods_memoryTraffic_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty,
// 					   portalIfc_indications_2_first,
// 					   portalIfc_indications_2_deq,
// 					   portalIfc_indications_2_notEmpty,
// 					   portalIfc_indications_3_first,
// 					   portalIfc_indications_3_deq,
// 					   portalIfc_indications_3_notEmpty );
// schedule portalIfc_indications_1_deq  C ( portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_1_notEmpty  CF ( methods_addrTrans_enq,
// 						methods_addrTrans_notFull,
// 						methods_setTileState_notFull,
// 						methods_stateDbg_enq,
// 						methods_stateDbg_notFull,
// 						methods_memoryTraffic_enq,
// 						methods_memoryTraffic_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_deq,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_deq,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_indications_3_first,
// 						portalIfc_indications_3_deq,
// 						portalIfc_indications_3_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_1_notEmpty  SB ( methods_setTileState_enq,
// 						portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_2_first  CF ( methods_addrTrans_enq,
// 					     methods_addrTrans_notFull,
// 					     methods_setTileState_enq,
// 					     methods_setTileState_notFull,
// 					     methods_stateDbg_enq,
// 					     methods_stateDbg_notFull,
// 					     methods_memoryTraffic_enq,
// 					     methods_memoryTraffic_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_indications_3_first,
// 					     portalIfc_indications_3_deq,
// 					     portalIfc_indications_3_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_2_first  SB ( portalIfc_indications_2_deq );
//
// schedule portalIfc_indications_2_deq  CF ( methods_addrTrans_enq,
// 					   methods_addrTrans_notFull,
// 					   methods_setTileState_enq,
// 					   methods_setTileState_notFull,
// 					   methods_stateDbg_enq,
// 					   methods_memoryTraffic_enq,
// 					   methods_memoryTraffic_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty,
// 					   portalIfc_indications_3_first,
// 					   portalIfc_indications_3_deq,
// 					   portalIfc_indications_3_notEmpty );
// schedule portalIfc_indications_2_deq  C ( portalIfc_indications_2_deq );
//
// schedule portalIfc_indications_2_notEmpty  CF ( methods_addrTrans_enq,
// 						methods_addrTrans_notFull,
// 						methods_setTileState_enq,
// 						methods_setTileState_notFull,
// 						methods_stateDbg_notFull,
// 						methods_memoryTraffic_enq,
// 						methods_memoryTraffic_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_deq,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_deq,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_indications_3_first,
// 						portalIfc_indications_3_deq,
// 						portalIfc_indications_3_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_2_notEmpty  SB ( methods_stateDbg_enq,
// 						portalIfc_indications_2_deq );
//
// schedule portalIfc_indications_3_first  CF ( methods_addrTrans_enq,
// 					     methods_addrTrans_notFull,
// 					     methods_setTileState_enq,
// 					     methods_setTileState_notFull,
// 					     methods_stateDbg_enq,
// 					     methods_stateDbg_notFull,
// 					     methods_memoryTraffic_enq,
// 					     methods_memoryTraffic_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_deq,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_indications_3_first,
// 					     portalIfc_indications_3_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_3_first  SB ( portalIfc_indications_3_deq );
//
// schedule portalIfc_indications_3_deq  CF ( methods_addrTrans_enq,
// 					   methods_addrTrans_notFull,
// 					   methods_setTileState_enq,
// 					   methods_setTileState_notFull,
// 					   methods_stateDbg_enq,
// 					   methods_stateDbg_notFull,
// 					   methods_memoryTraffic_enq,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty,
// 					   portalIfc_indications_2_first,
// 					   portalIfc_indications_2_deq,
// 					   portalIfc_indications_2_notEmpty );
// schedule portalIfc_indications_3_deq  C ( portalIfc_indications_3_deq );
//
// schedule portalIfc_indications_3_notEmpty  CF ( methods_addrTrans_enq,
// 						methods_addrTrans_notFull,
// 						methods_setTileState_enq,
// 						methods_setTileState_notFull,
// 						methods_stateDbg_enq,
// 						methods_stateDbg_notFull,
// 						methods_memoryTraffic_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_deq,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_deq,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_deq,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_indications_3_first,
// 						portalIfc_indications_3_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_3_notEmpty  SB ( methods_memoryTraffic_enq,
// 						portalIfc_indications_3_deq );
//
// schedule portalIfc_intr_status  CF ( methods_addrTrans_notFull,
// 				     methods_setTileState_notFull,
// 				     methods_stateDbg_notFull,
// 				     methods_memoryTraffic_notFull,
// 				     portalIfc_messageSize_size,
// 				     portalIfc_indications_0_first,
// 				     portalIfc_indications_0_notEmpty,
// 				     portalIfc_indications_1_first,
// 				     portalIfc_indications_1_notEmpty,
// 				     portalIfc_indications_2_first,
// 				     portalIfc_indications_2_notEmpty,
// 				     portalIfc_indications_3_first,
// 				     portalIfc_indications_3_notEmpty,
// 				     portalIfc_intr_status,
// 				     portalIfc_intr_channel );
// schedule portalIfc_intr_status  SB ( methods_addrTrans_enq,
// 				     methods_setTileState_enq,
// 				     methods_stateDbg_enq,
// 				     methods_memoryTraffic_enq,
// 				     portalIfc_indications_0_deq,
// 				     portalIfc_indications_1_deq,
// 				     portalIfc_indications_2_deq,
// 				     portalIfc_indications_3_deq );
//
// schedule portalIfc_intr_channel  CF ( methods_addrTrans_notFull,
// 				      methods_setTileState_notFull,
// 				      methods_stateDbg_notFull,
// 				      methods_memoryTraffic_notFull,
// 				      portalIfc_messageSize_size,
// 				      portalIfc_indications_0_first,
// 				      portalIfc_indications_0_notEmpty,
// 				      portalIfc_indications_1_first,
// 				      portalIfc_indications_1_notEmpty,
// 				      portalIfc_indications_2_first,
// 				      portalIfc_indications_2_notEmpty,
// 				      portalIfc_indications_3_first,
// 				      portalIfc_indications_3_notEmpty,
// 				      portalIfc_intr_status,
// 				      portalIfc_intr_channel );
// schedule portalIfc_intr_channel  SB ( methods_addrTrans_enq,
// 				      methods_setTileState_enq,
// 				      methods_stateDbg_enq,
// 				      methods_memoryTraffic_enq,
// 				      portalIfc_indications_0_deq,
// 				      portalIfc_indications_1_deq,
// 				      portalIfc_indications_2_deq,
// 				      portalIfc_indications_3_deq );
//
//
// Ports:
// Name                         I/O  size props
// RDY_methods_addrTrans_enq      O     1
// methods_addrTrans_notFull      O     1
// RDY_methods_addrTrans_notFull  O     1 const
// RDY_methods_setTileState_enq   O     1
// methods_setTileState_notFull   O     1
// RDY_methods_setTileState_notFull  O     1 const
// RDY_methods_stateDbg_enq       O     1
// methods_stateDbg_notFull       O     1
// RDY_methods_stateDbg_notFull   O     1 const
// RDY_methods_memoryTraffic_enq  O     1
// methods_memoryTraffic_notFull  O     1
// RDY_methods_memoryTraffic_notFull  O     1 const
// portalIfc_messageSize_size     O    16
// RDY_portalIfc_messageSize_size  O     1 const
// portalIfc_indications_0_first  O    32 reg
// RDY_portalIfc_indications_0_first  O     1 reg
// RDY_portalIfc_indications_0_deq  O     1 reg
// portalIfc_indications_0_notEmpty  O     1 reg
// RDY_portalIfc_indications_0_notEmpty  O     1 const
// portalIfc_indications_1_first  O    32 reg
// RDY_portalIfc_indications_1_first  O     1 reg
// RDY_portalIfc_indications_1_deq  O     1 reg
// portalIfc_indications_1_notEmpty  O     1 reg
// RDY_portalIfc_indications_1_notEmpty  O     1 const
// portalIfc_indications_2_first  O    32 reg
// RDY_portalIfc_indications_2_first  O     1 reg
// RDY_portalIfc_indications_2_deq  O     1 reg
// portalIfc_indications_2_notEmpty  O     1 reg
// RDY_portalIfc_indications_2_notEmpty  O     1 const
// portalIfc_indications_3_first  O    32 reg
// RDY_portalIfc_indications_3_first  O     1 reg
// RDY_portalIfc_indications_3_deq  O     1 reg
// portalIfc_indications_3_notEmpty  O     1 reg
// RDY_portalIfc_indications_3_notEmpty  O     1 const
// portalIfc_intr_status          O     1
// RDY_portalIfc_intr_status      O     1 const
// portalIfc_intr_channel         O    32
// RDY_portalIfc_intr_channel     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// methods_addrTrans_enq_v        I    64
// methods_setTileState_enq_v     I     4 reg
// methods_stateDbg_enq_v         I     1 reg
// methods_memoryTraffic_enq_v    I     1 reg
// portalIfc_messageSize_size_methodNumber  I    16
// EN_methods_addrTrans_enq       I     1
// EN_methods_setTileState_enq    I     1
// EN_methods_stateDbg_enq        I     1
// EN_methods_memoryTraffic_enq   I     1
// EN_portalIfc_indications_0_deq  I     1
// EN_portalIfc_indications_1_deq  I     1
// EN_portalIfc_indications_2_deq  I     1
// EN_portalIfc_indications_3_deq  I     1
//
// Combinational paths from inputs to outputs:
//   portalIfc_messageSize_size_methodNumber -> portalIfc_messageSize_size
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMemServerRequestOutputPipes(CLK,
				     RST_N,

				     methods_addrTrans_enq_v,
				     EN_methods_addrTrans_enq,
				     RDY_methods_addrTrans_enq,

				     methods_addrTrans_notFull,
				     RDY_methods_addrTrans_notFull,

				     methods_setTileState_enq_v,
				     EN_methods_setTileState_enq,
				     RDY_methods_setTileState_enq,

				     methods_setTileState_notFull,
				     RDY_methods_setTileState_notFull,

				     methods_stateDbg_enq_v,
				     EN_methods_stateDbg_enq,
				     RDY_methods_stateDbg_enq,

				     methods_stateDbg_notFull,
				     RDY_methods_stateDbg_notFull,

				     methods_memoryTraffic_enq_v,
				     EN_methods_memoryTraffic_enq,
				     RDY_methods_memoryTraffic_enq,

				     methods_memoryTraffic_notFull,
				     RDY_methods_memoryTraffic_notFull,

				     portalIfc_messageSize_size_methodNumber,
				     portalIfc_messageSize_size,
				     RDY_portalIfc_messageSize_size,

				     portalIfc_indications_0_first,
				     RDY_portalIfc_indications_0_first,

				     EN_portalIfc_indications_0_deq,
				     RDY_portalIfc_indications_0_deq,

				     portalIfc_indications_0_notEmpty,
				     RDY_portalIfc_indications_0_notEmpty,

				     portalIfc_indications_1_first,
				     RDY_portalIfc_indications_1_first,

				     EN_portalIfc_indications_1_deq,
				     RDY_portalIfc_indications_1_deq,

				     portalIfc_indications_1_notEmpty,
				     RDY_portalIfc_indications_1_notEmpty,

				     portalIfc_indications_2_first,
				     RDY_portalIfc_indications_2_first,

				     EN_portalIfc_indications_2_deq,
				     RDY_portalIfc_indications_2_deq,

				     portalIfc_indications_2_notEmpty,
				     RDY_portalIfc_indications_2_notEmpty,

				     portalIfc_indications_3_first,
				     RDY_portalIfc_indications_3_first,

				     EN_portalIfc_indications_3_deq,
				     RDY_portalIfc_indications_3_deq,

				     portalIfc_indications_3_notEmpty,
				     RDY_portalIfc_indications_3_notEmpty,

				     portalIfc_intr_status,
				     RDY_portalIfc_intr_status,

				     portalIfc_intr_channel,
				     RDY_portalIfc_intr_channel);
  input  CLK;
  input  RST_N;

  // action method methods_addrTrans_enq
  input  [63 : 0] methods_addrTrans_enq_v;
  input  EN_methods_addrTrans_enq;
  output RDY_methods_addrTrans_enq;

  // value method methods_addrTrans_notFull
  output methods_addrTrans_notFull;
  output RDY_methods_addrTrans_notFull;

  // action method methods_setTileState_enq
  input  [3 : 0] methods_setTileState_enq_v;
  input  EN_methods_setTileState_enq;
  output RDY_methods_setTileState_enq;

  // value method methods_setTileState_notFull
  output methods_setTileState_notFull;
  output RDY_methods_setTileState_notFull;

  // action method methods_stateDbg_enq
  input  methods_stateDbg_enq_v;
  input  EN_methods_stateDbg_enq;
  output RDY_methods_stateDbg_enq;

  // value method methods_stateDbg_notFull
  output methods_stateDbg_notFull;
  output RDY_methods_stateDbg_notFull;

  // action method methods_memoryTraffic_enq
  input  methods_memoryTraffic_enq_v;
  input  EN_methods_memoryTraffic_enq;
  output RDY_methods_memoryTraffic_enq;

  // value method methods_memoryTraffic_notFull
  output methods_memoryTraffic_notFull;
  output RDY_methods_memoryTraffic_notFull;

  // value method portalIfc_messageSize_size
  input  [15 : 0] portalIfc_messageSize_size_methodNumber;
  output [15 : 0] portalIfc_messageSize_size;
  output RDY_portalIfc_messageSize_size;

  // value method portalIfc_indications_0_first
  output [31 : 0] portalIfc_indications_0_first;
  output RDY_portalIfc_indications_0_first;

  // action method portalIfc_indications_0_deq
  input  EN_portalIfc_indications_0_deq;
  output RDY_portalIfc_indications_0_deq;

  // value method portalIfc_indications_0_notEmpty
  output portalIfc_indications_0_notEmpty;
  output RDY_portalIfc_indications_0_notEmpty;

  // value method portalIfc_indications_1_first
  output [31 : 0] portalIfc_indications_1_first;
  output RDY_portalIfc_indications_1_first;

  // action method portalIfc_indications_1_deq
  input  EN_portalIfc_indications_1_deq;
  output RDY_portalIfc_indications_1_deq;

  // value method portalIfc_indications_1_notEmpty
  output portalIfc_indications_1_notEmpty;
  output RDY_portalIfc_indications_1_notEmpty;

  // value method portalIfc_indications_2_first
  output [31 : 0] portalIfc_indications_2_first;
  output RDY_portalIfc_indications_2_first;

  // action method portalIfc_indications_2_deq
  input  EN_portalIfc_indications_2_deq;
  output RDY_portalIfc_indications_2_deq;

  // value method portalIfc_indications_2_notEmpty
  output portalIfc_indications_2_notEmpty;
  output RDY_portalIfc_indications_2_notEmpty;

  // value method portalIfc_indications_3_first
  output [31 : 0] portalIfc_indications_3_first;
  output RDY_portalIfc_indications_3_first;

  // action method portalIfc_indications_3_deq
  input  EN_portalIfc_indications_3_deq;
  output RDY_portalIfc_indications_3_deq;

  // value method portalIfc_indications_3_notEmpty
  output portalIfc_indications_3_notEmpty;
  output RDY_portalIfc_indications_3_notEmpty;

  // value method portalIfc_intr_status
  output portalIfc_intr_status;
  output RDY_portalIfc_intr_status;

  // value method portalIfc_intr_channel
  output [31 : 0] portalIfc_intr_channel;
  output RDY_portalIfc_intr_channel;

  // signals for module outputs
  reg [15 : 0] portalIfc_messageSize_size;
  wire [31 : 0] portalIfc_indications_0_first,
		portalIfc_indications_1_first,
		portalIfc_indications_2_first,
		portalIfc_indications_3_first,
		portalIfc_intr_channel;
  wire RDY_methods_addrTrans_enq,
       RDY_methods_addrTrans_notFull,
       RDY_methods_memoryTraffic_enq,
       RDY_methods_memoryTraffic_notFull,
       RDY_methods_setTileState_enq,
       RDY_methods_setTileState_notFull,
       RDY_methods_stateDbg_enq,
       RDY_methods_stateDbg_notFull,
       RDY_portalIfc_indications_0_deq,
       RDY_portalIfc_indications_0_first,
       RDY_portalIfc_indications_0_notEmpty,
       RDY_portalIfc_indications_1_deq,
       RDY_portalIfc_indications_1_first,
       RDY_portalIfc_indications_1_notEmpty,
       RDY_portalIfc_indications_2_deq,
       RDY_portalIfc_indications_2_first,
       RDY_portalIfc_indications_2_notEmpty,
       RDY_portalIfc_indications_3_deq,
       RDY_portalIfc_indications_3_first,
       RDY_portalIfc_indications_3_notEmpty,
       RDY_portalIfc_intr_channel,
       RDY_portalIfc_intr_status,
       RDY_portalIfc_messageSize_size,
       methods_addrTrans_notFull,
       methods_memoryTraffic_notFull,
       methods_setTileState_notFull,
       methods_stateDbg_notFull,
       portalIfc_indications_0_notEmpty,
       portalIfc_indications_1_notEmpty,
       portalIfc_indications_2_notEmpty,
       portalIfc_indications_3_notEmpty,
       portalIfc_intr_status;

  // register addrTrans_responseAdapter_bits
  reg [63 : 0] addrTrans_responseAdapter_bits;
  wire [63 : 0] addrTrans_responseAdapter_bits_D_IN;
  wire addrTrans_responseAdapter_bits_EN;

  // register addrTrans_responseAdapter_count
  reg addrTrans_responseAdapter_count;
  wire addrTrans_responseAdapter_count_D_IN,
       addrTrans_responseAdapter_count_EN;

  // register addrTrans_responseAdapter_notEmptyReg
  reg addrTrans_responseAdapter_notEmptyReg;
  wire addrTrans_responseAdapter_notEmptyReg_D_IN,
       addrTrans_responseAdapter_notEmptyReg_EN;

  // register addrTrans_responseAdapter_shift
  reg [6 : 0] addrTrans_responseAdapter_shift;
  wire [6 : 0] addrTrans_responseAdapter_shift_D_IN;
  wire addrTrans_responseAdapter_shift_EN;

  // register memoryTraffic_responseAdapter_bits
  reg [31 : 0] memoryTraffic_responseAdapter_bits;
  wire [31 : 0] memoryTraffic_responseAdapter_bits_D_IN;
  wire memoryTraffic_responseAdapter_bits_EN;

  // register memoryTraffic_responseAdapter_notEmptyReg
  reg memoryTraffic_responseAdapter_notEmptyReg;
  wire memoryTraffic_responseAdapter_notEmptyReg_D_IN,
       memoryTraffic_responseAdapter_notEmptyReg_EN;

  // register memoryTraffic_responseAdapter_shift
  reg memoryTraffic_responseAdapter_shift;
  wire memoryTraffic_responseAdapter_shift_D_IN,
       memoryTraffic_responseAdapter_shift_EN;

  // register setTileState_responseAdapter_bits
  reg [31 : 0] setTileState_responseAdapter_bits;
  wire [31 : 0] setTileState_responseAdapter_bits_D_IN;
  wire setTileState_responseAdapter_bits_EN;

  // register setTileState_responseAdapter_notEmptyReg
  reg setTileState_responseAdapter_notEmptyReg;
  wire setTileState_responseAdapter_notEmptyReg_D_IN,
       setTileState_responseAdapter_notEmptyReg_EN;

  // register setTileState_responseAdapter_shift
  reg [2 : 0] setTileState_responseAdapter_shift;
  wire [2 : 0] setTileState_responseAdapter_shift_D_IN;
  wire setTileState_responseAdapter_shift_EN;

  // register stateDbg_responseAdapter_bits
  reg [31 : 0] stateDbg_responseAdapter_bits;
  wire [31 : 0] stateDbg_responseAdapter_bits_D_IN;
  wire stateDbg_responseAdapter_bits_EN;

  // register stateDbg_responseAdapter_notEmptyReg
  reg stateDbg_responseAdapter_notEmptyReg;
  wire stateDbg_responseAdapter_notEmptyReg_D_IN,
       stateDbg_responseAdapter_notEmptyReg_EN;

  // register stateDbg_responseAdapter_shift
  reg stateDbg_responseAdapter_shift;
  wire stateDbg_responseAdapter_shift_D_IN, stateDbg_responseAdapter_shift_EN;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_addrTrans_responseAdapter_bits_write_1__VAL_1;
  wire MUX_addrTrans_responseAdapter_bits_write_1__SEL_1,
       MUX_addrTrans_responseAdapter_notEmptyReg_write_1__SEL_1;

  // remaining internal signals
  wire [31 : 0] IF_setTileState_responseAdapter_notEmptyReg_TH_ETC___d32;
  wire x__h1199;

  // action method methods_addrTrans_enq
  assign RDY_methods_addrTrans_enq = !addrTrans_responseAdapter_notEmptyReg ;

  // value method methods_addrTrans_notFull
  assign methods_addrTrans_notFull = !addrTrans_responseAdapter_notEmptyReg ;
  assign RDY_methods_addrTrans_notFull = 1'd1 ;

  // action method methods_setTileState_enq
  assign RDY_methods_setTileState_enq =
	     !setTileState_responseAdapter_notEmptyReg ;

  // value method methods_setTileState_notFull
  assign methods_setTileState_notFull =
	     !setTileState_responseAdapter_notEmptyReg ;
  assign RDY_methods_setTileState_notFull = 1'd1 ;

  // action method methods_stateDbg_enq
  assign RDY_methods_stateDbg_enq = !stateDbg_responseAdapter_notEmptyReg ;

  // value method methods_stateDbg_notFull
  assign methods_stateDbg_notFull = !stateDbg_responseAdapter_notEmptyReg ;
  assign RDY_methods_stateDbg_notFull = 1'd1 ;

  // action method methods_memoryTraffic_enq
  assign RDY_methods_memoryTraffic_enq =
	     !memoryTraffic_responseAdapter_notEmptyReg ;

  // value method methods_memoryTraffic_notFull
  assign methods_memoryTraffic_notFull =
	     !memoryTraffic_responseAdapter_notEmptyReg ;
  assign RDY_methods_memoryTraffic_notFull = 1'd1 ;

  // value method portalIfc_messageSize_size
  always@(portalIfc_messageSize_size_methodNumber)
  begin
    case (portalIfc_messageSize_size_methodNumber)
      16'd0: portalIfc_messageSize_size = 16'd64;
      16'd1: portalIfc_messageSize_size = 16'd4;
      default: portalIfc_messageSize_size = 16'd1;
    endcase
  end
  assign RDY_portalIfc_messageSize_size = 1'd1 ;

  // value method portalIfc_indications_0_first
  assign portalIfc_indications_0_first =
	     addrTrans_responseAdapter_bits[63:32] ;
  assign RDY_portalIfc_indications_0_first =
	     addrTrans_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_0_deq
  assign RDY_portalIfc_indications_0_deq =
	     addrTrans_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_0_notEmpty
  assign portalIfc_indications_0_notEmpty =
	     addrTrans_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_0_notEmpty = 1'd1 ;

  // value method portalIfc_indications_1_first
  assign portalIfc_indications_1_first = setTileState_responseAdapter_bits ;
  assign RDY_portalIfc_indications_1_first =
	     setTileState_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_1_deq
  assign RDY_portalIfc_indications_1_deq =
	     setTileState_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_1_notEmpty
  assign portalIfc_indications_1_notEmpty =
	     setTileState_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_1_notEmpty = 1'd1 ;

  // value method portalIfc_indications_2_first
  assign portalIfc_indications_2_first = stateDbg_responseAdapter_bits ;
  assign RDY_portalIfc_indications_2_first =
	     stateDbg_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_2_deq
  assign RDY_portalIfc_indications_2_deq =
	     stateDbg_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_2_notEmpty
  assign portalIfc_indications_2_notEmpty =
	     stateDbg_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_2_notEmpty = 1'd1 ;

  // value method portalIfc_indications_3_first
  assign portalIfc_indications_3_first = memoryTraffic_responseAdapter_bits ;
  assign RDY_portalIfc_indications_3_first =
	     memoryTraffic_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_3_deq
  assign RDY_portalIfc_indications_3_deq =
	     memoryTraffic_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_3_notEmpty
  assign portalIfc_indications_3_notEmpty =
	     memoryTraffic_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_3_notEmpty = 1'd1 ;

  // value method portalIfc_intr_status
  assign portalIfc_intr_status =
	     addrTrans_responseAdapter_notEmptyReg ||
	     setTileState_responseAdapter_notEmptyReg ||
	     stateDbg_responseAdapter_notEmptyReg ||
	     memoryTraffic_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_intr_status = 1'd1 ;

  // value method portalIfc_intr_channel
  assign portalIfc_intr_channel =
	     addrTrans_responseAdapter_notEmptyReg ?
	       32'd0 :
	       IF_setTileState_responseAdapter_notEmptyReg_TH_ETC___d32 ;
  assign RDY_portalIfc_intr_channel = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_addrTrans_responseAdapter_bits_write_1__SEL_1 =
	     EN_portalIfc_indications_0_deq &&
	     !addrTrans_responseAdapter_count ;
  assign MUX_addrTrans_responseAdapter_notEmptyReg_write_1__SEL_1 =
	     EN_portalIfc_indications_0_deq &&
	     addrTrans_responseAdapter_count ;
  assign MUX_addrTrans_responseAdapter_bits_write_1__VAL_1 =
	     { addrTrans_responseAdapter_bits[31:0], 32'd0 } ;

  // register addrTrans_responseAdapter_bits
  assign addrTrans_responseAdapter_bits_D_IN =
	     MUX_addrTrans_responseAdapter_bits_write_1__SEL_1 ?
	       MUX_addrTrans_responseAdapter_bits_write_1__VAL_1 :
	       methods_addrTrans_enq_v ;
  assign addrTrans_responseAdapter_bits_EN =
	     EN_portalIfc_indications_0_deq &&
	     !addrTrans_responseAdapter_count ||
	     EN_methods_addrTrans_enq ;

  // register addrTrans_responseAdapter_count
  assign addrTrans_responseAdapter_count_D_IN =
	     !addrTrans_responseAdapter_count && x__h1199 ;
  assign addrTrans_responseAdapter_count_EN = EN_portalIfc_indications_0_deq ;

  // register addrTrans_responseAdapter_notEmptyReg
  assign addrTrans_responseAdapter_notEmptyReg_D_IN =
	     !MUX_addrTrans_responseAdapter_notEmptyReg_write_1__SEL_1 ;
  assign addrTrans_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_0_deq &&
	     addrTrans_responseAdapter_count ||
	     EN_methods_addrTrans_enq ;

  // register addrTrans_responseAdapter_shift
  assign addrTrans_responseAdapter_shift_D_IN =
	     addrTrans_responseAdapter_shift + 7'd32 ;
  assign addrTrans_responseAdapter_shift_EN =
	     MUX_addrTrans_responseAdapter_bits_write_1__SEL_1 ;

  // register memoryTraffic_responseAdapter_bits
  assign memoryTraffic_responseAdapter_bits_D_IN =
	     { 31'd0, methods_memoryTraffic_enq_v } ;
  assign memoryTraffic_responseAdapter_bits_EN =
	     EN_methods_memoryTraffic_enq ;

  // register memoryTraffic_responseAdapter_notEmptyReg
  assign memoryTraffic_responseAdapter_notEmptyReg_D_IN =
	     !EN_portalIfc_indications_3_deq ;
  assign memoryTraffic_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_3_deq || EN_methods_memoryTraffic_enq ;

  // register memoryTraffic_responseAdapter_shift
  assign memoryTraffic_responseAdapter_shift_D_IN = 1'b0 ;
  assign memoryTraffic_responseAdapter_shift_EN = 1'b0 ;

  // register setTileState_responseAdapter_bits
  assign setTileState_responseAdapter_bits_D_IN =
	     { 28'd0, methods_setTileState_enq_v } ;
  assign setTileState_responseAdapter_bits_EN = EN_methods_setTileState_enq ;

  // register setTileState_responseAdapter_notEmptyReg
  assign setTileState_responseAdapter_notEmptyReg_D_IN =
	     !EN_portalIfc_indications_1_deq ;
  assign setTileState_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_1_deq || EN_methods_setTileState_enq ;

  // register setTileState_responseAdapter_shift
  assign setTileState_responseAdapter_shift_D_IN = 3'h0 ;
  assign setTileState_responseAdapter_shift_EN = 1'b0 ;

  // register stateDbg_responseAdapter_bits
  assign stateDbg_responseAdapter_bits_D_IN =
	     { 31'd0, methods_stateDbg_enq_v } ;
  assign stateDbg_responseAdapter_bits_EN = EN_methods_stateDbg_enq ;

  // register stateDbg_responseAdapter_notEmptyReg
  assign stateDbg_responseAdapter_notEmptyReg_D_IN =
	     !EN_portalIfc_indications_2_deq ;
  assign stateDbg_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_2_deq || EN_methods_stateDbg_enq ;

  // register stateDbg_responseAdapter_shift
  assign stateDbg_responseAdapter_shift_D_IN = 1'b0 ;
  assign stateDbg_responseAdapter_shift_EN = 1'b0 ;

  // remaining internal signals
  assign IF_setTileState_responseAdapter_notEmptyReg_TH_ETC___d32 =
	     setTileState_responseAdapter_notEmptyReg ?
	       32'd1 :
	       (stateDbg_responseAdapter_notEmptyReg ?
		  32'd2 :
		  (memoryTraffic_responseAdapter_notEmptyReg ?
		     32'd3 :
		     32'hFFFFFFFF)) ;
  assign x__h1199 = addrTrans_responseAdapter_count + 1'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        addrTrans_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 64'd0;
	addrTrans_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY 1'd0;
	addrTrans_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	addrTrans_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 7'd0;
	memoryTraffic_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 32'd0;
	memoryTraffic_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	memoryTraffic_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 1'd0;
	setTileState_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 32'd0;
	setTileState_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	setTileState_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 3'd0;
	stateDbg_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 32'd0;
	stateDbg_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stateDbg_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (addrTrans_responseAdapter_bits_EN)
	  addrTrans_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      addrTrans_responseAdapter_bits_D_IN;
	if (addrTrans_responseAdapter_count_EN)
	  addrTrans_responseAdapter_count <= `BSV_ASSIGNMENT_DELAY
	      addrTrans_responseAdapter_count_D_IN;
	if (addrTrans_responseAdapter_notEmptyReg_EN)
	  addrTrans_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      addrTrans_responseAdapter_notEmptyReg_D_IN;
	if (addrTrans_responseAdapter_shift_EN)
	  addrTrans_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      addrTrans_responseAdapter_shift_D_IN;
	if (memoryTraffic_responseAdapter_bits_EN)
	  memoryTraffic_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      memoryTraffic_responseAdapter_bits_D_IN;
	if (memoryTraffic_responseAdapter_notEmptyReg_EN)
	  memoryTraffic_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      memoryTraffic_responseAdapter_notEmptyReg_D_IN;
	if (memoryTraffic_responseAdapter_shift_EN)
	  memoryTraffic_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      memoryTraffic_responseAdapter_shift_D_IN;
	if (setTileState_responseAdapter_bits_EN)
	  setTileState_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      setTileState_responseAdapter_bits_D_IN;
	if (setTileState_responseAdapter_notEmptyReg_EN)
	  setTileState_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      setTileState_responseAdapter_notEmptyReg_D_IN;
	if (setTileState_responseAdapter_shift_EN)
	  setTileState_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      setTileState_responseAdapter_shift_D_IN;
	if (stateDbg_responseAdapter_bits_EN)
	  stateDbg_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      stateDbg_responseAdapter_bits_D_IN;
	if (stateDbg_responseAdapter_notEmptyReg_EN)
	  stateDbg_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      stateDbg_responseAdapter_notEmptyReg_D_IN;
	if (stateDbg_responseAdapter_shift_EN)
	  stateDbg_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      stateDbg_responseAdapter_shift_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    addrTrans_responseAdapter_bits = 64'hAAAAAAAAAAAAAAAA;
    addrTrans_responseAdapter_count = 1'h0;
    addrTrans_responseAdapter_notEmptyReg = 1'h0;
    addrTrans_responseAdapter_shift = 7'h2A;
    memoryTraffic_responseAdapter_bits = 32'hAAAAAAAA;
    memoryTraffic_responseAdapter_notEmptyReg = 1'h0;
    memoryTraffic_responseAdapter_shift = 1'h0;
    setTileState_responseAdapter_bits = 32'hAAAAAAAA;
    setTileState_responseAdapter_notEmptyReg = 1'h0;
    setTileState_responseAdapter_shift = 3'h2;
    stateDbg_responseAdapter_bits = 32'hAAAAAAAA;
    stateDbg_responseAdapter_notEmptyReg = 1'h0;
    stateDbg_responseAdapter_shift = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMemServerRequestOutputPipes

