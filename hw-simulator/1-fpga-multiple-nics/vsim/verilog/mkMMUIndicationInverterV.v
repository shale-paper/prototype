//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_idResponse  CF ( ifc_idResponse,
// 			      ifc_configResp,
// 			      ifc_error,
// 			      inverseIfc_idResponse,
// 			      inverseIfc_configResp,
// 			      inverseIfc_error );
//
// schedule ifc_configResp  CF ( ifc_idResponse,
// 			      ifc_configResp,
// 			      ifc_error,
// 			      inverseIfc_idResponse,
// 			      inverseIfc_configResp,
// 			      inverseIfc_error );
//
// schedule ifc_error  CF ( ifc_idResponse,
// 			 ifc_configResp,
// 			 ifc_error,
// 			 inverseIfc_idResponse,
// 			 inverseIfc_configResp,
// 			 inverseIfc_error );
//
// schedule inverseIfc_idResponse  CF ( ifc_idResponse,
// 				     ifc_configResp,
// 				     ifc_error,
// 				     inverseIfc_idResponse,
// 				     inverseIfc_configResp,
// 				     inverseIfc_error );
//
// schedule inverseIfc_configResp  CF ( ifc_idResponse,
// 				     ifc_configResp,
// 				     ifc_error,
// 				     inverseIfc_idResponse,
// 				     inverseIfc_configResp,
// 				     inverseIfc_error );
//
// schedule inverseIfc_error  CF ( ifc_idResponse,
// 				ifc_configResp,
// 				ifc_error,
// 				inverseIfc_idResponse,
// 				inverseIfc_configResp,
// 				inverseIfc_error );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_idResponse             O     1
// RDY_ifc_configResp             O     1
// RDY_ifc_error                  O     1
// inverseIfc_idResponse          O    32
// RDY_inverseIfc_idResponse      O     1
// inverseIfc_configResp          O    32
// RDY_inverseIfc_configResp      O     1
// inverseIfc_error               O   192
// RDY_inverseIfc_error           O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_idResponse_sglId           I    32
// ifc_configResp_sglId           I    32
// ifc_error_code                 I    32
// ifc_error_sglId                I    32
// ifc_error_offset               I    64
// ifc_error_extra                I    64
// EN_ifc_idResponse              I     1
// EN_ifc_configResp              I     1
// EN_ifc_error                   I     1
// EN_inverseIfc_idResponse       I     1
// EN_inverseIfc_configResp       I     1
// EN_inverseIfc_error            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMUIndicationInverterV(CLK,
				RST_N,

				ifc_idResponse_sglId,
				EN_ifc_idResponse,
				RDY_ifc_idResponse,

				ifc_configResp_sglId,
				EN_ifc_configResp,
				RDY_ifc_configResp,

				ifc_error_code,
				ifc_error_sglId,
				ifc_error_offset,
				ifc_error_extra,
				EN_ifc_error,
				RDY_ifc_error,

				EN_inverseIfc_idResponse,
				inverseIfc_idResponse,
				RDY_inverseIfc_idResponse,

				EN_inverseIfc_configResp,
				inverseIfc_configResp,
				RDY_inverseIfc_configResp,

				EN_inverseIfc_error,
				inverseIfc_error,
				RDY_inverseIfc_error);
  input  CLK;
  input  RST_N;

  // action method ifc_idResponse
  input  [31 : 0] ifc_idResponse_sglId;
  input  EN_ifc_idResponse;
  output RDY_ifc_idResponse;

  // action method ifc_configResp
  input  [31 : 0] ifc_configResp_sglId;
  input  EN_ifc_configResp;
  output RDY_ifc_configResp;

  // action method ifc_error
  input  [31 : 0] ifc_error_code;
  input  [31 : 0] ifc_error_sglId;
  input  [63 : 0] ifc_error_offset;
  input  [63 : 0] ifc_error_extra;
  input  EN_ifc_error;
  output RDY_ifc_error;

  // actionvalue method inverseIfc_idResponse
  input  EN_inverseIfc_idResponse;
  output [31 : 0] inverseIfc_idResponse;
  output RDY_inverseIfc_idResponse;

  // actionvalue method inverseIfc_configResp
  input  EN_inverseIfc_configResp;
  output [31 : 0] inverseIfc_configResp;
  output RDY_inverseIfc_configResp;

  // actionvalue method inverseIfc_error
  input  EN_inverseIfc_error;
  output [191 : 0] inverseIfc_error;
  output RDY_inverseIfc_error;

  // signals for module outputs
  wire [191 : 0] inverseIfc_error;
  wire [31 : 0] inverseIfc_configResp, inverseIfc_idResponse;
  wire RDY_ifc_configResp,
       RDY_ifc_error,
       RDY_ifc_idResponse,
       RDY_inverseIfc_configResp,
       RDY_inverseIfc_error,
       RDY_inverseIfc_idResponse;

  // ports of submodule inv_configResp_inverter
  wire [31 : 0] inv_configResp_inverter_get, inv_configResp_inverter_put;
  wire inv_configResp_inverter_EN_get,
       inv_configResp_inverter_EN_put,
       inv_configResp_inverter_RDY_get,
       inv_configResp_inverter_RDY_put;

  // ports of submodule inv_error_inverter
  wire [191 : 0] inv_error_inverter_get, inv_error_inverter_put;
  wire inv_error_inverter_EN_get,
       inv_error_inverter_EN_put,
       inv_error_inverter_RDY_get,
       inv_error_inverter_RDY_put;

  // ports of submodule inv_idResponse_inverter
  wire [31 : 0] inv_idResponse_inverter_get, inv_idResponse_inverter_put;
  wire inv_idResponse_inverter_EN_get,
       inv_idResponse_inverter_EN_put,
       inv_idResponse_inverter_RDY_get,
       inv_idResponse_inverter_RDY_put;

  // action method ifc_idResponse
  assign RDY_ifc_idResponse = inv_idResponse_inverter_RDY_put ;

  // action method ifc_configResp
  assign RDY_ifc_configResp = inv_configResp_inverter_RDY_put ;

  // action method ifc_error
  assign RDY_ifc_error = inv_error_inverter_RDY_put ;

  // actionvalue method inverseIfc_idResponse
  assign inverseIfc_idResponse = inv_idResponse_inverter_get ;
  assign RDY_inverseIfc_idResponse = inv_idResponse_inverter_RDY_get ;

  // actionvalue method inverseIfc_configResp
  assign inverseIfc_configResp = inv_configResp_inverter_get ;
  assign RDY_inverseIfc_configResp = inv_configResp_inverter_RDY_get ;

  // actionvalue method inverseIfc_error
  assign inverseIfc_error = inv_error_inverter_get ;
  assign RDY_inverseIfc_error = inv_error_inverter_RDY_get ;

  // submodule inv_configResp_inverter
  PutInverter #(.DATA_WIDTH(32'd32)) inv_configResp_inverter(.CLK(CLK),
							     .RST(RST_N),
							     .put(inv_configResp_inverter_put),
							     .EN_put(inv_configResp_inverter_EN_put),
							     .EN_get(inv_configResp_inverter_EN_get),
							     .RDY_put(inv_configResp_inverter_RDY_put),
							     .get(inv_configResp_inverter_get),
							     .RDY_get(inv_configResp_inverter_RDY_get));

  // submodule inv_error_inverter
  PutInverter #(.DATA_WIDTH(32'd192)) inv_error_inverter(.CLK(CLK),
							 .RST(RST_N),
							 .put(inv_error_inverter_put),
							 .EN_put(inv_error_inverter_EN_put),
							 .EN_get(inv_error_inverter_EN_get),
							 .RDY_put(inv_error_inverter_RDY_put),
							 .get(inv_error_inverter_get),
							 .RDY_get(inv_error_inverter_RDY_get));

  // submodule inv_idResponse_inverter
  PutInverter #(.DATA_WIDTH(32'd32)) inv_idResponse_inverter(.CLK(CLK),
							     .RST(RST_N),
							     .put(inv_idResponse_inverter_put),
							     .EN_put(inv_idResponse_inverter_EN_put),
							     .EN_get(inv_idResponse_inverter_EN_get),
							     .RDY_put(inv_idResponse_inverter_RDY_put),
							     .get(inv_idResponse_inverter_get),
							     .RDY_get(inv_idResponse_inverter_RDY_get));

  // submodule inv_configResp_inverter
  assign inv_configResp_inverter_put = ifc_configResp_sglId ;
  assign inv_configResp_inverter_EN_put = EN_ifc_configResp ;
  assign inv_configResp_inverter_EN_get = EN_inverseIfc_configResp ;

  // submodule inv_error_inverter
  assign inv_error_inverter_put =
	     { ifc_error_code,
	       ifc_error_sglId,
	       ifc_error_offset,
	       ifc_error_extra } ;
  assign inv_error_inverter_EN_put = EN_ifc_error ;
  assign inv_error_inverter_EN_get = EN_inverseIfc_error ;

  // submodule inv_idResponse_inverter
  assign inv_idResponse_inverter_put = ifc_idResponse_sglId ;
  assign inv_idResponse_inverter_EN_put = EN_ifc_idResponse ;
  assign inv_idResponse_inverter_EN_get = EN_inverseIfc_idResponse ;
endmodule  // mkMMUIndicationInverterV

