//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule portalIfc_messageSize_size  CF ( portalIfc_messageSize_size,
// 					  portalIfc_requests_0_enq,
// 					  portalIfc_requests_0_notFull,
// 					  portalIfc_requests_1_enq,
// 					  portalIfc_requests_1_notFull,
// 					  portalIfc_requests_2_enq,
// 					  portalIfc_requests_2_notFull,
// 					  portalIfc_intr_status,
// 					  portalIfc_intr_channel,
// 					  pipes_idResponse_PipeOut_first,
// 					  pipes_idResponse_PipeOut_deq,
// 					  pipes_idResponse_PipeOut_notEmpty,
// 					  pipes_configResp_PipeOut_first,
// 					  pipes_configResp_PipeOut_deq,
// 					  pipes_configResp_PipeOut_notEmpty,
// 					  pipes_error_PipeOut_first,
// 					  pipes_error_PipeOut_deq,
// 					  pipes_error_PipeOut_notEmpty );
//
// schedule portalIfc_requests_0_enq  CF ( portalIfc_messageSize_size,
// 					portalIfc_requests_1_enq,
// 					portalIfc_requests_1_notFull,
// 					portalIfc_requests_2_enq,
// 					portalIfc_requests_2_notFull,
// 					portalIfc_intr_status,
// 					portalIfc_intr_channel,
// 					pipes_idResponse_PipeOut_first,
// 					pipes_configResp_PipeOut_first,
// 					pipes_configResp_PipeOut_deq,
// 					pipes_configResp_PipeOut_notEmpty,
// 					pipes_error_PipeOut_first,
// 					pipes_error_PipeOut_deq,
// 					pipes_error_PipeOut_notEmpty );
// schedule portalIfc_requests_0_enq  SB ( pipes_idResponse_PipeOut_deq );
// schedule portalIfc_requests_0_enq  C ( portalIfc_requests_0_enq );
//
// schedule portalIfc_requests_0_notFull  CF ( portalIfc_messageSize_size,
// 					    portalIfc_requests_0_notFull,
// 					    portalIfc_requests_1_enq,
// 					    portalIfc_requests_1_notFull,
// 					    portalIfc_requests_2_enq,
// 					    portalIfc_requests_2_notFull,
// 					    portalIfc_intr_status,
// 					    portalIfc_intr_channel,
// 					    pipes_idResponse_PipeOut_first,
// 					    pipes_idResponse_PipeOut_notEmpty,
// 					    pipes_configResp_PipeOut_first,
// 					    pipes_configResp_PipeOut_deq,
// 					    pipes_configResp_PipeOut_notEmpty,
// 					    pipes_error_PipeOut_first,
// 					    pipes_error_PipeOut_deq,
// 					    pipes_error_PipeOut_notEmpty );
// schedule portalIfc_requests_0_notFull  SB ( portalIfc_requests_0_enq,
// 					    pipes_idResponse_PipeOut_deq );
//
// schedule portalIfc_requests_1_enq  CF ( portalIfc_messageSize_size,
// 					portalIfc_requests_0_enq,
// 					portalIfc_requests_0_notFull,
// 					portalIfc_requests_2_enq,
// 					portalIfc_requests_2_notFull,
// 					portalIfc_intr_status,
// 					portalIfc_intr_channel,
// 					pipes_idResponse_PipeOut_first,
// 					pipes_idResponse_PipeOut_deq,
// 					pipes_idResponse_PipeOut_notEmpty,
// 					pipes_configResp_PipeOut_first,
// 					pipes_error_PipeOut_first,
// 					pipes_error_PipeOut_deq,
// 					pipes_error_PipeOut_notEmpty );
// schedule portalIfc_requests_1_enq  SB ( pipes_configResp_PipeOut_deq );
// schedule portalIfc_requests_1_enq  C ( portalIfc_requests_1_enq );
//
// schedule portalIfc_requests_1_notFull  CF ( portalIfc_messageSize_size,
// 					    portalIfc_requests_0_enq,
// 					    portalIfc_requests_0_notFull,
// 					    portalIfc_requests_1_notFull,
// 					    portalIfc_requests_2_enq,
// 					    portalIfc_requests_2_notFull,
// 					    portalIfc_intr_status,
// 					    portalIfc_intr_channel,
// 					    pipes_idResponse_PipeOut_first,
// 					    pipes_idResponse_PipeOut_deq,
// 					    pipes_idResponse_PipeOut_notEmpty,
// 					    pipes_configResp_PipeOut_first,
// 					    pipes_configResp_PipeOut_notEmpty,
// 					    pipes_error_PipeOut_first,
// 					    pipes_error_PipeOut_deq,
// 					    pipes_error_PipeOut_notEmpty );
// schedule portalIfc_requests_1_notFull  SB ( portalIfc_requests_1_enq,
// 					    pipes_configResp_PipeOut_deq );
//
// schedule portalIfc_requests_2_enq  CF ( portalIfc_messageSize_size,
// 					portalIfc_requests_0_enq,
// 					portalIfc_requests_0_notFull,
// 					portalIfc_requests_1_enq,
// 					portalIfc_requests_1_notFull,
// 					portalIfc_intr_status,
// 					portalIfc_intr_channel,
// 					pipes_idResponse_PipeOut_first,
// 					pipes_idResponse_PipeOut_deq,
// 					pipes_idResponse_PipeOut_notEmpty,
// 					pipes_configResp_PipeOut_first,
// 					pipes_configResp_PipeOut_deq,
// 					pipes_configResp_PipeOut_notEmpty,
// 					pipes_error_PipeOut_first );
// schedule portalIfc_requests_2_enq  SB ( pipes_error_PipeOut_deq );
// schedule portalIfc_requests_2_enq  C ( portalIfc_requests_2_enq );
//
// schedule portalIfc_requests_2_notFull  CF ( portalIfc_messageSize_size,
// 					    portalIfc_requests_0_enq,
// 					    portalIfc_requests_0_notFull,
// 					    portalIfc_requests_1_enq,
// 					    portalIfc_requests_1_notFull,
// 					    portalIfc_requests_2_notFull,
// 					    portalIfc_intr_status,
// 					    portalIfc_intr_channel,
// 					    pipes_idResponse_PipeOut_first,
// 					    pipes_idResponse_PipeOut_deq,
// 					    pipes_idResponse_PipeOut_notEmpty,
// 					    pipes_configResp_PipeOut_first,
// 					    pipes_configResp_PipeOut_deq,
// 					    pipes_configResp_PipeOut_notEmpty,
// 					    pipes_error_PipeOut_first,
// 					    pipes_error_PipeOut_notEmpty );
// schedule portalIfc_requests_2_notFull  SB ( portalIfc_requests_2_enq,
// 					    pipes_error_PipeOut_deq );
//
// schedule portalIfc_intr_status  CF ( portalIfc_messageSize_size,
// 				     portalIfc_requests_0_enq,
// 				     portalIfc_requests_0_notFull,
// 				     portalIfc_requests_1_enq,
// 				     portalIfc_requests_1_notFull,
// 				     portalIfc_requests_2_enq,
// 				     portalIfc_requests_2_notFull,
// 				     portalIfc_intr_status,
// 				     portalIfc_intr_channel,
// 				     pipes_idResponse_PipeOut_first,
// 				     pipes_idResponse_PipeOut_deq,
// 				     pipes_idResponse_PipeOut_notEmpty,
// 				     pipes_configResp_PipeOut_first,
// 				     pipes_configResp_PipeOut_deq,
// 				     pipes_configResp_PipeOut_notEmpty,
// 				     pipes_error_PipeOut_first,
// 				     pipes_error_PipeOut_deq,
// 				     pipes_error_PipeOut_notEmpty );
//
// schedule portalIfc_intr_channel  CF ( portalIfc_messageSize_size,
// 				      portalIfc_requests_0_enq,
// 				      portalIfc_requests_0_notFull,
// 				      portalIfc_requests_1_enq,
// 				      portalIfc_requests_1_notFull,
// 				      portalIfc_requests_2_enq,
// 				      portalIfc_requests_2_notFull,
// 				      portalIfc_intr_status,
// 				      portalIfc_intr_channel,
// 				      pipes_idResponse_PipeOut_first,
// 				      pipes_idResponse_PipeOut_deq,
// 				      pipes_idResponse_PipeOut_notEmpty,
// 				      pipes_configResp_PipeOut_first,
// 				      pipes_configResp_PipeOut_deq,
// 				      pipes_configResp_PipeOut_notEmpty,
// 				      pipes_error_PipeOut_first,
// 				      pipes_error_PipeOut_deq,
// 				      pipes_error_PipeOut_notEmpty );
//
// schedule pipes_idResponse_PipeOut_first  CF ( portalIfc_messageSize_size,
// 					      portalIfc_requests_0_enq,
// 					      portalIfc_requests_0_notFull,
// 					      portalIfc_requests_1_enq,
// 					      portalIfc_requests_1_notFull,
// 					      portalIfc_requests_2_enq,
// 					      portalIfc_requests_2_notFull,
// 					      portalIfc_intr_status,
// 					      portalIfc_intr_channel,
// 					      pipes_idResponse_PipeOut_first,
// 					      pipes_idResponse_PipeOut_notEmpty,
// 					      pipes_configResp_PipeOut_first,
// 					      pipes_configResp_PipeOut_deq,
// 					      pipes_configResp_PipeOut_notEmpty,
// 					      pipes_error_PipeOut_first,
// 					      pipes_error_PipeOut_deq,
// 					      pipes_error_PipeOut_notEmpty );
// schedule pipes_idResponse_PipeOut_first  SB ( pipes_idResponse_PipeOut_deq );
//
// schedule pipes_idResponse_PipeOut_deq  CF ( portalIfc_messageSize_size,
// 					    portalIfc_requests_1_enq,
// 					    portalIfc_requests_1_notFull,
// 					    portalIfc_requests_2_enq,
// 					    portalIfc_requests_2_notFull,
// 					    portalIfc_intr_status,
// 					    portalIfc_intr_channel,
// 					    pipes_configResp_PipeOut_first,
// 					    pipes_configResp_PipeOut_deq,
// 					    pipes_configResp_PipeOut_notEmpty,
// 					    pipes_error_PipeOut_first,
// 					    pipes_error_PipeOut_deq,
// 					    pipes_error_PipeOut_notEmpty );
// schedule pipes_idResponse_PipeOut_deq  C ( pipes_idResponse_PipeOut_deq );
//
// schedule pipes_idResponse_PipeOut_notEmpty  CF ( portalIfc_messageSize_size,
// 						 portalIfc_requests_0_notFull,
// 						 portalIfc_requests_1_enq,
// 						 portalIfc_requests_1_notFull,
// 						 portalIfc_requests_2_enq,
// 						 portalIfc_requests_2_notFull,
// 						 portalIfc_intr_status,
// 						 portalIfc_intr_channel,
// 						 pipes_idResponse_PipeOut_first,
// 						 pipes_idResponse_PipeOut_notEmpty,
// 						 pipes_configResp_PipeOut_first,
// 						 pipes_configResp_PipeOut_deq,
// 						 pipes_configResp_PipeOut_notEmpty,
// 						 pipes_error_PipeOut_first,
// 						 pipes_error_PipeOut_deq,
// 						 pipes_error_PipeOut_notEmpty );
// schedule pipes_idResponse_PipeOut_notEmpty  SB ( portalIfc_requests_0_enq,
// 						 pipes_idResponse_PipeOut_deq );
//
// schedule pipes_configResp_PipeOut_first  CF ( portalIfc_messageSize_size,
// 					      portalIfc_requests_0_enq,
// 					      portalIfc_requests_0_notFull,
// 					      portalIfc_requests_1_enq,
// 					      portalIfc_requests_1_notFull,
// 					      portalIfc_requests_2_enq,
// 					      portalIfc_requests_2_notFull,
// 					      portalIfc_intr_status,
// 					      portalIfc_intr_channel,
// 					      pipes_idResponse_PipeOut_first,
// 					      pipes_idResponse_PipeOut_deq,
// 					      pipes_idResponse_PipeOut_notEmpty,
// 					      pipes_configResp_PipeOut_first,
// 					      pipes_configResp_PipeOut_notEmpty,
// 					      pipes_error_PipeOut_first,
// 					      pipes_error_PipeOut_deq,
// 					      pipes_error_PipeOut_notEmpty );
// schedule pipes_configResp_PipeOut_first  SB ( pipes_configResp_PipeOut_deq );
//
// schedule pipes_configResp_PipeOut_deq  CF ( portalIfc_messageSize_size,
// 					    portalIfc_requests_0_enq,
// 					    portalIfc_requests_0_notFull,
// 					    portalIfc_requests_2_enq,
// 					    portalIfc_requests_2_notFull,
// 					    portalIfc_intr_status,
// 					    portalIfc_intr_channel,
// 					    pipes_idResponse_PipeOut_first,
// 					    pipes_idResponse_PipeOut_deq,
// 					    pipes_idResponse_PipeOut_notEmpty,
// 					    pipes_error_PipeOut_first,
// 					    pipes_error_PipeOut_deq,
// 					    pipes_error_PipeOut_notEmpty );
// schedule pipes_configResp_PipeOut_deq  C ( pipes_configResp_PipeOut_deq );
//
// schedule pipes_configResp_PipeOut_notEmpty  CF ( portalIfc_messageSize_size,
// 						 portalIfc_requests_0_enq,
// 						 portalIfc_requests_0_notFull,
// 						 portalIfc_requests_1_notFull,
// 						 portalIfc_requests_2_enq,
// 						 portalIfc_requests_2_notFull,
// 						 portalIfc_intr_status,
// 						 portalIfc_intr_channel,
// 						 pipes_idResponse_PipeOut_first,
// 						 pipes_idResponse_PipeOut_deq,
// 						 pipes_idResponse_PipeOut_notEmpty,
// 						 pipes_configResp_PipeOut_first,
// 						 pipes_configResp_PipeOut_notEmpty,
// 						 pipes_error_PipeOut_first,
// 						 pipes_error_PipeOut_deq,
// 						 pipes_error_PipeOut_notEmpty );
// schedule pipes_configResp_PipeOut_notEmpty  SB ( portalIfc_requests_1_enq,
// 						 pipes_configResp_PipeOut_deq );
//
// schedule pipes_error_PipeOut_first  CF ( portalIfc_messageSize_size,
// 					 portalIfc_requests_0_enq,
// 					 portalIfc_requests_0_notFull,
// 					 portalIfc_requests_1_enq,
// 					 portalIfc_requests_1_notFull,
// 					 portalIfc_requests_2_enq,
// 					 portalIfc_requests_2_notFull,
// 					 portalIfc_intr_status,
// 					 portalIfc_intr_channel,
// 					 pipes_idResponse_PipeOut_first,
// 					 pipes_idResponse_PipeOut_deq,
// 					 pipes_idResponse_PipeOut_notEmpty,
// 					 pipes_configResp_PipeOut_first,
// 					 pipes_configResp_PipeOut_deq,
// 					 pipes_configResp_PipeOut_notEmpty,
// 					 pipes_error_PipeOut_first,
// 					 pipes_error_PipeOut_notEmpty );
// schedule pipes_error_PipeOut_first  SB ( pipes_error_PipeOut_deq );
//
// schedule pipes_error_PipeOut_deq  CF ( portalIfc_messageSize_size,
// 				       portalIfc_requests_0_enq,
// 				       portalIfc_requests_0_notFull,
// 				       portalIfc_requests_1_enq,
// 				       portalIfc_requests_1_notFull,
// 				       portalIfc_intr_status,
// 				       portalIfc_intr_channel,
// 				       pipes_idResponse_PipeOut_first,
// 				       pipes_idResponse_PipeOut_deq,
// 				       pipes_idResponse_PipeOut_notEmpty,
// 				       pipes_configResp_PipeOut_first,
// 				       pipes_configResp_PipeOut_deq,
// 				       pipes_configResp_PipeOut_notEmpty );
// schedule pipes_error_PipeOut_deq  C ( pipes_error_PipeOut_deq );
//
// schedule pipes_error_PipeOut_notEmpty  CF ( portalIfc_messageSize_size,
// 					    portalIfc_requests_0_enq,
// 					    portalIfc_requests_0_notFull,
// 					    portalIfc_requests_1_enq,
// 					    portalIfc_requests_1_notFull,
// 					    portalIfc_requests_2_notFull,
// 					    portalIfc_intr_status,
// 					    portalIfc_intr_channel,
// 					    pipes_idResponse_PipeOut_first,
// 					    pipes_idResponse_PipeOut_deq,
// 					    pipes_idResponse_PipeOut_notEmpty,
// 					    pipes_configResp_PipeOut_first,
// 					    pipes_configResp_PipeOut_deq,
// 					    pipes_configResp_PipeOut_notEmpty,
// 					    pipes_error_PipeOut_first,
// 					    pipes_error_PipeOut_notEmpty );
// schedule pipes_error_PipeOut_notEmpty  SB ( portalIfc_requests_2_enq,
// 					    pipes_error_PipeOut_deq );
//
//
// Ports:
// Name                         I/O  size props
// portalIfc_messageSize_size     O    16
// RDY_portalIfc_messageSize_size  O     1 const
// RDY_portalIfc_requests_0_enq   O     1 reg
// portalIfc_requests_0_notFull   O     1 reg
// RDY_portalIfc_requests_0_notFull  O     1 const
// RDY_portalIfc_requests_1_enq   O     1 reg
// portalIfc_requests_1_notFull   O     1 reg
// RDY_portalIfc_requests_1_notFull  O     1 const
// RDY_portalIfc_requests_2_enq   O     1
// portalIfc_requests_2_notFull   O     1 reg
// RDY_portalIfc_requests_2_notFull  O     1 const
// portalIfc_intr_status          O     1 const
// RDY_portalIfc_intr_status      O     1 const
// portalIfc_intr_channel         O    32 const
// RDY_portalIfc_intr_channel     O     1 const
// pipes_idResponse_PipeOut_first  O    32 reg
// RDY_pipes_idResponse_PipeOut_first  O     1 reg
// RDY_pipes_idResponse_PipeOut_deq  O     1 reg
// pipes_idResponse_PipeOut_notEmpty  O     1 reg
// RDY_pipes_idResponse_PipeOut_notEmpty  O     1 const
// pipes_configResp_PipeOut_first  O    32 reg
// RDY_pipes_configResp_PipeOut_first  O     1 reg
// RDY_pipes_configResp_PipeOut_deq  O     1 reg
// pipes_configResp_PipeOut_notEmpty  O     1 reg
// RDY_pipes_configResp_PipeOut_notEmpty  O     1 const
// pipes_error_PipeOut_first      O   192 reg
// RDY_pipes_error_PipeOut_first  O     1 reg
// RDY_pipes_error_PipeOut_deq    O     1 reg
// pipes_error_PipeOut_notEmpty   O     1 reg
// RDY_pipes_error_PipeOut_notEmpty  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// portalIfc_messageSize_size_methodNumber  I    16
// portalIfc_requests_0_enq_v     I    32 reg
// portalIfc_requests_1_enq_v     I    32 reg
// portalIfc_requests_2_enq_v     I    32 reg
// EN_portalIfc_requests_0_enq    I     1
// EN_portalIfc_requests_1_enq    I     1
// EN_portalIfc_requests_2_enq    I     1
// EN_pipes_idResponse_PipeOut_deq  I     1
// EN_pipes_configResp_PipeOut_deq  I     1
// EN_pipes_error_PipeOut_deq     I     1
//
// Combinational paths from inputs to outputs:
//   portalIfc_messageSize_size_methodNumber -> portalIfc_messageSize_size
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMUIndicationInput(CLK,
			    RST_N,

			    portalIfc_messageSize_size_methodNumber,
			    portalIfc_messageSize_size,
			    RDY_portalIfc_messageSize_size,

			    portalIfc_requests_0_enq_v,
			    EN_portalIfc_requests_0_enq,
			    RDY_portalIfc_requests_0_enq,

			    portalIfc_requests_0_notFull,
			    RDY_portalIfc_requests_0_notFull,

			    portalIfc_requests_1_enq_v,
			    EN_portalIfc_requests_1_enq,
			    RDY_portalIfc_requests_1_enq,

			    portalIfc_requests_1_notFull,
			    RDY_portalIfc_requests_1_notFull,

			    portalIfc_requests_2_enq_v,
			    EN_portalIfc_requests_2_enq,
			    RDY_portalIfc_requests_2_enq,

			    portalIfc_requests_2_notFull,
			    RDY_portalIfc_requests_2_notFull,

			    portalIfc_intr_status,
			    RDY_portalIfc_intr_status,

			    portalIfc_intr_channel,
			    RDY_portalIfc_intr_channel,

			    pipes_idResponse_PipeOut_first,
			    RDY_pipes_idResponse_PipeOut_first,

			    EN_pipes_idResponse_PipeOut_deq,
			    RDY_pipes_idResponse_PipeOut_deq,

			    pipes_idResponse_PipeOut_notEmpty,
			    RDY_pipes_idResponse_PipeOut_notEmpty,

			    pipes_configResp_PipeOut_first,
			    RDY_pipes_configResp_PipeOut_first,

			    EN_pipes_configResp_PipeOut_deq,
			    RDY_pipes_configResp_PipeOut_deq,

			    pipes_configResp_PipeOut_notEmpty,
			    RDY_pipes_configResp_PipeOut_notEmpty,

			    pipes_error_PipeOut_first,
			    RDY_pipes_error_PipeOut_first,

			    EN_pipes_error_PipeOut_deq,
			    RDY_pipes_error_PipeOut_deq,

			    pipes_error_PipeOut_notEmpty,
			    RDY_pipes_error_PipeOut_notEmpty);
  input  CLK;
  input  RST_N;

  // value method portalIfc_messageSize_size
  input  [15 : 0] portalIfc_messageSize_size_methodNumber;
  output [15 : 0] portalIfc_messageSize_size;
  output RDY_portalIfc_messageSize_size;

  // action method portalIfc_requests_0_enq
  input  [31 : 0] portalIfc_requests_0_enq_v;
  input  EN_portalIfc_requests_0_enq;
  output RDY_portalIfc_requests_0_enq;

  // value method portalIfc_requests_0_notFull
  output portalIfc_requests_0_notFull;
  output RDY_portalIfc_requests_0_notFull;

  // action method portalIfc_requests_1_enq
  input  [31 : 0] portalIfc_requests_1_enq_v;
  input  EN_portalIfc_requests_1_enq;
  output RDY_portalIfc_requests_1_enq;

  // value method portalIfc_requests_1_notFull
  output portalIfc_requests_1_notFull;
  output RDY_portalIfc_requests_1_notFull;

  // action method portalIfc_requests_2_enq
  input  [31 : 0] portalIfc_requests_2_enq_v;
  input  EN_portalIfc_requests_2_enq;
  output RDY_portalIfc_requests_2_enq;

  // value method portalIfc_requests_2_notFull
  output portalIfc_requests_2_notFull;
  output RDY_portalIfc_requests_2_notFull;

  // value method portalIfc_intr_status
  output portalIfc_intr_status;
  output RDY_portalIfc_intr_status;

  // value method portalIfc_intr_channel
  output [31 : 0] portalIfc_intr_channel;
  output RDY_portalIfc_intr_channel;

  // value method pipes_idResponse_PipeOut_first
  output [31 : 0] pipes_idResponse_PipeOut_first;
  output RDY_pipes_idResponse_PipeOut_first;

  // action method pipes_idResponse_PipeOut_deq
  input  EN_pipes_idResponse_PipeOut_deq;
  output RDY_pipes_idResponse_PipeOut_deq;

  // value method pipes_idResponse_PipeOut_notEmpty
  output pipes_idResponse_PipeOut_notEmpty;
  output RDY_pipes_idResponse_PipeOut_notEmpty;

  // value method pipes_configResp_PipeOut_first
  output [31 : 0] pipes_configResp_PipeOut_first;
  output RDY_pipes_configResp_PipeOut_first;

  // action method pipes_configResp_PipeOut_deq
  input  EN_pipes_configResp_PipeOut_deq;
  output RDY_pipes_configResp_PipeOut_deq;

  // value method pipes_configResp_PipeOut_notEmpty
  output pipes_configResp_PipeOut_notEmpty;
  output RDY_pipes_configResp_PipeOut_notEmpty;

  // value method pipes_error_PipeOut_first
  output [191 : 0] pipes_error_PipeOut_first;
  output RDY_pipes_error_PipeOut_first;

  // action method pipes_error_PipeOut_deq
  input  EN_pipes_error_PipeOut_deq;
  output RDY_pipes_error_PipeOut_deq;

  // value method pipes_error_PipeOut_notEmpty
  output pipes_error_PipeOut_notEmpty;
  output RDY_pipes_error_PipeOut_notEmpty;

  // signals for module outputs
  reg [15 : 0] portalIfc_messageSize_size;
  wire [191 : 0] pipes_error_PipeOut_first;
  wire [31 : 0] pipes_configResp_PipeOut_first,
		pipes_idResponse_PipeOut_first,
		portalIfc_intr_channel;
  wire RDY_pipes_configResp_PipeOut_deq,
       RDY_pipes_configResp_PipeOut_first,
       RDY_pipes_configResp_PipeOut_notEmpty,
       RDY_pipes_error_PipeOut_deq,
       RDY_pipes_error_PipeOut_first,
       RDY_pipes_error_PipeOut_notEmpty,
       RDY_pipes_idResponse_PipeOut_deq,
       RDY_pipes_idResponse_PipeOut_first,
       RDY_pipes_idResponse_PipeOut_notEmpty,
       RDY_portalIfc_intr_channel,
       RDY_portalIfc_intr_status,
       RDY_portalIfc_messageSize_size,
       RDY_portalIfc_requests_0_enq,
       RDY_portalIfc_requests_0_notFull,
       RDY_portalIfc_requests_1_enq,
       RDY_portalIfc_requests_1_notFull,
       RDY_portalIfc_requests_2_enq,
       RDY_portalIfc_requests_2_notFull,
       pipes_configResp_PipeOut_notEmpty,
       pipes_error_PipeOut_notEmpty,
       pipes_idResponse_PipeOut_notEmpty,
       portalIfc_intr_status,
       portalIfc_requests_0_notFull,
       portalIfc_requests_1_notFull,
       portalIfc_requests_2_notFull;

  // register configResp_requestAdapter_fbnbuff
  reg [31 : 0] configResp_requestAdapter_fbnbuff;
  wire [31 : 0] configResp_requestAdapter_fbnbuff_D_IN;
  wire configResp_requestAdapter_fbnbuff_EN;

  // register error_requestAdapter_count
  reg [2 : 0] error_requestAdapter_count;
  wire [2 : 0] error_requestAdapter_count_D_IN;
  wire error_requestAdapter_count_EN;

  // register error_requestAdapter_fbnbuff
  reg [191 : 0] error_requestAdapter_fbnbuff;
  wire [191 : 0] error_requestAdapter_fbnbuff_D_IN;
  wire error_requestAdapter_fbnbuff_EN;

  // register idResponse_requestAdapter_fbnbuff
  reg [31 : 0] idResponse_requestAdapter_fbnbuff;
  wire [31 : 0] idResponse_requestAdapter_fbnbuff_D_IN;
  wire idResponse_requestAdapter_fbnbuff_EN;

  // ports of submodule configResp_requestAdapter_fifo
  wire [31 : 0] configResp_requestAdapter_fifo_D_IN,
		configResp_requestAdapter_fifo_D_OUT;
  wire configResp_requestAdapter_fifo_CLR,
       configResp_requestAdapter_fifo_DEQ,
       configResp_requestAdapter_fifo_EMPTY_N,
       configResp_requestAdapter_fifo_ENQ,
       configResp_requestAdapter_fifo_FULL_N;

  // ports of submodule error_requestAdapter_fifo
  wire [191 : 0] error_requestAdapter_fifo_D_IN,
		 error_requestAdapter_fifo_D_OUT;
  wire error_requestAdapter_fifo_CLR,
       error_requestAdapter_fifo_DEQ,
       error_requestAdapter_fifo_EMPTY_N,
       error_requestAdapter_fifo_ENQ,
       error_requestAdapter_fifo_FULL_N;

  // ports of submodule idResponse_requestAdapter_fifo
  wire [31 : 0] idResponse_requestAdapter_fifo_D_IN,
		idResponse_requestAdapter_fifo_D_OUT;
  wire idResponse_requestAdapter_fifo_CLR,
       idResponse_requestAdapter_fifo_DEQ,
       idResponse_requestAdapter_fifo_EMPTY_N,
       idResponse_requestAdapter_fifo_ENQ,
       idResponse_requestAdapter_fifo_FULL_N;

  // remaining internal signals
  wire [2 : 0] x__h990;

  // value method portalIfc_messageSize_size
  always@(portalIfc_messageSize_size_methodNumber)
  begin
    case (portalIfc_messageSize_size_methodNumber)
      16'd0, 16'd1: portalIfc_messageSize_size = 16'd32;
      default: portalIfc_messageSize_size = 16'd192;
    endcase
  end
  assign RDY_portalIfc_messageSize_size = 1'd1 ;

  // action method portalIfc_requests_0_enq
  assign RDY_portalIfc_requests_0_enq =
	     idResponse_requestAdapter_fifo_FULL_N ;

  // value method portalIfc_requests_0_notFull
  assign portalIfc_requests_0_notFull =
	     idResponse_requestAdapter_fifo_FULL_N ;
  assign RDY_portalIfc_requests_0_notFull = 1'd1 ;

  // action method portalIfc_requests_1_enq
  assign RDY_portalIfc_requests_1_enq =
	     configResp_requestAdapter_fifo_FULL_N ;

  // value method portalIfc_requests_1_notFull
  assign portalIfc_requests_1_notFull =
	     configResp_requestAdapter_fifo_FULL_N ;
  assign RDY_portalIfc_requests_1_notFull = 1'd1 ;

  // action method portalIfc_requests_2_enq
  assign RDY_portalIfc_requests_2_enq =
	     error_requestAdapter_count < 3'd5 ||
	     error_requestAdapter_fifo_FULL_N ;

  // value method portalIfc_requests_2_notFull
  assign portalIfc_requests_2_notFull = error_requestAdapter_fifo_FULL_N ;
  assign RDY_portalIfc_requests_2_notFull = 1'd1 ;

  // value method portalIfc_intr_status
  assign portalIfc_intr_status = 1'd0 ;
  assign RDY_portalIfc_intr_status = 1'd1 ;

  // value method portalIfc_intr_channel
  assign portalIfc_intr_channel = 32'hFFFFFFFF ;
  assign RDY_portalIfc_intr_channel = 1'd1 ;

  // value method pipes_idResponse_PipeOut_first
  assign pipes_idResponse_PipeOut_first =
	     idResponse_requestAdapter_fifo_D_OUT ;
  assign RDY_pipes_idResponse_PipeOut_first =
	     idResponse_requestAdapter_fifo_EMPTY_N ;

  // action method pipes_idResponse_PipeOut_deq
  assign RDY_pipes_idResponse_PipeOut_deq =
	     idResponse_requestAdapter_fifo_EMPTY_N ;

  // value method pipes_idResponse_PipeOut_notEmpty
  assign pipes_idResponse_PipeOut_notEmpty =
	     idResponse_requestAdapter_fifo_EMPTY_N ;
  assign RDY_pipes_idResponse_PipeOut_notEmpty = 1'd1 ;

  // value method pipes_configResp_PipeOut_first
  assign pipes_configResp_PipeOut_first =
	     configResp_requestAdapter_fifo_D_OUT ;
  assign RDY_pipes_configResp_PipeOut_first =
	     configResp_requestAdapter_fifo_EMPTY_N ;

  // action method pipes_configResp_PipeOut_deq
  assign RDY_pipes_configResp_PipeOut_deq =
	     configResp_requestAdapter_fifo_EMPTY_N ;

  // value method pipes_configResp_PipeOut_notEmpty
  assign pipes_configResp_PipeOut_notEmpty =
	     configResp_requestAdapter_fifo_EMPTY_N ;
  assign RDY_pipes_configResp_PipeOut_notEmpty = 1'd1 ;

  // value method pipes_error_PipeOut_first
  assign pipes_error_PipeOut_first = error_requestAdapter_fifo_D_OUT ;
  assign RDY_pipes_error_PipeOut_first = error_requestAdapter_fifo_EMPTY_N ;

  // action method pipes_error_PipeOut_deq
  assign RDY_pipes_error_PipeOut_deq = error_requestAdapter_fifo_EMPTY_N ;

  // value method pipes_error_PipeOut_notEmpty
  assign pipes_error_PipeOut_notEmpty = error_requestAdapter_fifo_EMPTY_N ;
  assign RDY_pipes_error_PipeOut_notEmpty = 1'd1 ;

  // submodule configResp_requestAdapter_fifo
  FIFO1 #(.width(32'd32),
	  .guarded(1'd1)) configResp_requestAdapter_fifo(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(configResp_requestAdapter_fifo_D_IN),
							 .ENQ(configResp_requestAdapter_fifo_ENQ),
							 .DEQ(configResp_requestAdapter_fifo_DEQ),
							 .CLR(configResp_requestAdapter_fifo_CLR),
							 .D_OUT(configResp_requestAdapter_fifo_D_OUT),
							 .FULL_N(configResp_requestAdapter_fifo_FULL_N),
							 .EMPTY_N(configResp_requestAdapter_fifo_EMPTY_N));

  // submodule error_requestAdapter_fifo
  FIFO1 #(.width(32'd192),
	  .guarded(1'd1)) error_requestAdapter_fifo(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(error_requestAdapter_fifo_D_IN),
						    .ENQ(error_requestAdapter_fifo_ENQ),
						    .DEQ(error_requestAdapter_fifo_DEQ),
						    .CLR(error_requestAdapter_fifo_CLR),
						    .D_OUT(error_requestAdapter_fifo_D_OUT),
						    .FULL_N(error_requestAdapter_fifo_FULL_N),
						    .EMPTY_N(error_requestAdapter_fifo_EMPTY_N));

  // submodule idResponse_requestAdapter_fifo
  FIFO1 #(.width(32'd32),
	  .guarded(1'd1)) idResponse_requestAdapter_fifo(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(idResponse_requestAdapter_fifo_D_IN),
							 .ENQ(idResponse_requestAdapter_fifo_ENQ),
							 .DEQ(idResponse_requestAdapter_fifo_DEQ),
							 .CLR(idResponse_requestAdapter_fifo_CLR),
							 .D_OUT(idResponse_requestAdapter_fifo_D_OUT),
							 .FULL_N(idResponse_requestAdapter_fifo_FULL_N),
							 .EMPTY_N(idResponse_requestAdapter_fifo_EMPTY_N));

  // register configResp_requestAdapter_fbnbuff
  assign configResp_requestAdapter_fbnbuff_D_IN = portalIfc_requests_1_enq_v ;
  assign configResp_requestAdapter_fbnbuff_EN = EN_portalIfc_requests_1_enq ;

  // register error_requestAdapter_count
  assign error_requestAdapter_count_D_IN =
	     (error_requestAdapter_count == 3'd5) ? 3'd0 : x__h990 ;
  assign error_requestAdapter_count_EN = EN_portalIfc_requests_2_enq ;

  // register error_requestAdapter_fbnbuff
  assign error_requestAdapter_fbnbuff_D_IN =
	     { error_requestAdapter_fbnbuff[159:0],
	       portalIfc_requests_2_enq_v } ;
  assign error_requestAdapter_fbnbuff_EN = EN_portalIfc_requests_2_enq ;

  // register idResponse_requestAdapter_fbnbuff
  assign idResponse_requestAdapter_fbnbuff_D_IN = portalIfc_requests_0_enq_v ;
  assign idResponse_requestAdapter_fbnbuff_EN = EN_portalIfc_requests_0_enq ;

  // submodule configResp_requestAdapter_fifo
  assign configResp_requestAdapter_fifo_D_IN = portalIfc_requests_1_enq_v ;
  assign configResp_requestAdapter_fifo_ENQ = EN_portalIfc_requests_1_enq ;
  assign configResp_requestAdapter_fifo_DEQ =
	     EN_pipes_configResp_PipeOut_deq ;
  assign configResp_requestAdapter_fifo_CLR = 1'b0 ;

  // submodule error_requestAdapter_fifo
  assign error_requestAdapter_fifo_D_IN =
	     { error_requestAdapter_fbnbuff[159:0],
	       portalIfc_requests_2_enq_v } ;
  assign error_requestAdapter_fifo_ENQ =
	     EN_portalIfc_requests_2_enq &&
	     error_requestAdapter_count == 3'd5 ;
  assign error_requestAdapter_fifo_DEQ = EN_pipes_error_PipeOut_deq ;
  assign error_requestAdapter_fifo_CLR = 1'b0 ;

  // submodule idResponse_requestAdapter_fifo
  assign idResponse_requestAdapter_fifo_D_IN = portalIfc_requests_0_enq_v ;
  assign idResponse_requestAdapter_fifo_ENQ = EN_portalIfc_requests_0_enq ;
  assign idResponse_requestAdapter_fifo_DEQ =
	     EN_pipes_idResponse_PipeOut_deq ;
  assign idResponse_requestAdapter_fifo_CLR = 1'b0 ;

  // remaining internal signals
  assign x__h990 = error_requestAdapter_count + 3'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        configResp_requestAdapter_fbnbuff <= `BSV_ASSIGNMENT_DELAY 32'd0;
	error_requestAdapter_count <= `BSV_ASSIGNMENT_DELAY 3'd0;
	error_requestAdapter_fbnbuff <= `BSV_ASSIGNMENT_DELAY 192'd0;
	idResponse_requestAdapter_fbnbuff <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (configResp_requestAdapter_fbnbuff_EN)
	  configResp_requestAdapter_fbnbuff <= `BSV_ASSIGNMENT_DELAY
	      configResp_requestAdapter_fbnbuff_D_IN;
	if (error_requestAdapter_count_EN)
	  error_requestAdapter_count <= `BSV_ASSIGNMENT_DELAY
	      error_requestAdapter_count_D_IN;
	if (error_requestAdapter_fbnbuff_EN)
	  error_requestAdapter_fbnbuff <= `BSV_ASSIGNMENT_DELAY
	      error_requestAdapter_fbnbuff_D_IN;
	if (idResponse_requestAdapter_fbnbuff_EN)
	  idResponse_requestAdapter_fbnbuff <= `BSV_ASSIGNMENT_DELAY
	      idResponse_requestAdapter_fbnbuff_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    configResp_requestAdapter_fbnbuff = 32'hAAAAAAAA;
    error_requestAdapter_count = 3'h2;
    error_requestAdapter_fbnbuff =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    idResponse_requestAdapter_fbnbuff = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMMUIndicationInput

