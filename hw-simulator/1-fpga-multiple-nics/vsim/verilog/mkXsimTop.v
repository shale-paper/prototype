//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// (none)
//
// Ports:
// Name                         I/O  size props
// CLK_derivedClock               I     1 unused
// RST_N_derivedReset             I     1 unused
// CLK_sys_clk                    I     1 unused
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkXsimTop(CLK_derivedClock,
		 RST_N_derivedReset,
		 CLK_sys_clk,
		 CLK,
		 RST_N);
  input  CLK_derivedClock;
  input  RST_N_derivedReset;
  input  CLK_sys_clk;
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [31 : 0] lMemServer_reader_readers_0_tag_gen_tags_port0__write_1,
		lMemServer_reader_readers_0_tag_gen_tags_port1__write_1,
		lMemServer_reader_readers_0_tag_gen_tags_port2__read,
		lMemServer_writer_writers_0_tag_gen_tags_port0__write_1,
		lMemServer_writer_writers_0_tag_gen_tags_port1__write_1,
		lMemServer_writer_writers_0_tag_gen_tags_port2__read;
  wire [1 : 0] lMemServer_reader_readers_0_clientData_serverAdapterB_s1_1_wget,
	       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1_1_wget,
	       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_writeWithResp_wget;
  wire lMemServer_reader_dbgFSM_start_wire_whas,
       lMemServer_reader_dbgFSM_state_set_pw_whas,
       lMemServer_reader_readers_0_clientData_serverAdapterA_outData_enqw_whas,
       lMemServer_reader_readers_0_clientData_serverAdapterB_cnt_1_whas,
       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_dequeueing_whas,
       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_enqw_whas,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_enqw_whas,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt_1_whas,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_enqw_whas,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_writeWithResp_whas,
       lMemServer_reader_readers_0_tag_gen_counter_dec_wire_whas,
       lMemServer_reader_readers_0_tag_gen_tags_EN_port1__write,
       lMemServer_reader_trafficFSM_start_wire_whas,
       lMemServer_reader_trafficFSM_state_set_pw_whas,
       lMemServer_writer_dbgFSM_start_wire_whas,
       lMemServer_writer_dbgFSM_state_set_pw_whas,
       lMemServer_writer_trafficFSM_start_wire_whas,
       lMemServer_writer_trafficFSM_state_set_pw_whas,
       lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_enqw_whas,
       lMemServer_writer_writers_0_respFifos_serverAdapterA_writeWithResp_whas,
       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_dequeueing_whas,
       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_enqw_whas,
       lMemServer_writer_writers_0_tag_gen_counter_dec_wire_whas,
       lMemServer_writer_writers_0_tag_gen_tags_EN_port1__write;

  // register dumpstarted
  reg dumpstarted;
  wire dumpstarted_D_IN, dumpstarted_EN;

  // register lMMUIndicationOutputNoc_bpState
  reg lMMUIndicationOutputNoc_bpState;
  wire lMMUIndicationOutputNoc_bpState_D_IN,
       lMMUIndicationOutputNoc_bpState_EN;

  // register lMMUIndicationOutputNoc_messageWordsReg
  reg [15 : 0] lMMUIndicationOutputNoc_messageWordsReg;
  wire [15 : 0] lMMUIndicationOutputNoc_messageWordsReg_D_IN;
  wire lMMUIndicationOutputNoc_messageWordsReg_EN;

  // register lMMUIndicationOutputNoc_methodIdReg
  reg [7 : 0] lMMUIndicationOutputNoc_methodIdReg;
  wire [7 : 0] lMMUIndicationOutputNoc_methodIdReg_D_IN;
  wire lMMUIndicationOutputNoc_methodIdReg_EN;

  // register lMMURequestInputNoc_bpState
  reg lMMURequestInputNoc_bpState;
  wire lMMURequestInputNoc_bpState_D_IN, lMMURequestInputNoc_bpState_EN;

  // register lMMURequestInputNoc_messageWordsReg
  reg [7 : 0] lMMURequestInputNoc_messageWordsReg;
  wire [7 : 0] lMMURequestInputNoc_messageWordsReg_D_IN;
  wire lMMURequestInputNoc_messageWordsReg_EN;

  // register lMMURequestInputNoc_methodIdReg
  reg [7 : 0] lMMURequestInputNoc_methodIdReg;
  wire [7 : 0] lMMURequestInputNoc_methodIdReg_D_IN;
  wire lMMURequestInputNoc_methodIdReg_EN;

  // register lMemServerIndicationOutputNoc_bpState
  reg lMemServerIndicationOutputNoc_bpState;
  wire lMemServerIndicationOutputNoc_bpState_D_IN,
       lMemServerIndicationOutputNoc_bpState_EN;

  // register lMemServerIndicationOutputNoc_messageWordsReg
  reg [15 : 0] lMemServerIndicationOutputNoc_messageWordsReg;
  wire [15 : 0] lMemServerIndicationOutputNoc_messageWordsReg_D_IN;
  wire lMemServerIndicationOutputNoc_messageWordsReg_EN;

  // register lMemServerIndicationOutputNoc_methodIdReg
  reg [7 : 0] lMemServerIndicationOutputNoc_methodIdReg;
  wire [7 : 0] lMemServerIndicationOutputNoc_methodIdReg_D_IN;
  wire lMemServerIndicationOutputNoc_methodIdReg_EN;

  // register lMemServerRequestInputNoc_bpState
  reg lMemServerRequestInputNoc_bpState;
  wire lMemServerRequestInputNoc_bpState_D_IN,
       lMemServerRequestInputNoc_bpState_EN;

  // register lMemServerRequestInputNoc_messageWordsReg
  reg [7 : 0] lMemServerRequestInputNoc_messageWordsReg;
  wire [7 : 0] lMemServerRequestInputNoc_messageWordsReg_D_IN;
  wire lMemServerRequestInputNoc_messageWordsReg_EN;

  // register lMemServerRequestInputNoc_methodIdReg
  reg [7 : 0] lMemServerRequestInputNoc_methodIdReg;
  wire [7 : 0] lMemServerRequestInputNoc_methodIdReg_D_IN;
  wire lMemServerRequestInputNoc_methodIdReg_EN;

  // register lMemServer_reader_dbgFSM_start_reg
  reg lMemServer_reader_dbgFSM_start_reg;
  wire lMemServer_reader_dbgFSM_start_reg_D_IN,
       lMemServer_reader_dbgFSM_start_reg_EN;

  // register lMemServer_reader_dbgFSM_start_reg_1
  reg lMemServer_reader_dbgFSM_start_reg_1;
  wire lMemServer_reader_dbgFSM_start_reg_1_D_IN,
       lMemServer_reader_dbgFSM_start_reg_1_EN;

  // register lMemServer_reader_dbgFSM_state_can_overlap
  reg lMemServer_reader_dbgFSM_state_can_overlap;
  wire lMemServer_reader_dbgFSM_state_can_overlap_D_IN,
       lMemServer_reader_dbgFSM_state_can_overlap_EN;

  // register lMemServer_reader_dbgFSM_state_fired
  reg lMemServer_reader_dbgFSM_state_fired;
  wire lMemServer_reader_dbgFSM_state_fired_D_IN,
       lMemServer_reader_dbgFSM_state_fired_EN;

  // register lMemServer_reader_dbgFSM_state_mkFSMstate
  reg [2 : 0] lMemServer_reader_dbgFSM_state_mkFSMstate;
  reg [2 : 0] lMemServer_reader_dbgFSM_state_mkFSMstate_D_IN;
  wire lMemServer_reader_dbgFSM_state_mkFSMstate_EN;

  // register lMemServer_reader_dbgPtr
  reg [7 : 0] lMemServer_reader_dbgPtr;
  wire [7 : 0] lMemServer_reader_dbgPtr_D_IN;
  wire lMemServer_reader_dbgPtr_EN;

  // register lMemServer_reader_readers_0_beatCount
  reg [31 : 0] lMemServer_reader_readers_0_beatCount;
  wire [31 : 0] lMemServer_reader_readers_0_beatCount_D_IN;
  wire lMemServer_reader_readers_0_beatCount_EN;

  // register lMemServer_reader_readers_0_burstReg
  reg [9 : 0] lMemServer_reader_readers_0_burstReg;
  wire [9 : 0] lMemServer_reader_readers_0_burstReg_D_IN;
  wire lMemServer_reader_readers_0_burstReg_EN;

  // register lMemServer_reader_readers_0_clientData_serverAdapterA_cnt
  reg [2 : 0] lMemServer_reader_readers_0_clientData_serverAdapterA_cnt;
  wire [2 : 0] lMemServer_reader_readers_0_clientData_serverAdapterA_cnt_D_IN;
  wire lMemServer_reader_readers_0_clientData_serverAdapterA_cnt_EN;

  // register lMemServer_reader_readers_0_clientData_serverAdapterA_s1
  reg [1 : 0] lMemServer_reader_readers_0_clientData_serverAdapterA_s1;
  wire [1 : 0] lMemServer_reader_readers_0_clientData_serverAdapterA_s1_D_IN;
  wire lMemServer_reader_readers_0_clientData_serverAdapterA_s1_EN;

  // register lMemServer_reader_readers_0_clientData_serverAdapterB_cnt
  reg [2 : 0] lMemServer_reader_readers_0_clientData_serverAdapterB_cnt;
  wire [2 : 0] lMemServer_reader_readers_0_clientData_serverAdapterB_cnt_D_IN;
  wire lMemServer_reader_readers_0_clientData_serverAdapterB_cnt_EN;

  // register lMemServer_reader_readers_0_clientData_serverAdapterB_s1
  reg [1 : 0] lMemServer_reader_readers_0_clientData_serverAdapterB_s1;
  wire [1 : 0] lMemServer_reader_readers_0_clientData_serverAdapterB_s1_D_IN;
  wire lMemServer_reader_readers_0_clientData_serverAdapterB_s1_EN;

  // register lMemServer_reader_readers_0_compClientReg
  reg lMemServer_reader_readers_0_compClientReg;
  wire lMemServer_reader_readers_0_compClientReg_D_IN,
       lMemServer_reader_readers_0_compClientReg_EN;

  // register lMemServer_reader_readers_0_compCountReg
  reg [9 : 0] lMemServer_reader_readers_0_compCountReg;
  wire [9 : 0] lMemServer_reader_readers_0_compCountReg_D_IN;
  wire lMemServer_reader_readers_0_compCountReg_EN;

  // register lMemServer_reader_readers_0_compTagReg
  reg [4 : 0] lMemServer_reader_readers_0_compTagReg;
  wire [4 : 0] lMemServer_reader_readers_0_compTagReg_D_IN;
  wire lMemServer_reader_readers_0_compTagReg_EN;

  // register lMemServer_reader_readers_0_compTileReg
  reg [1 : 0] lMemServer_reader_readers_0_compTileReg;
  wire [1 : 0] lMemServer_reader_readers_0_compTileReg_D_IN;
  wire lMemServer_reader_readers_0_compTileReg_EN;

  // register lMemServer_reader_readers_0_cycle_cnt
  reg [63 : 0] lMemServer_reader_readers_0_cycle_cnt;
  wire [63 : 0] lMemServer_reader_readers_0_cycle_cnt_D_IN;
  wire lMemServer_reader_readers_0_cycle_cnt_EN;

  // register lMemServer_reader_readers_0_firstReg
  reg lMemServer_reader_readers_0_firstReg;
  wire lMemServer_reader_readers_0_firstReg_D_IN,
       lMemServer_reader_readers_0_firstReg_EN;

  // register lMemServer_reader_readers_0_killv_0
  reg lMemServer_reader_readers_0_killv_0;
  wire lMemServer_reader_readers_0_killv_0_D_IN,
       lMemServer_reader_readers_0_killv_0_EN;

  // register lMemServer_reader_readers_0_killv_1
  reg lMemServer_reader_readers_0_killv_1;
  wire lMemServer_reader_readers_0_killv_1_D_IN,
       lMemServer_reader_readers_0_killv_1_EN;

  // register lMemServer_reader_readers_0_killv_2
  reg lMemServer_reader_readers_0_killv_2;
  wire lMemServer_reader_readers_0_killv_2_D_IN,
       lMemServer_reader_readers_0_killv_2_EN;

  // register lMemServer_reader_readers_0_killv_3
  reg lMemServer_reader_readers_0_killv_3;
  wire lMemServer_reader_readers_0_killv_3_D_IN,
       lMemServer_reader_readers_0_killv_3_EN;

  // register lMemServer_reader_readers_0_last_comp
  reg [63 : 0] lMemServer_reader_readers_0_last_comp;
  wire [63 : 0] lMemServer_reader_readers_0_last_comp_D_IN;
  wire lMemServer_reader_readers_0_last_comp_EN;

  // register lMemServer_reader_readers_0_last_loadClient
  reg [63 : 0] lMemServer_reader_readers_0_last_loadClient;
  wire [63 : 0] lMemServer_reader_readers_0_last_loadClient_D_IN;
  wire lMemServer_reader_readers_0_last_loadClient_EN;

  // register lMemServer_reader_readers_0_last_mmuResp
  reg [63 : 0] lMemServer_reader_readers_0_last_mmuResp;
  wire [63 : 0] lMemServer_reader_readers_0_last_mmuResp_D_IN;
  wire lMemServer_reader_readers_0_last_mmuResp_EN;

  // register lMemServer_reader_readers_0_last_readData
  reg [63 : 0] lMemServer_reader_readers_0_last_readData;
  wire [63 : 0] lMemServer_reader_readers_0_last_readData_D_IN;
  wire lMemServer_reader_readers_0_last_readData_EN;

  // register lMemServer_reader_readers_0_last_readReq
  reg [63 : 0] lMemServer_reader_readers_0_last_readReq;
  wire [63 : 0] lMemServer_reader_readers_0_last_readReq_D_IN;
  wire lMemServer_reader_readers_0_last_readReq_EN;

  // register lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt
  reg [2 : 0] lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt;
  wire [2 : 0] lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt_D_IN;
  wire lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt_EN;

  // register lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1
  reg [1 : 0] lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1;
  wire [1 : 0] lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1_D_IN;
  wire lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1_EN;

  // register lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt
  reg [2 : 0] lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt;
  wire [2 : 0] lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt_D_IN;
  wire lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt_EN;

  // register lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1
  reg [1 : 0] lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1;
  wire [1 : 0] lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1_D_IN;
  wire lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1_EN;

  // register lMemServer_reader_readers_0_stopv_0
  reg lMemServer_reader_readers_0_stopv_0;
  wire lMemServer_reader_readers_0_stopv_0_D_IN,
       lMemServer_reader_readers_0_stopv_0_EN;

  // register lMemServer_reader_readers_0_stopv_1
  reg lMemServer_reader_readers_0_stopv_1;
  wire lMemServer_reader_readers_0_stopv_1_D_IN,
       lMemServer_reader_readers_0_stopv_1_EN;

  // register lMemServer_reader_readers_0_stopv_2
  reg lMemServer_reader_readers_0_stopv_2;
  wire lMemServer_reader_readers_0_stopv_2_D_IN,
       lMemServer_reader_readers_0_stopv_2_EN;

  // register lMemServer_reader_readers_0_stopv_3
  reg lMemServer_reader_readers_0_stopv_3;
  wire lMemServer_reader_readers_0_stopv_3_D_IN,
       lMemServer_reader_readers_0_stopv_3_EN;

  // register lMemServer_reader_readers_0_tag_gen_comp_state
  reg [31 : 0] lMemServer_reader_readers_0_tag_gen_comp_state;
  wire [31 : 0] lMemServer_reader_readers_0_tag_gen_comp_state_D_IN;
  wire lMemServer_reader_readers_0_tag_gen_comp_state_EN;

  // register lMemServer_reader_readers_0_tag_gen_counter_cnt
  reg [5 : 0] lMemServer_reader_readers_0_tag_gen_counter_cnt;
  wire [5 : 0] lMemServer_reader_readers_0_tag_gen_counter_cnt_D_IN;
  wire lMemServer_reader_readers_0_tag_gen_counter_cnt_EN;

  // register lMemServer_reader_readers_0_tag_gen_counter_positive_reg
  reg lMemServer_reader_readers_0_tag_gen_counter_positive_reg;
  wire lMemServer_reader_readers_0_tag_gen_counter_positive_reg_D_IN,
       lMemServer_reader_readers_0_tag_gen_counter_positive_reg_EN;

  // register lMemServer_reader_readers_0_tag_gen_head_ptr
  reg [4 : 0] lMemServer_reader_readers_0_tag_gen_head_ptr;
  wire [4 : 0] lMemServer_reader_readers_0_tag_gen_head_ptr_D_IN;
  wire lMemServer_reader_readers_0_tag_gen_head_ptr_EN;

  // register lMemServer_reader_readers_0_tag_gen_inited
  reg lMemServer_reader_readers_0_tag_gen_inited;
  wire lMemServer_reader_readers_0_tag_gen_inited_D_IN,
       lMemServer_reader_readers_0_tag_gen_inited_EN;

  // register lMemServer_reader_readers_0_tag_gen_tags
  reg [31 : 0] lMemServer_reader_readers_0_tag_gen_tags;
  wire [31 : 0] lMemServer_reader_readers_0_tag_gen_tags_D_IN;
  wire lMemServer_reader_readers_0_tag_gen_tags_EN;

  // register lMemServer_reader_readers_0_tag_gen_tail_ptr
  reg [4 : 0] lMemServer_reader_readers_0_tag_gen_tail_ptr;
  wire [4 : 0] lMemServer_reader_readers_0_tag_gen_tail_ptr_D_IN;
  wire lMemServer_reader_readers_0_tag_gen_tail_ptr_EN;

  // register lMemServer_reader_trafficAccum
  reg [63 : 0] lMemServer_reader_trafficAccum;
  wire [63 : 0] lMemServer_reader_trafficAccum_D_IN;
  wire lMemServer_reader_trafficAccum_EN;

  // register lMemServer_reader_trafficFSM_start_reg
  reg lMemServer_reader_trafficFSM_start_reg;
  wire lMemServer_reader_trafficFSM_start_reg_D_IN,
       lMemServer_reader_trafficFSM_start_reg_EN;

  // register lMemServer_reader_trafficFSM_start_reg_1
  reg lMemServer_reader_trafficFSM_start_reg_1;
  wire lMemServer_reader_trafficFSM_start_reg_1_D_IN,
       lMemServer_reader_trafficFSM_start_reg_1_EN;

  // register lMemServer_reader_trafficFSM_state_can_overlap
  reg lMemServer_reader_trafficFSM_state_can_overlap;
  wire lMemServer_reader_trafficFSM_state_can_overlap_D_IN,
       lMemServer_reader_trafficFSM_state_can_overlap_EN;

  // register lMemServer_reader_trafficFSM_state_fired
  reg lMemServer_reader_trafficFSM_state_fired;
  wire lMemServer_reader_trafficFSM_state_fired_D_IN,
       lMemServer_reader_trafficFSM_state_fired_EN;

  // register lMemServer_reader_trafficFSM_state_mkFSMstate
  reg [2 : 0] lMemServer_reader_trafficFSM_state_mkFSMstate;
  reg [2 : 0] lMemServer_reader_trafficFSM_state_mkFSMstate_D_IN;
  wire lMemServer_reader_trafficFSM_state_mkFSMstate_EN;

  // register lMemServer_reader_trafficPtr
  reg [7 : 0] lMemServer_reader_trafficPtr;
  wire [7 : 0] lMemServer_reader_trafficPtr_D_IN;
  wire lMemServer_reader_trafficPtr_EN;

  // register lMemServer_writer_dbgFSM_start_reg
  reg lMemServer_writer_dbgFSM_start_reg;
  wire lMemServer_writer_dbgFSM_start_reg_D_IN,
       lMemServer_writer_dbgFSM_start_reg_EN;

  // register lMemServer_writer_dbgFSM_start_reg_1
  reg lMemServer_writer_dbgFSM_start_reg_1;
  wire lMemServer_writer_dbgFSM_start_reg_1_D_IN,
       lMemServer_writer_dbgFSM_start_reg_1_EN;

  // register lMemServer_writer_dbgFSM_state_can_overlap
  reg lMemServer_writer_dbgFSM_state_can_overlap;
  wire lMemServer_writer_dbgFSM_state_can_overlap_D_IN,
       lMemServer_writer_dbgFSM_state_can_overlap_EN;

  // register lMemServer_writer_dbgFSM_state_fired
  reg lMemServer_writer_dbgFSM_state_fired;
  wire lMemServer_writer_dbgFSM_state_fired_D_IN,
       lMemServer_writer_dbgFSM_state_fired_EN;

  // register lMemServer_writer_dbgFSM_state_mkFSMstate
  reg [2 : 0] lMemServer_writer_dbgFSM_state_mkFSMstate;
  reg [2 : 0] lMemServer_writer_dbgFSM_state_mkFSMstate_D_IN;
  wire lMemServer_writer_dbgFSM_state_mkFSMstate_EN;

  // register lMemServer_writer_dbgPtr
  reg [7 : 0] lMemServer_writer_dbgPtr;
  wire [7 : 0] lMemServer_writer_dbgPtr_D_IN;
  wire lMemServer_writer_dbgPtr_EN;

  // register lMemServer_writer_trafficAccum
  reg [63 : 0] lMemServer_writer_trafficAccum;
  wire [63 : 0] lMemServer_writer_trafficAccum_D_IN;
  wire lMemServer_writer_trafficAccum_EN;

  // register lMemServer_writer_trafficFSM_start_reg
  reg lMemServer_writer_trafficFSM_start_reg;
  wire lMemServer_writer_trafficFSM_start_reg_D_IN,
       lMemServer_writer_trafficFSM_start_reg_EN;

  // register lMemServer_writer_trafficFSM_start_reg_1
  reg lMemServer_writer_trafficFSM_start_reg_1;
  wire lMemServer_writer_trafficFSM_start_reg_1_D_IN,
       lMemServer_writer_trafficFSM_start_reg_1_EN;

  // register lMemServer_writer_trafficFSM_state_can_overlap
  reg lMemServer_writer_trafficFSM_state_can_overlap;
  wire lMemServer_writer_trafficFSM_state_can_overlap_D_IN,
       lMemServer_writer_trafficFSM_state_can_overlap_EN;

  // register lMemServer_writer_trafficFSM_state_fired
  reg lMemServer_writer_trafficFSM_state_fired;
  wire lMemServer_writer_trafficFSM_state_fired_D_IN,
       lMemServer_writer_trafficFSM_state_fired_EN;

  // register lMemServer_writer_trafficFSM_state_mkFSMstate
  reg [2 : 0] lMemServer_writer_trafficFSM_state_mkFSMstate;
  reg [2 : 0] lMemServer_writer_trafficFSM_state_mkFSMstate_D_IN;
  wire lMemServer_writer_trafficFSM_state_mkFSMstate_EN;

  // register lMemServer_writer_trafficPtr
  reg [7 : 0] lMemServer_writer_trafficPtr;
  wire [7 : 0] lMemServer_writer_trafficPtr_D_IN;
  wire lMemServer_writer_trafficPtr_EN;

  // register lMemServer_writer_writers_0_beatCount
  reg [31 : 0] lMemServer_writer_writers_0_beatCount;
  wire [31 : 0] lMemServer_writer_writers_0_beatCount_D_IN;
  wire lMemServer_writer_writers_0_beatCount_EN;

  // register lMemServer_writer_writers_0_burstReg
  reg [9 : 0] lMemServer_writer_writers_0_burstReg;
  wire [9 : 0] lMemServer_writer_writers_0_burstReg_D_IN;
  wire lMemServer_writer_writers_0_burstReg_EN;

  // register lMemServer_writer_writers_0_cycle_cnt
  reg [63 : 0] lMemServer_writer_writers_0_cycle_cnt;
  wire [63 : 0] lMemServer_writer_writers_0_cycle_cnt_D_IN;
  wire lMemServer_writer_writers_0_cycle_cnt_EN;

  // register lMemServer_writer_writers_0_firstReg
  reg lMemServer_writer_writers_0_firstReg;
  wire lMemServer_writer_writers_0_firstReg_D_IN,
       lMemServer_writer_writers_0_firstReg_EN;

  // register lMemServer_writer_writers_0_killv_0
  reg lMemServer_writer_writers_0_killv_0;
  wire lMemServer_writer_writers_0_killv_0_D_IN,
       lMemServer_writer_writers_0_killv_0_EN;

  // register lMemServer_writer_writers_0_killv_1
  reg lMemServer_writer_writers_0_killv_1;
  wire lMemServer_writer_writers_0_killv_1_D_IN,
       lMemServer_writer_writers_0_killv_1_EN;

  // register lMemServer_writer_writers_0_killv_2
  reg lMemServer_writer_writers_0_killv_2;
  wire lMemServer_writer_writers_0_killv_2_D_IN,
       lMemServer_writer_writers_0_killv_2_EN;

  // register lMemServer_writer_writers_0_killv_3
  reg lMemServer_writer_writers_0_killv_3;
  wire lMemServer_writer_writers_0_killv_3_D_IN,
       lMemServer_writer_writers_0_killv_3_EN;

  // register lMemServer_writer_writers_0_lastReg
  reg lMemServer_writer_writers_0_lastReg;
  wire lMemServer_writer_writers_0_lastReg_D_IN,
       lMemServer_writer_writers_0_lastReg_EN;

  // register lMemServer_writer_writers_0_last_loadClient
  reg [63 : 0] lMemServer_writer_writers_0_last_loadClient;
  wire [63 : 0] lMemServer_writer_writers_0_last_loadClient_D_IN;
  wire lMemServer_writer_writers_0_last_loadClient_EN;

  // register lMemServer_writer_writers_0_last_mmuResp
  reg [63 : 0] lMemServer_writer_writers_0_last_mmuResp;
  wire [63 : 0] lMemServer_writer_writers_0_last_mmuResp_D_IN;
  wire lMemServer_writer_writers_0_last_mmuResp_EN;

  // register lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt
  reg [2 : 0] lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt;
  wire [2 : 0] lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt_D_IN;
  wire lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt_EN;

  // register lMemServer_writer_writers_0_respFifos_serverAdapterA_s1
  reg [1 : 0] lMemServer_writer_writers_0_respFifos_serverAdapterA_s1;
  wire [1 : 0] lMemServer_writer_writers_0_respFifos_serverAdapterA_s1_D_IN;
  wire lMemServer_writer_writers_0_respFifos_serverAdapterA_s1_EN;

  // register lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt
  reg [2 : 0] lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt;
  wire [2 : 0] lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt_D_IN;
  wire lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt_EN;

  // register lMemServer_writer_writers_0_respFifos_serverAdapterB_s1
  reg [1 : 0] lMemServer_writer_writers_0_respFifos_serverAdapterB_s1;
  wire [1 : 0] lMemServer_writer_writers_0_respFifos_serverAdapterB_s1_D_IN;
  wire lMemServer_writer_writers_0_respFifos_serverAdapterB_s1_EN;

  // register lMemServer_writer_writers_0_stopv_0
  reg lMemServer_writer_writers_0_stopv_0;
  wire lMemServer_writer_writers_0_stopv_0_D_IN,
       lMemServer_writer_writers_0_stopv_0_EN;

  // register lMemServer_writer_writers_0_stopv_1
  reg lMemServer_writer_writers_0_stopv_1;
  wire lMemServer_writer_writers_0_stopv_1_D_IN,
       lMemServer_writer_writers_0_stopv_1_EN;

  // register lMemServer_writer_writers_0_stopv_2
  reg lMemServer_writer_writers_0_stopv_2;
  wire lMemServer_writer_writers_0_stopv_2_D_IN,
       lMemServer_writer_writers_0_stopv_2_EN;

  // register lMemServer_writer_writers_0_stopv_3
  reg lMemServer_writer_writers_0_stopv_3;
  wire lMemServer_writer_writers_0_stopv_3_D_IN,
       lMemServer_writer_writers_0_stopv_3_EN;

  // register lMemServer_writer_writers_0_tag_gen_comp_state
  reg [31 : 0] lMemServer_writer_writers_0_tag_gen_comp_state;
  wire [31 : 0] lMemServer_writer_writers_0_tag_gen_comp_state_D_IN;
  wire lMemServer_writer_writers_0_tag_gen_comp_state_EN;

  // register lMemServer_writer_writers_0_tag_gen_counter_cnt
  reg [5 : 0] lMemServer_writer_writers_0_tag_gen_counter_cnt;
  wire [5 : 0] lMemServer_writer_writers_0_tag_gen_counter_cnt_D_IN;
  wire lMemServer_writer_writers_0_tag_gen_counter_cnt_EN;

  // register lMemServer_writer_writers_0_tag_gen_counter_positive_reg
  reg lMemServer_writer_writers_0_tag_gen_counter_positive_reg;
  wire lMemServer_writer_writers_0_tag_gen_counter_positive_reg_D_IN,
       lMemServer_writer_writers_0_tag_gen_counter_positive_reg_EN;

  // register lMemServer_writer_writers_0_tag_gen_head_ptr
  reg [4 : 0] lMemServer_writer_writers_0_tag_gen_head_ptr;
  wire [4 : 0] lMemServer_writer_writers_0_tag_gen_head_ptr_D_IN;
  wire lMemServer_writer_writers_0_tag_gen_head_ptr_EN;

  // register lMemServer_writer_writers_0_tag_gen_inited
  reg lMemServer_writer_writers_0_tag_gen_inited;
  wire lMemServer_writer_writers_0_tag_gen_inited_D_IN,
       lMemServer_writer_writers_0_tag_gen_inited_EN;

  // register lMemServer_writer_writers_0_tag_gen_tags
  reg [31 : 0] lMemServer_writer_writers_0_tag_gen_tags;
  wire [31 : 0] lMemServer_writer_writers_0_tag_gen_tags_D_IN;
  wire lMemServer_writer_writers_0_tag_gen_tags_EN;

  // register lMemServer_writer_writers_0_tag_gen_tail_ptr
  reg [4 : 0] lMemServer_writer_writers_0_tag_gen_tail_ptr;
  wire [4 : 0] lMemServer_writer_writers_0_tag_gen_tail_ptr_D_IN;
  wire lMemServer_writer_writers_0_tag_gen_tail_ptr_EN;

  // register slave_2_0_burstReg
  reg [7 : 0] slave_2_0_burstReg;
  wire [7 : 0] slave_2_0_burstReg_D_IN;
  wire slave_2_0_burstReg_EN;

  // register slave_2_0_cycles
  reg [63 : 0] slave_2_0_cycles;
  wire [63 : 0] slave_2_0_cycles_D_IN;
  wire slave_2_0_cycles_EN;

  // register slave_2_0_last_read_eob
  reg [63 : 0] slave_2_0_last_read_eob;
  wire [63 : 0] slave_2_0_last_read_eob_D_IN;
  wire slave_2_0_last_read_eob_EN;

  // register slave_2_0_last_reqAr
  reg [63 : 0] slave_2_0_last_reqAr;
  wire [63 : 0] slave_2_0_last_reqAr_D_IN;
  wire slave_2_0_last_reqAr_EN;

  // register slave_2_0_last_write_eob
  reg [63 : 0] slave_2_0_last_write_eob;
  wire [63 : 0] slave_2_0_last_write_eob_D_IN;
  wire slave_2_0_last_write_eob_EN;

  // register slave_2_0_readLenReg
  reg [9 : 0] slave_2_0_readLenReg;
  wire [9 : 0] slave_2_0_readLenReg_D_IN;
  wire slave_2_0_readLenReg_EN;

  // register slave_2_0_readOffsetReg
  reg [31 : 0] slave_2_0_readOffsetReg;
  wire [31 : 0] slave_2_0_readOffsetReg_D_IN;
  wire slave_2_0_readOffsetReg_EN;

  // register slave_2_0_req_ar_b_ts
  reg [63 : 0] slave_2_0_req_ar_b_ts;
  wire [63 : 0] slave_2_0_req_ar_b_ts_D_IN;
  wire slave_2_0_req_ar_b_ts_EN;

  // register slave_2_0_req_aw_b_ts
  reg [63 : 0] slave_2_0_req_aw_b_ts;
  wire [63 : 0] slave_2_0_req_aw_b_ts_D_IN;
  wire slave_2_0_req_aw_b_ts_EN;

  // register slave_2_0_writeLenReg
  reg [9 : 0] slave_2_0_writeLenReg;
  wire [9 : 0] slave_2_0_writeLenReg_D_IN;
  wire slave_2_0_writeLenReg_EN;

  // register slave_2_0_writeOffsetReg
  reg [31 : 0] slave_2_0_writeOffsetReg;
  wire [31 : 0] slave_2_0_writeOffsetReg_D_IN;
  wire slave_2_0_writeOffsetReg_EN;

  // ports of submodule lMMUIndicationOutput
  wire [63 : 0] lMMUIndicationOutput_ifc_error_extra,
		lMMUIndicationOutput_ifc_error_offset;
  wire [31 : 0] lMMUIndicationOutput_ifc_configResp_sglId,
		lMMUIndicationOutput_ifc_error_code,
		lMMUIndicationOutput_ifc_error_sglId,
		lMMUIndicationOutput_ifc_idResponse_sglId,
		lMMUIndicationOutput_portalIfc_indications_0_first,
		lMMUIndicationOutput_portalIfc_indications_1_first,
		lMMUIndicationOutput_portalIfc_indications_2_first;
  wire [15 : 0] lMMUIndicationOutput_portalIfc_messageSize_size,
		lMMUIndicationOutput_portalIfc_messageSize_size_methodNumber;
  wire lMMUIndicationOutput_EN_ifc_configResp,
       lMMUIndicationOutput_EN_ifc_error,
       lMMUIndicationOutput_EN_ifc_idResponse,
       lMMUIndicationOutput_EN_portalIfc_indications_0_deq,
       lMMUIndicationOutput_EN_portalIfc_indications_1_deq,
       lMMUIndicationOutput_EN_portalIfc_indications_2_deq,
       lMMUIndicationOutput_RDY_ifc_configResp,
       lMMUIndicationOutput_RDY_ifc_error,
       lMMUIndicationOutput_RDY_ifc_idResponse,
       lMMUIndicationOutput_RDY_portalIfc_indications_0_deq,
       lMMUIndicationOutput_RDY_portalIfc_indications_0_first,
       lMMUIndicationOutput_RDY_portalIfc_indications_1_deq,
       lMMUIndicationOutput_RDY_portalIfc_indications_1_first,
       lMMUIndicationOutput_RDY_portalIfc_indications_2_deq,
       lMMUIndicationOutput_RDY_portalIfc_indications_2_first,
       lMMUIndicationOutput_portalIfc_indications_0_notEmpty,
       lMMUIndicationOutput_portalIfc_indications_1_notEmpty,
       lMMUIndicationOutput_portalIfc_indications_2_notEmpty;

  // ports of submodule lMMUIndicationOutputNoc_fifoMsgSource
  wire [31 : 0] lMMUIndicationOutputNoc_fifoMsgSource_D_IN,
		lMMUIndicationOutputNoc_fifoMsgSource_D_OUT;
  wire lMMUIndicationOutputNoc_fifoMsgSource_CLR,
       lMMUIndicationOutputNoc_fifoMsgSource_DEQ,
       lMMUIndicationOutputNoc_fifoMsgSource_EMPTY_N,
       lMMUIndicationOutputNoc_fifoMsgSource_ENQ,
       lMMUIndicationOutputNoc_fifoMsgSource_FULL_N;

  // ports of submodule lMMURequestInput
  wire [415 : 0] lMMURequestInput_pipes_region_PipeOut_first;
  wire [159 : 0] lMMURequestInput_pipes_sglist_PipeOut_first;
  wire [63 : 0] lMMURequestInput_pipes_setInterface_PipeOut_first;
  wire [31 : 0] lMMURequestInput_pipes_idRequest_PipeOut_first,
		lMMURequestInput_pipes_idReturn_PipeOut_first,
		lMMURequestInput_portalIfc_requests_0_enq_v,
		lMMURequestInput_portalIfc_requests_1_enq_v,
		lMMURequestInput_portalIfc_requests_2_enq_v,
		lMMURequestInput_portalIfc_requests_3_enq_v,
		lMMURequestInput_portalIfc_requests_4_enq_v;
  wire [15 : 0] lMMURequestInput_portalIfc_messageSize_size_methodNumber;
  wire lMMURequestInput_EN_pipes_idRequest_PipeOut_deq,
       lMMURequestInput_EN_pipes_idReturn_PipeOut_deq,
       lMMURequestInput_EN_pipes_region_PipeOut_deq,
       lMMURequestInput_EN_pipes_setInterface_PipeOut_deq,
       lMMURequestInput_EN_pipes_sglist_PipeOut_deq,
       lMMURequestInput_EN_portalIfc_requests_0_enq,
       lMMURequestInput_EN_portalIfc_requests_1_enq,
       lMMURequestInput_EN_portalIfc_requests_2_enq,
       lMMURequestInput_EN_portalIfc_requests_3_enq,
       lMMURequestInput_EN_portalIfc_requests_4_enq,
       lMMURequestInput_RDY_pipes_idRequest_PipeOut_deq,
       lMMURequestInput_RDY_pipes_idRequest_PipeOut_first,
       lMMURequestInput_RDY_pipes_idReturn_PipeOut_deq,
       lMMURequestInput_RDY_pipes_idReturn_PipeOut_first,
       lMMURequestInput_RDY_pipes_region_PipeOut_deq,
       lMMURequestInput_RDY_pipes_region_PipeOut_first,
       lMMURequestInput_RDY_pipes_setInterface_PipeOut_deq,
       lMMURequestInput_RDY_pipes_setInterface_PipeOut_first,
       lMMURequestInput_RDY_pipes_sglist_PipeOut_deq,
       lMMURequestInput_RDY_pipes_sglist_PipeOut_first,
       lMMURequestInput_RDY_portalIfc_requests_0_enq,
       lMMURequestInput_RDY_portalIfc_requests_1_enq,
       lMMURequestInput_RDY_portalIfc_requests_2_enq,
       lMMURequestInput_RDY_portalIfc_requests_3_enq,
       lMMURequestInput_RDY_portalIfc_requests_4_enq;

  // ports of submodule lMMURequestInputNoc_fifoMsgSink
  wire [31 : 0] lMMURequestInputNoc_fifoMsgSink_D_IN,
		lMMURequestInputNoc_fifoMsgSink_D_OUT;
  wire lMMURequestInputNoc_fifoMsgSink_CLR,
       lMMURequestInputNoc_fifoMsgSink_DEQ,
       lMMURequestInputNoc_fifoMsgSink_EMPTY_N,
       lMMURequestInputNoc_fifoMsgSink_ENQ,
       lMMURequestInputNoc_fifoMsgSink_FULL_N;

  // ports of submodule lMMU_mmu
  reg [44 : 0] lMMU_mmu_addr_1_request_put;
  wire [74 : 0] lMMU_mmu_errorPipe_first;
  wire [63 : 0] lMMU_mmu_request_region_barr0,
		lMMU_mmu_request_region_barr12,
		lMMU_mmu_request_region_barr4,
		lMMU_mmu_request_region_barr8,
		lMMU_mmu_request_sglist_addr;
  wire [44 : 0] lMMU_mmu_addr_0_request_put;
  wire [42 : 0] lMMU_mmu_addr_0_response_get, lMMU_mmu_addr_1_response_get;
  wire [31 : 0] lMMU_mmu_request_idRequest_fd,
		lMMU_mmu_request_idReturn_sglId,
		lMMU_mmu_request_region_index0,
		lMMU_mmu_request_region_index12,
		lMMU_mmu_request_region_index4,
		lMMU_mmu_request_region_index8,
		lMMU_mmu_request_region_sglId,
		lMMU_mmu_request_setInterface_interfaceId,
		lMMU_mmu_request_setInterface_sglId,
		lMMU_mmu_request_sglist_len,
		lMMU_mmu_request_sglist_sglId,
		lMMU_mmu_request_sglist_sglIndex;
  wire [4 : 0] lMMU_mmu_configResponsePipe_first,
	       lMMU_mmu_idResponsePipe_first;
  wire lMMU_mmu_EN_addr_0_request_put,
       lMMU_mmu_EN_addr_0_response_get,
       lMMU_mmu_EN_addr_1_request_put,
       lMMU_mmu_EN_addr_1_response_get,
       lMMU_mmu_EN_configResponsePipe_deq,
       lMMU_mmu_EN_errorPipe_deq,
       lMMU_mmu_EN_idResponsePipe_deq,
       lMMU_mmu_EN_request_idRequest,
       lMMU_mmu_EN_request_idReturn,
       lMMU_mmu_EN_request_region,
       lMMU_mmu_EN_request_setInterface,
       lMMU_mmu_EN_request_sglist,
       lMMU_mmu_RDY_addr_0_request_put,
       lMMU_mmu_RDY_addr_0_response_get,
       lMMU_mmu_RDY_addr_1_request_put,
       lMMU_mmu_RDY_addr_1_response_get,
       lMMU_mmu_RDY_configResponsePipe_deq,
       lMMU_mmu_RDY_configResponsePipe_first,
       lMMU_mmu_RDY_errorPipe_deq,
       lMMU_mmu_RDY_errorPipe_first,
       lMMU_mmu_RDY_idResponsePipe_deq,
       lMMU_mmu_RDY_idResponsePipe_first,
       lMMU_mmu_RDY_request_idRequest,
       lMMU_mmu_RDY_request_idReturn,
       lMMU_mmu_RDY_request_region,
       lMMU_mmu_RDY_request_sglist;

  // ports of submodule lMemServerIndicationOutput
  wire [127 : 0] lMemServerIndicationOutput_ifc_reportStateDbg_rec;
  wire [63 : 0] lMemServerIndicationOutput_ifc_addrResponse_physAddr,
		lMemServerIndicationOutput_ifc_error_extra,
		lMemServerIndicationOutput_ifc_error_offset,
		lMemServerIndicationOutput_ifc_reportMemoryTraffic_words;
  wire [31 : 0] lMemServerIndicationOutput_ifc_error_code,
		lMemServerIndicationOutput_ifc_error_sglId,
		lMemServerIndicationOutput_portalIfc_indications_0_first,
		lMemServerIndicationOutput_portalIfc_indications_1_first,
		lMemServerIndicationOutput_portalIfc_indications_2_first,
		lMemServerIndicationOutput_portalIfc_indications_3_first;
  wire [15 : 0] lMemServerIndicationOutput_portalIfc_messageSize_size,
		lMemServerIndicationOutput_portalIfc_messageSize_size_methodNumber;
  wire lMemServerIndicationOutput_EN_ifc_addrResponse,
       lMemServerIndicationOutput_EN_ifc_error,
       lMemServerIndicationOutput_EN_ifc_reportMemoryTraffic,
       lMemServerIndicationOutput_EN_ifc_reportStateDbg,
       lMemServerIndicationOutput_EN_portalIfc_indications_0_deq,
       lMemServerIndicationOutput_EN_portalIfc_indications_1_deq,
       lMemServerIndicationOutput_EN_portalIfc_indications_2_deq,
       lMemServerIndicationOutput_EN_portalIfc_indications_3_deq,
       lMemServerIndicationOutput_RDY_ifc_addrResponse,
       lMemServerIndicationOutput_RDY_ifc_error,
       lMemServerIndicationOutput_RDY_ifc_reportMemoryTraffic,
       lMemServerIndicationOutput_RDY_ifc_reportStateDbg,
       lMemServerIndicationOutput_RDY_portalIfc_indications_0_deq,
       lMemServerIndicationOutput_RDY_portalIfc_indications_0_first,
       lMemServerIndicationOutput_RDY_portalIfc_indications_1_deq,
       lMemServerIndicationOutput_RDY_portalIfc_indications_1_first,
       lMemServerIndicationOutput_RDY_portalIfc_indications_2_deq,
       lMemServerIndicationOutput_RDY_portalIfc_indications_2_first,
       lMemServerIndicationOutput_RDY_portalIfc_indications_3_deq,
       lMemServerIndicationOutput_RDY_portalIfc_indications_3_first,
       lMemServerIndicationOutput_portalIfc_indications_0_notEmpty,
       lMemServerIndicationOutput_portalIfc_indications_1_notEmpty,
       lMemServerIndicationOutput_portalIfc_indications_2_notEmpty,
       lMemServerIndicationOutput_portalIfc_indications_3_notEmpty;

  // ports of submodule lMemServerIndicationOutputNoc_fifoMsgSource
  wire [31 : 0] lMemServerIndicationOutputNoc_fifoMsgSource_D_IN,
		lMemServerIndicationOutputNoc_fifoMsgSource_D_OUT;
  wire lMemServerIndicationOutputNoc_fifoMsgSource_CLR,
       lMemServerIndicationOutputNoc_fifoMsgSource_DEQ,
       lMemServerIndicationOutputNoc_fifoMsgSource_EMPTY_N,
       lMemServerIndicationOutputNoc_fifoMsgSource_ENQ,
       lMemServerIndicationOutputNoc_fifoMsgSource_FULL_N;

  // ports of submodule lMemServerRequestInput
  wire [63 : 0] lMemServerRequestInput_pipes_addrTrans_PipeOut_first;
  wire [31 : 0] lMemServerRequestInput_portalIfc_requests_0_enq_v,
		lMemServerRequestInput_portalIfc_requests_1_enq_v,
		lMemServerRequestInput_portalIfc_requests_2_enq_v,
		lMemServerRequestInput_portalIfc_requests_3_enq_v;
  wire [15 : 0] lMemServerRequestInput_portalIfc_messageSize_size_methodNumber;
  wire [3 : 0] lMemServerRequestInput_pipes_setTileState_PipeOut_first;
  wire lMemServerRequestInput_EN_pipes_addrTrans_PipeOut_deq,
       lMemServerRequestInput_EN_pipes_memoryTraffic_PipeOut_deq,
       lMemServerRequestInput_EN_pipes_setTileState_PipeOut_deq,
       lMemServerRequestInput_EN_pipes_stateDbg_PipeOut_deq,
       lMemServerRequestInput_EN_portalIfc_requests_0_enq,
       lMemServerRequestInput_EN_portalIfc_requests_1_enq,
       lMemServerRequestInput_EN_portalIfc_requests_2_enq,
       lMemServerRequestInput_EN_portalIfc_requests_3_enq,
       lMemServerRequestInput_RDY_pipes_addrTrans_PipeOut_deq,
       lMemServerRequestInput_RDY_pipes_addrTrans_PipeOut_first,
       lMemServerRequestInput_RDY_pipes_memoryTraffic_PipeOut_deq,
       lMemServerRequestInput_RDY_pipes_memoryTraffic_PipeOut_first,
       lMemServerRequestInput_RDY_pipes_setTileState_PipeOut_deq,
       lMemServerRequestInput_RDY_pipes_setTileState_PipeOut_first,
       lMemServerRequestInput_RDY_pipes_stateDbg_PipeOut_deq,
       lMemServerRequestInput_RDY_pipes_stateDbg_PipeOut_first,
       lMemServerRequestInput_RDY_portalIfc_requests_0_enq,
       lMemServerRequestInput_RDY_portalIfc_requests_1_enq,
       lMemServerRequestInput_RDY_portalIfc_requests_2_enq,
       lMemServerRequestInput_RDY_portalIfc_requests_3_enq,
       lMemServerRequestInput_pipes_memoryTraffic_PipeOut_first,
       lMemServerRequestInput_pipes_stateDbg_PipeOut_first;

  // ports of submodule lMemServerRequestInputNoc_fifoMsgSink
  wire [31 : 0] lMemServerRequestInputNoc_fifoMsgSink_D_IN,
		lMemServerRequestInputNoc_fifoMsgSink_D_OUT;
  wire lMemServerRequestInputNoc_fifoMsgSink_CLR,
       lMemServerRequestInputNoc_fifoMsgSink_DEQ,
       lMemServerRequestInputNoc_fifoMsgSink_EMPTY_N,
       lMemServerRequestInputNoc_fifoMsgSink_ENQ,
       lMemServerRequestInputNoc_fifoMsgSink_FULL_N;

  // ports of submodule lMemServer_reader_addrReqFifo
  wire [31 : 0] lMemServer_reader_addrReqFifo_D_IN,
		lMemServer_reader_addrReqFifo_D_OUT;
  wire lMemServer_reader_addrReqFifo_CLR,
       lMemServer_reader_addrReqFifo_DEQ,
       lMemServer_reader_addrReqFifo_EMPTY_N,
       lMemServer_reader_addrReqFifo_ENQ;

  // ports of submodule lMemServer_reader_mmu_servers_0_tokFifo
  wire lMemServer_reader_mmu_servers_0_tokFifo_CLR,
       lMemServer_reader_mmu_servers_0_tokFifo_DEQ,
       lMemServer_reader_mmu_servers_0_tokFifo_D_IN,
       lMemServer_reader_mmu_servers_0_tokFifo_D_OUT,
       lMemServer_reader_mmu_servers_0_tokFifo_EMPTY_N,
       lMemServer_reader_mmu_servers_0_tokFifo_ENQ,
       lMemServer_reader_mmu_servers_0_tokFifo_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_clientBurstLen
  wire [10 : 0] lMemServer_reader_readers_0_clientBurstLen_D_IN,
		lMemServer_reader_readers_0_clientBurstLen_D_OUT_1;
  wire [4 : 0] lMemServer_reader_readers_0_clientBurstLen_ADDR_1,
	       lMemServer_reader_readers_0_clientBurstLen_ADDR_2,
	       lMemServer_reader_readers_0_clientBurstLen_ADDR_3,
	       lMemServer_reader_readers_0_clientBurstLen_ADDR_4,
	       lMemServer_reader_readers_0_clientBurstLen_ADDR_5,
	       lMemServer_reader_readers_0_clientBurstLen_ADDR_IN;
  wire lMemServer_reader_readers_0_clientBurstLen_WE;

  // ports of submodule lMemServer_reader_readers_0_clientData_memory
  wire [134 : 0] lMemServer_reader_readers_0_clientData_memory_DIA,
		 lMemServer_reader_readers_0_clientData_memory_DIB,
		 lMemServer_reader_readers_0_clientData_memory_DOA,
		 lMemServer_reader_readers_0_clientData_memory_DOB;
  wire [10 : 0] lMemServer_reader_readers_0_clientData_memory_ADDRA,
		lMemServer_reader_readers_0_clientData_memory_ADDRB;
  wire lMemServer_reader_readers_0_clientData_memory_ENA,
       lMemServer_reader_readers_0_clientData_memory_ENB,
       lMemServer_reader_readers_0_clientData_memory_WEA,
       lMemServer_reader_readers_0_clientData_memory_WEB;

  // ports of submodule lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq
  wire lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq_D_IN,
       lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq_EN,
       lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq_Q_OUT;

  // ports of submodule lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq
  wire lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq_D_IN,
       lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq_EN,
       lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq_Q_OUT;

  // ports of submodule lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff
  wire [134 : 0] lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_D_IN;
  wire lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_CLR,
       lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_DEQ,
       lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_ENQ,
       lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq
  wire lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq_D_IN,
       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq_EN,
       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq_Q_OUT;

  // ports of submodule lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq
  wire lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq_D_IN,
       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq_EN,
       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq_Q_OUT;

  // ports of submodule lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff
  wire [134 : 0] lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_D_IN,
		 lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_D_OUT;
  wire lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_CLR,
       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_DEQ,
       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_EMPTY_N,
       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_ENQ,
       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_clientRequest
  wire [88 : 0] lMemServer_reader_readers_0_clientRequest_D_IN,
		lMemServer_reader_readers_0_clientRequest_D_OUT;
  wire lMemServer_reader_readers_0_clientRequest_CLR,
       lMemServer_reader_readers_0_clientRequest_DEQ,
       lMemServer_reader_readers_0_clientRequest_EMPTY_N,
       lMemServer_reader_readers_0_clientRequest_ENQ,
       lMemServer_reader_readers_0_clientRequest_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_clientSelect
  wire [1 : 0] lMemServer_reader_readers_0_clientSelect_D_IN,
	       lMemServer_reader_readers_0_clientSelect_D_OUT;
  wire lMemServer_reader_readers_0_clientSelect_CLR,
       lMemServer_reader_readers_0_clientSelect_DEQ,
       lMemServer_reader_readers_0_clientSelect_EMPTY_N,
       lMemServer_reader_readers_0_clientSelect_ENQ,
       lMemServer_reader_readers_0_clientSelect_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_dmaErrorFifo
  wire [34 : 0] lMemServer_reader_readers_0_dmaErrorFifo_D_IN,
		lMemServer_reader_readers_0_dmaErrorFifo_D_OUT;
  wire lMemServer_reader_readers_0_dmaErrorFifo_CLR,
       lMemServer_reader_readers_0_dmaErrorFifo_DEQ,
       lMemServer_reader_readers_0_dmaErrorFifo_EMPTY_N,
       lMemServer_reader_readers_0_dmaErrorFifo_ENQ,
       lMemServer_reader_readers_0_dmaErrorFifo_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_serverData
  wire [134 : 0] lMemServer_reader_readers_0_serverData_D_IN,
		 lMemServer_reader_readers_0_serverData_D_OUT;
  wire lMemServer_reader_readers_0_serverData_CLR,
       lMemServer_reader_readers_0_serverData_DEQ,
       lMemServer_reader_readers_0_serverData_EMPTY_N,
       lMemServer_reader_readers_0_serverData_ENQ,
       lMemServer_reader_readers_0_serverData_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_serverProcessing_memory
  wire [23 : 0] lMemServer_reader_readers_0_serverProcessing_memory_DIA,
		lMemServer_reader_readers_0_serverProcessing_memory_DIB,
		lMemServer_reader_readers_0_serverProcessing_memory_DOA,
		lMemServer_reader_readers_0_serverProcessing_memory_DOB;
  wire [4 : 0] lMemServer_reader_readers_0_serverProcessing_memory_ADDRA,
	       lMemServer_reader_readers_0_serverProcessing_memory_ADDRB;
  wire lMemServer_reader_readers_0_serverProcessing_memory_ENA,
       lMemServer_reader_readers_0_serverProcessing_memory_ENB,
       lMemServer_reader_readers_0_serverProcessing_memory_WEA,
       lMemServer_reader_readers_0_serverProcessing_memory_WEB;

  // ports of submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq
  wire lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq_D_IN,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq_EN,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq_Q_OUT;

  // ports of submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq
  wire lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq_D_IN,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq_EN,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq_Q_OUT;

  // ports of submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff
  wire [23 : 0] lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_D_IN,
		lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_D_OUT;
  wire lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_CLR,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_DEQ,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_EMPTY_N,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_ENQ,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq
  wire lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq_D_IN,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq_EN,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq_Q_OUT;

  // ports of submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq
  wire lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq_D_IN,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq_EN,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq_Q_OUT;

  // ports of submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff
  wire [23 : 0] lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_D_IN,
		lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_D_OUT;
  wire lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_CLR,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_DEQ,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_EMPTY_N,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_ENQ,
       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_serverRequest
  wire [134 : 0] lMemServer_reader_readers_0_serverRequest_D_IN,
		 lMemServer_reader_readers_0_serverRequest_D_OUT;
  wire lMemServer_reader_readers_0_serverRequest_CLR,
       lMemServer_reader_readers_0_serverRequest_DEQ,
       lMemServer_reader_readers_0_serverRequest_EMPTY_N,
       lMemServer_reader_readers_0_serverRequest_ENQ,
       lMemServer_reader_readers_0_serverRequest_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_serverTag
  wire [4 : 0] lMemServer_reader_readers_0_serverTag_D_IN,
	       lMemServer_reader_readers_0_serverTag_D_OUT;
  wire lMemServer_reader_readers_0_serverTag_CLR,
       lMemServer_reader_readers_0_serverTag_DEQ,
       lMemServer_reader_readers_0_serverTag_EMPTY_N,
       lMemServer_reader_readers_0_serverTag_ENQ,
       lMemServer_reader_readers_0_serverTag_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_tag_gen_comp_fifo
  wire [4 : 0] lMemServer_reader_readers_0_tag_gen_comp_fifo_D_IN,
	       lMemServer_reader_readers_0_tag_gen_comp_fifo_D_OUT;
  wire lMemServer_reader_readers_0_tag_gen_comp_fifo_CLR,
       lMemServer_reader_readers_0_tag_gen_comp_fifo_DEQ,
       lMemServer_reader_readers_0_tag_gen_comp_fifo_EMPTY_N,
       lMemServer_reader_readers_0_tag_gen_comp_fifo_ENQ,
       lMemServer_reader_readers_0_tag_gen_comp_fifo_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_tag_gen_retFifo
  wire [4 : 0] lMemServer_reader_readers_0_tag_gen_retFifo_D_IN,
	       lMemServer_reader_readers_0_tag_gen_retFifo_D_OUT;
  wire lMemServer_reader_readers_0_tag_gen_retFifo_CLR,
       lMemServer_reader_readers_0_tag_gen_retFifo_DEQ,
       lMemServer_reader_readers_0_tag_gen_retFifo_EMPTY_N,
       lMemServer_reader_readers_0_tag_gen_retFifo_ENQ,
       lMemServer_reader_readers_0_tag_gen_retFifo_FULL_N;

  // ports of submodule lMemServer_reader_readers_0_tag_gen_tagFifo
  wire [4 : 0] lMemServer_reader_readers_0_tag_gen_tagFifo_D_IN,
	       lMemServer_reader_readers_0_tag_gen_tagFifo_D_OUT;
  wire lMemServer_reader_readers_0_tag_gen_tagFifo_CLR,
       lMemServer_reader_readers_0_tag_gen_tagFifo_DEQ,
       lMemServer_reader_readers_0_tag_gen_tagFifo_EMPTY_N,
       lMemServer_reader_readers_0_tag_gen_tagFifo_ENQ,
       lMemServer_reader_readers_0_tag_gen_tagFifo_FULL_N;

  // ports of submodule lMemServer_writer_addrReqFifo
  wire [31 : 0] lMemServer_writer_addrReqFifo_D_IN,
		lMemServer_writer_addrReqFifo_D_OUT;
  wire lMemServer_writer_addrReqFifo_CLR,
       lMemServer_writer_addrReqFifo_DEQ,
       lMemServer_writer_addrReqFifo_EMPTY_N,
       lMemServer_writer_addrReqFifo_ENQ,
       lMemServer_writer_addrReqFifo_FULL_N;

  // ports of submodule lMemServer_writer_mmu_servers_0_tokFifo
  wire lMemServer_writer_mmu_servers_0_tokFifo_CLR,
       lMemServer_writer_mmu_servers_0_tokFifo_DEQ,
       lMemServer_writer_mmu_servers_0_tokFifo_D_IN,
       lMemServer_writer_mmu_servers_0_tokFifo_D_OUT,
       lMemServer_writer_mmu_servers_0_tokFifo_EMPTY_N,
       lMemServer_writer_mmu_servers_0_tokFifo_ENQ,
       lMemServer_writer_mmu_servers_0_tokFifo_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_clientRequest
  wire [88 : 0] lMemServer_writer_writers_0_clientRequest_D_IN,
		lMemServer_writer_writers_0_clientRequest_D_OUT;
  wire lMemServer_writer_writers_0_clientRequest_CLR,
       lMemServer_writer_writers_0_clientRequest_DEQ,
       lMemServer_writer_writers_0_clientRequest_EMPTY_N,
       lMemServer_writer_writers_0_clientRequest_ENQ,
       lMemServer_writer_writers_0_clientRequest_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_clientResponse
  wire [6 : 0] lMemServer_writer_writers_0_clientResponse_D_IN,
	       lMemServer_writer_writers_0_clientResponse_D_OUT;
  wire lMemServer_writer_writers_0_clientResponse_CLR,
       lMemServer_writer_writers_0_clientResponse_DEQ,
       lMemServer_writer_writers_0_clientResponse_EMPTY_N,
       lMemServer_writer_writers_0_clientResponse_ENQ,
       lMemServer_writer_writers_0_clientResponse_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_clientWriteData_0
  wire [134 : 0] lMemServer_writer_writers_0_clientWriteData_0_D_IN,
		 lMemServer_writer_writers_0_clientWriteData_0_D_OUT;
  wire lMemServer_writer_writers_0_clientWriteData_0_CLR,
       lMemServer_writer_writers_0_clientWriteData_0_DEQ,
       lMemServer_writer_writers_0_clientWriteData_0_EMPTY_N,
       lMemServer_writer_writers_0_clientWriteData_0_ENQ,
       lMemServer_writer_writers_0_clientWriteData_0_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_clientWriteData_1
  wire [134 : 0] lMemServer_writer_writers_0_clientWriteData_1_D_IN,
		 lMemServer_writer_writers_0_clientWriteData_1_D_OUT;
  wire lMemServer_writer_writers_0_clientWriteData_1_CLR,
       lMemServer_writer_writers_0_clientWriteData_1_DEQ,
       lMemServer_writer_writers_0_clientWriteData_1_EMPTY_N,
       lMemServer_writer_writers_0_clientWriteData_1_ENQ,
       lMemServer_writer_writers_0_clientWriteData_1_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_dmaErrorFifo
  wire [34 : 0] lMemServer_writer_writers_0_dmaErrorFifo_D_IN,
		lMemServer_writer_writers_0_dmaErrorFifo_D_OUT;
  wire lMemServer_writer_writers_0_dmaErrorFifo_CLR,
       lMemServer_writer_writers_0_dmaErrorFifo_DEQ,
       lMemServer_writer_writers_0_dmaErrorFifo_EMPTY_N,
       lMemServer_writer_writers_0_dmaErrorFifo_ENQ,
       lMemServer_writer_writers_0_dmaErrorFifo_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_memDataFifo
  wire [134 : 0] lMemServer_writer_writers_0_memDataFifo_D_IN,
		 lMemServer_writer_writers_0_memDataFifo_D_OUT;
  wire lMemServer_writer_writers_0_memDataFifo_CLR,
       lMemServer_writer_writers_0_memDataFifo_DEQ,
       lMemServer_writer_writers_0_memDataFifo_EMPTY_N,
       lMemServer_writer_writers_0_memDataFifo_ENQ,
       lMemServer_writer_writers_0_memDataFifo_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_respFifos_memory
  wire [6 : 0] lMemServer_writer_writers_0_respFifos_memory_DIA,
	       lMemServer_writer_writers_0_respFifos_memory_DIB,
	       lMemServer_writer_writers_0_respFifos_memory_DOA,
	       lMemServer_writer_writers_0_respFifos_memory_DOB;
  wire [4 : 0] lMemServer_writer_writers_0_respFifos_memory_ADDRA,
	       lMemServer_writer_writers_0_respFifos_memory_ADDRB;
  wire lMemServer_writer_writers_0_respFifos_memory_ENA,
       lMemServer_writer_writers_0_respFifos_memory_ENB,
       lMemServer_writer_writers_0_respFifos_memory_WEA,
       lMemServer_writer_writers_0_respFifos_memory_WEB;

  // ports of submodule lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq
  wire lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq_D_IN,
       lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq_EN,
       lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq_Q_OUT;

  // ports of submodule lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq
  wire lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq_D_IN,
       lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq_EN,
       lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq_Q_OUT;

  // ports of submodule lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff
  wire [6 : 0] lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_D_IN;
  wire lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_CLR,
       lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_DEQ,
       lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_ENQ,
       lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq
  wire lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq_D_IN,
       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq_EN,
       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq_Q_OUT;

  // ports of submodule lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq
  wire lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq_D_IN,
       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq_EN,
       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq_Q_OUT;

  // ports of submodule lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff
  wire [6 : 0] lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_D_IN,
	       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_D_OUT;
  wire lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_CLR,
       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_DEQ,
       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_EMPTY_N,
       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_ENQ,
       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_serverProcessing
  wire [23 : 0] lMemServer_writer_writers_0_serverProcessing_D_IN,
		lMemServer_writer_writers_0_serverProcessing_D_OUT;
  wire lMemServer_writer_writers_0_serverProcessing_CLR,
       lMemServer_writer_writers_0_serverProcessing_DEQ,
       lMemServer_writer_writers_0_serverProcessing_EMPTY_N,
       lMemServer_writer_writers_0_serverProcessing_ENQ,
       lMemServer_writer_writers_0_serverProcessing_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_serverRequest
  wire [134 : 0] lMemServer_writer_writers_0_serverRequest_D_IN,
		 lMemServer_writer_writers_0_serverRequest_D_OUT;
  wire lMemServer_writer_writers_0_serverRequest_CLR,
       lMemServer_writer_writers_0_serverRequest_DEQ,
       lMemServer_writer_writers_0_serverRequest_EMPTY_N,
       lMemServer_writer_writers_0_serverRequest_ENQ,
       lMemServer_writer_writers_0_serverRequest_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_tag_gen_comp_fifo
  wire [4 : 0] lMemServer_writer_writers_0_tag_gen_comp_fifo_D_IN,
	       lMemServer_writer_writers_0_tag_gen_comp_fifo_D_OUT;
  wire lMemServer_writer_writers_0_tag_gen_comp_fifo_CLR,
       lMemServer_writer_writers_0_tag_gen_comp_fifo_DEQ,
       lMemServer_writer_writers_0_tag_gen_comp_fifo_EMPTY_N,
       lMemServer_writer_writers_0_tag_gen_comp_fifo_ENQ,
       lMemServer_writer_writers_0_tag_gen_comp_fifo_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_tag_gen_retFifo
  wire [4 : 0] lMemServer_writer_writers_0_tag_gen_retFifo_D_IN,
	       lMemServer_writer_writers_0_tag_gen_retFifo_D_OUT;
  wire lMemServer_writer_writers_0_tag_gen_retFifo_CLR,
       lMemServer_writer_writers_0_tag_gen_retFifo_DEQ,
       lMemServer_writer_writers_0_tag_gen_retFifo_EMPTY_N,
       lMemServer_writer_writers_0_tag_gen_retFifo_ENQ,
       lMemServer_writer_writers_0_tag_gen_retFifo_FULL_N;

  // ports of submodule lMemServer_writer_writers_0_tag_gen_tagFifo
  wire [4 : 0] lMemServer_writer_writers_0_tag_gen_tagFifo_D_IN,
	       lMemServer_writer_writers_0_tag_gen_tagFifo_D_OUT;
  wire lMemServer_writer_writers_0_tag_gen_tagFifo_CLR,
       lMemServer_writer_writers_0_tag_gen_tagFifo_DEQ,
       lMemServer_writer_writers_0_tag_gen_tagFifo_EMPTY_N,
       lMemServer_writer_writers_0_tag_gen_tagFifo_ENQ,
       lMemServer_writer_writers_0_tag_gen_tagFifo_FULL_N;

  // ports of submodule sink_0
  wire [31 : 0] sink_0_beat;
  wire sink_0_EN_beat, sink_0_RDY_beat;

  // ports of submodule sink_1
  wire [31 : 0] sink_1_beat;
  wire sink_1_EN_beat, sink_1_RDY_beat;

  // ports of submodule sink_2
  wire [31 : 0] sink_2_beat;
  wire sink_2_EN_beat, sink_2_RDY_beat;

  // ports of submodule slave_2_0_bFifo
  wire [69 : 0] slave_2_0_bFifo_D_IN, slave_2_0_bFifo_D_OUT;
  wire slave_2_0_bFifo_CLR,
       slave_2_0_bFifo_DEQ,
       slave_2_0_bFifo_EMPTY_N,
       slave_2_0_bFifo_ENQ,
       slave_2_0_bFifo_FULL_N;

  // ports of submodule slave_2_0_readDelayFifo
  wire [119 : 0] slave_2_0_readDelayFifo_D_IN, slave_2_0_readDelayFifo_D_OUT;
  wire slave_2_0_readDelayFifo_CLR,
       slave_2_0_readDelayFifo_DEQ,
       slave_2_0_readDelayFifo_EMPTY_N,
       slave_2_0_readDelayFifo_ENQ,
       slave_2_0_readDelayFifo_FULL_N;

  // ports of submodule slave_2_0_reqs
  wire [7 : 0] slave_2_0_reqs_D_IN;
  wire slave_2_0_reqs_CLR, slave_2_0_reqs_DEQ, slave_2_0_reqs_ENQ;

  // ports of submodule slave_2_0_rw_rws_0
  wire [31 : 0] slave_2_0_rw_rws_0_idreturn_id,
		slave_2_0_rw_rws_0_init_handle,
		slave_2_0_rw_rws_0_init_id,
		slave_2_0_rw_rws_0_init_size,
		slave_2_0_rw_rws_0_initfd_fd,
		slave_2_0_rw_rws_0_initfd_id,
		slave_2_0_rw_rws_0_readrequest_addr,
		slave_2_0_rw_rws_0_readrequest_handle,
		slave_2_0_rw_rws_0_readresponse_data,
		slave_2_0_rw_rws_0_write32_addr,
		slave_2_0_rw_rws_0_write32_data,
		slave_2_0_rw_rws_0_write32_handle;
  wire [3 : 0] slave_2_0_rw_rws_0_write32_byteenable;
  wire slave_2_0_rw_rws_0_en_idreturn,
       slave_2_0_rw_rws_0_en_init,
       slave_2_0_rw_rws_0_en_initfd,
       slave_2_0_rw_rws_0_en_readrequest,
       slave_2_0_rw_rws_0_en_readresponse,
       slave_2_0_rw_rws_0_en_write32,
       slave_2_0_rw_rws_0_rdy_readrequest,
       slave_2_0_rw_rws_0_rdy_readresponse;

  // ports of submodule slave_2_0_rw_rws_1
  wire [31 : 0] slave_2_0_rw_rws_1_idreturn_id,
		slave_2_0_rw_rws_1_init_handle,
		slave_2_0_rw_rws_1_init_id,
		slave_2_0_rw_rws_1_init_size,
		slave_2_0_rw_rws_1_initfd_fd,
		slave_2_0_rw_rws_1_initfd_id,
		slave_2_0_rw_rws_1_readrequest_addr,
		slave_2_0_rw_rws_1_readrequest_handle,
		slave_2_0_rw_rws_1_readresponse_data,
		slave_2_0_rw_rws_1_write32_addr,
		slave_2_0_rw_rws_1_write32_data,
		slave_2_0_rw_rws_1_write32_handle;
  wire [3 : 0] slave_2_0_rw_rws_1_write32_byteenable;
  wire slave_2_0_rw_rws_1_en_idreturn,
       slave_2_0_rw_rws_1_en_init,
       slave_2_0_rw_rws_1_en_initfd,
       slave_2_0_rw_rws_1_en_readrequest,
       slave_2_0_rw_rws_1_en_readresponse,
       slave_2_0_rw_rws_1_en_write32,
       slave_2_0_rw_rws_1_rdy_readrequest,
       slave_2_0_rw_rws_1_rdy_readresponse;

  // ports of submodule slave_2_0_rw_rws_2
  wire [31 : 0] slave_2_0_rw_rws_2_idreturn_id,
		slave_2_0_rw_rws_2_init_handle,
		slave_2_0_rw_rws_2_init_id,
		slave_2_0_rw_rws_2_init_size,
		slave_2_0_rw_rws_2_initfd_fd,
		slave_2_0_rw_rws_2_initfd_id,
		slave_2_0_rw_rws_2_readrequest_addr,
		slave_2_0_rw_rws_2_readrequest_handle,
		slave_2_0_rw_rws_2_readresponse_data,
		slave_2_0_rw_rws_2_write32_addr,
		slave_2_0_rw_rws_2_write32_data,
		slave_2_0_rw_rws_2_write32_handle;
  wire [3 : 0] slave_2_0_rw_rws_2_write32_byteenable;
  wire slave_2_0_rw_rws_2_en_idreturn,
       slave_2_0_rw_rws_2_en_init,
       slave_2_0_rw_rws_2_en_initfd,
       slave_2_0_rw_rws_2_en_readrequest,
       slave_2_0_rw_rws_2_en_readresponse,
       slave_2_0_rw_rws_2_en_write32,
       slave_2_0_rw_rws_2_rdy_readrequest,
       slave_2_0_rw_rws_2_rdy_readresponse;

  // ports of submodule slave_2_0_rw_rws_3
  wire [31 : 0] slave_2_0_rw_rws_3_idreturn_id,
		slave_2_0_rw_rws_3_init_handle,
		slave_2_0_rw_rws_3_init_id,
		slave_2_0_rw_rws_3_init_size,
		slave_2_0_rw_rws_3_initfd_fd,
		slave_2_0_rw_rws_3_initfd_id,
		slave_2_0_rw_rws_3_readrequest_addr,
		slave_2_0_rw_rws_3_readrequest_handle,
		slave_2_0_rw_rws_3_readresponse_data,
		slave_2_0_rw_rws_3_write32_addr,
		slave_2_0_rw_rws_3_write32_data,
		slave_2_0_rw_rws_3_write32_handle;
  wire [3 : 0] slave_2_0_rw_rws_3_write32_byteenable;
  wire slave_2_0_rw_rws_3_en_idreturn,
       slave_2_0_rw_rws_3_en_init,
       slave_2_0_rw_rws_3_en_initfd,
       slave_2_0_rw_rws_3_en_readrequest,
       slave_2_0_rw_rws_3_en_readresponse,
       slave_2_0_rw_rws_3_en_write32,
       slave_2_0_rw_rws_3_rdy_readrequest,
       slave_2_0_rw_rws_3_rdy_readresponse;

  // ports of submodule slave_2_0_taglastfifo
  wire [6 : 0] slave_2_0_taglastfifo_D_IN, slave_2_0_taglastfifo_D_OUT;
  wire slave_2_0_taglastfifo_CLR,
       slave_2_0_taglastfifo_DEQ,
       slave_2_0_taglastfifo_EMPTY_N,
       slave_2_0_taglastfifo_ENQ,
       slave_2_0_taglastfifo_FULL_N;

  // ports of submodule slave_2_0_writeDelayFifo
  wire [119 : 0] slave_2_0_writeDelayFifo_D_IN,
		 slave_2_0_writeDelayFifo_D_OUT;
  wire slave_2_0_writeDelayFifo_CLR,
       slave_2_0_writeDelayFifo_DEQ,
       slave_2_0_writeDelayFifo_EMPTY_N,
       slave_2_0_writeDelayFifo_ENQ,
       slave_2_0_writeDelayFifo_FULL_N;

  // ports of submodule tmp_1_0
  wire [31 : 0] tmp_1_0_beat;
  wire tmp_1_0_en_beat;

  // ports of submodule tmp_1_1
  wire [31 : 0] tmp_1_1_beat;
  wire tmp_1_1_en_beat;

  // ports of submodule tmp_1_2
  wire [31 : 0] tmp_1_2_beat;
  wire tmp_1_2_en_beat;

  // ports of submodule top
  wire [134 : 0] top_readers_0_readData_put,
		 top_readers_1_readData_put,
		 top_writers_0_writeData_get,
		 top_writers_1_writeData_get;
  wire [87 : 0] top_readers_0_readReq_get,
		top_readers_1_readReq_get,
		top_writers_0_writeReq_get,
		top_writers_1_writeReq_get;
  wire [31 : 0] top_indications_0_id,
		top_indications_0_message_first,
		top_requests_0_id,
		top_requests_0_message_enq_v;
  wire [5 : 0] top_writers_0_writeDone_put, top_writers_1_writeDone_put;
  wire top_EN_indications_0_message_deq,
       top_EN_readers_0_readData_put,
       top_EN_readers_0_readReq_get,
       top_EN_readers_1_readData_put,
       top_EN_readers_1_readReq_get,
       top_EN_requests_0_message_enq,
       top_EN_writers_0_writeData_get,
       top_EN_writers_0_writeDone_put,
       top_EN_writers_0_writeReq_get,
       top_EN_writers_1_writeData_get,
       top_EN_writers_1_writeDone_put,
       top_EN_writers_1_writeReq_get,
       top_RDY_indications_0_message_deq,
       top_RDY_indications_0_message_first,
       top_RDY_readers_0_readData_put,
       top_RDY_readers_0_readReq_get,
       top_RDY_readers_1_readData_put,
       top_RDY_readers_1_readReq_get,
       top_RDY_requests_0_message_enq,
       top_RDY_writers_0_writeData_get,
       top_RDY_writers_0_writeDone_put,
       top_RDY_writers_0_writeReq_get,
       top_RDY_writers_1_writeData_get,
       top_RDY_writers_1_writeDone_put,
       top_RDY_writers_1_writeReq_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp,
       CAN_FIRE_RL_lMemServer_reader_readers_0_read_data,
       CAN_FIRE_RL_lMemServer_writer_writers_0_checkMmuResp,
       CAN_FIRE_RL_lMemServer_writer_writers_0_dmaError,
       WILL_FIRE_RL_handle_addrTrans_request,
       WILL_FIRE_RL_handle_memoryTraffic_request,
       WILL_FIRE_RL_handle_setTileState_request,
       WILL_FIRE_RL_handle_stateDbg_request,
       WILL_FIRE_RL_lMMUIndicationOutputNoc_sendHeader,
       WILL_FIRE_RL_lMMUIndicationOutputNoc_sendMessage,
       WILL_FIRE_RL_lMMURequestInputNoc_receiveMessage,
       WILL_FIRE_RL_lMMURequestInputNoc_receiveMessageHeader,
       WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendHeader,
       WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendMessage,
       WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessage,
       WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessageHeader,
       WILL_FIRE_RL_lMemServer_0_mr_request,
       WILL_FIRE_RL_lMemServer_0_mr_response,
       WILL_FIRE_RL_lMemServer_1_0_mw_request,
       WILL_FIRE_RL_lMemServer_1_1_mw_request,
       WILL_FIRE_RL_lMemServer_1_mr_request,
       WILL_FIRE_RL_lMemServer_1_mr_response,
       WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_f_init_l157c7,
       WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_l158c10,
       WILL_FIRE_RL_lMemServer_reader_dbgFSM_fsm_start,
       WILL_FIRE_RL_lMemServer_reader_dbgFSM_idle_l157c7,
       WILL_FIRE_RL_lMemServer_reader_dbgFSM_idle_l157c7_1,
       WILL_FIRE_RL_lMemServer_reader_mmuEntry,
       WILL_FIRE_RL_lMemServer_reader_readers_0_burst_remainder,
       WILL_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp,
       WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a,
       WILL_FIRE_RL_lMemServer_reader_readers_0_dmaError,
       WILL_FIRE_RL_lMemServer_reader_readers_0_read_data,
       WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_lMemServer_reader_readers_0_tag_completed,
       WILL_FIRE_RL_lMemServer_reader_readers_0_tag_gen_complete_rule1,
       WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l167c20,
       WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l169c10,
       WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17,
       WILL_FIRE_RL_lMemServer_reader_trafficFSM_fsm_start,
       WILL_FIRE_RL_lMemServer_reader_trafficFSM_idle_l166c4,
       WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_f_init_l241c7,
       WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_l242c10,
       WILL_FIRE_RL_lMemServer_writer_dbgFSM_fsm_start,
       WILL_FIRE_RL_lMemServer_writer_dbgFSM_idle_l241c7,
       WILL_FIRE_RL_lMemServer_writer_dbgFSM_idle_l241c7_1,
       WILL_FIRE_RL_lMemServer_writer_mmuEntry,
       WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l251c20,
       WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l253c10,
       WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l257c17,
       WILL_FIRE_RL_lMemServer_writer_trafficFSM_fsm_start,
       WILL_FIRE_RL_lMemServer_writer_trafficFSM_idle_l250c4,
       WILL_FIRE_RL_lMemServer_writer_writers_0_checkMmuResp,
       WILL_FIRE_RL_lMemServer_writer_writers_0_memdata,
       WILL_FIRE_RL_lMemServer_writer_writers_0_respFifos_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_lMemServer_writer_writers_0_tag_gen_complete_rule1,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_slave_2_0_read_rule;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_lMMUIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2,
	       MUX_lMemServerIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2;
  wire [88 : 0] MUX_lMemServer_reader_readers_0_clientRequest_enq_1__VAL_1,
		MUX_lMemServer_reader_readers_0_clientRequest_enq_1__VAL_2,
		MUX_lMemServer_writer_writers_0_clientRequest_enq_1__VAL_1,
		MUX_lMemServer_writer_writers_0_clientRequest_enq_1__VAL_2;
  wire [63 : 0] MUX_lMemServerIndicationOutput_ifc_addrResponse_1__VAL_1,
		MUX_lMemServerIndicationOutput_ifc_addrResponse_1__VAL_2,
		MUX_lMemServer_reader_trafficAccum_write_1__VAL_1,
		MUX_lMemServer_writer_trafficAccum_write_1__VAL_1;
  wire [44 : 0] MUX_lMMU_mmu_addr_1_request_put_1__VAL_1;
  wire [34 : 0] MUX_lMemServer_reader_readers_0_dmaErrorFifo_enq_1__VAL_1,
		MUX_lMemServer_reader_readers_0_dmaErrorFifo_enq_1__VAL_2,
		MUX_lMemServer_writer_writers_0_dmaErrorFifo_enq_1__VAL_1,
		MUX_lMemServer_writer_writers_0_dmaErrorFifo_enq_1__VAL_2;
  wire [31 : 0] MUX_lMMUIndicationOutputNoc_fifoMsgSource_enq_1__VAL_1,
		MUX_lMemServerIndicationOutput_ifc_error_1__VAL_1,
		MUX_lMemServerIndicationOutput_ifc_error_1__VAL_2,
		MUX_lMemServerIndicationOutputNoc_fifoMsgSource_enq_1__VAL_1,
		MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__VAL_1,
		MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__VAL_2,
		MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__VAL_1,
		MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__VAL_2;
  wire [23 : 0] MUX_lMemServer_reader_readers_0_serverProcessing_memory_b_put_3__VAL_2;
  wire [15 : 0] MUX_lMMUIndicationOutputNoc_messageWordsReg_write_1__VAL_2,
		MUX_lMemServerIndicationOutputNoc_messageWordsReg_write_1__VAL_2;
  wire [10 : 0] MUX_lMemServer_reader_readers_0_clientBurstLen_upd_2__VAL_1,
		MUX_lMemServer_reader_readers_0_clientBurstLen_upd_2__VAL_2,
		MUX_lMemServer_reader_readers_0_clientData_memory_b_put_2__VAL_1,
		MUX_lMemServer_reader_readers_0_clientData_memory_b_put_2__VAL_2;
  wire [9 : 0] MUX_lMemServer_reader_readers_0_compCountReg_write_1__VAL_1,
	       MUX_lMemServer_reader_readers_0_compCountReg_write_1__VAL_2;
  wire [7 : 0] MUX_lMMURequestInputNoc_messageWordsReg_write_1__VAL_2,
	       MUX_lMemServerRequestInputNoc_messageWordsReg_write_1__VAL_2,
	       MUX_lMemServer_reader_dbgPtr_write_1__VAL_1,
	       MUX_lMemServer_reader_trafficPtr_write_1__VAL_1,
	       MUX_lMemServer_writer_dbgPtr_write_1__VAL_1,
	       MUX_lMemServer_writer_trafficPtr_write_1__VAL_1;
  wire [1 : 0] MUX_lMemServer_reader_readers_0_clientSelect_enq_1__VAL_1,
	       MUX_lMemServer_reader_readers_0_clientSelect_enq_1__VAL_2;
  wire MUX_lMMUIndicationOutputNoc_bpState_write_1__SEL_1,
       MUX_lMMURequestInputNoc_bpState_write_1__SEL_1,
       MUX_lMMU_mmu_addr_0_request_put_1__SEL_1,
       MUX_lMMU_mmu_addr_1_request_put_1__SEL_1,
       MUX_lMMU_mmu_addr_1_request_put_1__SEL_2,
       MUX_lMMU_mmu_addr_1_request_put_1__SEL_3,
       MUX_lMemServerIndicationOutput_ifc_error_1__SEL_2,
       MUX_lMemServerIndicationOutputNoc_bpState_write_1__SEL_1,
       MUX_lMemServerRequestInputNoc_bpState_write_1__SEL_1,
       MUX_lMemServer_reader_dbgFSM_start_reg_write_1__SEL_1,
       MUX_lMemServer_reader_dbgFSM_state_mkFSMstate_write_1__SEL_1,
       MUX_lMemServer_reader_readers_0_clientData_memory_b_put_1__SEL_1,
       MUX_lMemServer_reader_readers_0_clientData_memory_b_put_1__SEL_2,
       MUX_lMemServer_reader_readers_0_dmaErrorFifo_enq_1__SEL_1,
       MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__SEL_1,
       MUX_lMemServer_reader_trafficFSM_start_reg_write_1__SEL_1,
       MUX_lMemServer_writer_dbgFSM_start_reg_write_1__SEL_1,
       MUX_lMemServer_writer_dbgFSM_state_mkFSMstate_write_1__SEL_1,
       MUX_lMemServer_writer_trafficFSM_start_reg_write_1__SEL_1,
       MUX_lMemServer_writer_writers_0_dmaErrorFifo_enq_1__SEL_1,
       MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__SEL_1;

  // remaining internal signals
  reg [127 : 0] CASE_lMemServer_writer_writers_0_serverProcess_ETC__q3;
  reg CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q4,
      CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q5,
      CASE_lMMURequestInputNoc_methodIdReg_211_0_lMM_ETC___d1217,
      CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1259,
      CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1264,
      CASE_lMemServerRequestInputNoc_methodIdReg_293_ETC___d1298,
      CASE_lMemServer_writer_writers_0_serverProcess_ETC__q6,
      SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d401,
      SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d427,
      SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d1017,
      SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d986,
      SEL_ARR_NOT_lMemServer_writer_writers_0_killv__ETC___d768,
      SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1057,
      SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1088;
  wire [127 : 0] v__h95928, x_data__h52954;
  wire [63 : 0] v__h43658, v__h81861;
  wire [39 : 0] off__h87160;
  wire [31 : 0] addr__h94701,
		addr__h97530,
		readOffset__h94690,
		t__h11265,
		t__h50335,
		writeOffset__h97519,
		x__h11124,
		x__h11292,
		x__h50194,
		x__h50362,
		y__h11144,
		y__h50214;
  wire [15 : 0] methodNumber__h88764,
		methodNumber__h90584,
		numWords__h88720,
		numWords__h90540,
		roundup__h88719,
		roundup__h90539,
		x__h88873,
		x__h90693;
  wire [9 : 0] IF_lMemServer_reader_readers_0_serverProcessin_ETC__q1,
	       burstLen__h52739,
	       cnt__h14065,
	       readLen__h94689,
	       writeLen___2__h97518,
	       x__h12884,
	       x__h13625,
	       y_avValue_fst__h94682,
	       y_avValue_snd__h52730,
	       y_avValue_snd_fst__h97807;
  wire [7 : 0] IF_lMemServerIndicationOutput_portalIfc_indica_ETC___d1242,
	       _theResult____h89323,
	       _theResult____h91163,
	       messageWords__h89322,
	       messageWords__h91162,
	       readyChannel__h88347,
	       readyChannel__h90073;
  wire [5 : 0] IF_lMemServer_reader_readers_0_serverProcessin_ETC__q2,
	       lMemServer_reader_readers_0_tag_gen_counter_cn_ETC___d272,
	       lMemServer_writer_writers_0_tag_gen_counter_cn_ETC___d684,
	       tag__h13211,
	       x_rename_tag__h12914,
	       x_rename_tag__h51628;
  wire [2 : 0] lMemServer_reader_readers_0_clientData_serverA_ETC___d236,
	       lMemServer_reader_readers_0_serverProcessing_s_ETC___d140,
	       lMemServer_reader_readers_0_serverProcessing_s_ETC___d91,
	       lMemServer_writer_writers_0_respFifos_serverAd_ETC___d648;
  wire CASE_lMMUIndicationOutputNoc_methodIdReg_176_0_ETC___d1185,
       IF_lMemServerRequestInput_pipes_memoryTraffic__ETC___d1149,
       IF_lMemServerRequestInput_pipes_stateDbg_PipeO_ETC___d1138,
       IF_lMemServer_writer_writers_0_firstReg_75_THE_ETC___d800,
       NOT_SEL_ARR_NOT_lMemServer_writer_writers_0_ki_ETC___d779,
       client__h14064,
       lMemServer_reader_dbgFSM_abort_whas__51_AND_lM_ETC___d513,
       lMemServer_reader_readers_0_clientData_serverA_ETC___d356,
       lMemServer_reader_readers_0_clientRequest_i_no_ETC___d963,
       lMemServer_reader_readers_0_serverProcessing_s_ETC___d378,
       lMemServer_reader_readers_0_serverTag_i_notEmp_ETC___d407,
       lMemServer_reader_readers_0_tag_gen_tags_port1_ETC___d277,
       lMemServer_reader_trafficFSM_abort_whas__19_AN_ETC___d577,
       lMemServer_writer_dbgFSM_abort_whas__29_AND_lM_ETC___d891,
       lMemServer_writer_trafficFSM_abort_whas__97_AN_ETC___d953,
       lMemServer_writer_writers_0_clientRequest_i_no_ETC___d1034,
       lMemServer_writer_writers_0_tag_gen_tags_port1_ETC___d689,
       top_readers_0_readReq_get_65_BITS_71_TO_56_66__ETC___d967,
       top_readers_1_readReq_get_005_BITS_71_TO_56_00_ETC___d1007,
       top_writers_0_writeReq_get_036_BITS_71_TO_56_0_ETC___d1038,
       top_writers_1_writeReq_get_076_BITS_71_TO_56_0_ETC___d1078;

  // submodule lMMUIndicationOutput
  mkMMUIndicationOutput lMMUIndicationOutput(.CLK(CLK),
					     .RST_N(RST_N),
					     .ifc_configResp_sglId(lMMUIndicationOutput_ifc_configResp_sglId),
					     .ifc_error_code(lMMUIndicationOutput_ifc_error_code),
					     .ifc_error_extra(lMMUIndicationOutput_ifc_error_extra),
					     .ifc_error_offset(lMMUIndicationOutput_ifc_error_offset),
					     .ifc_error_sglId(lMMUIndicationOutput_ifc_error_sglId),
					     .ifc_idResponse_sglId(lMMUIndicationOutput_ifc_idResponse_sglId),
					     .portalIfc_messageSize_size_methodNumber(lMMUIndicationOutput_portalIfc_messageSize_size_methodNumber),
					     .EN_portalIfc_indications_0_deq(lMMUIndicationOutput_EN_portalIfc_indications_0_deq),
					     .EN_portalIfc_indications_1_deq(lMMUIndicationOutput_EN_portalIfc_indications_1_deq),
					     .EN_portalIfc_indications_2_deq(lMMUIndicationOutput_EN_portalIfc_indications_2_deq),
					     .EN_ifc_idResponse(lMMUIndicationOutput_EN_ifc_idResponse),
					     .EN_ifc_configResp(lMMUIndicationOutput_EN_ifc_configResp),
					     .EN_ifc_error(lMMUIndicationOutput_EN_ifc_error),
					     .portalIfc_messageSize_size(lMMUIndicationOutput_portalIfc_messageSize_size),
					     .RDY_portalIfc_messageSize_size(),
					     .portalIfc_indications_0_first(lMMUIndicationOutput_portalIfc_indications_0_first),
					     .RDY_portalIfc_indications_0_first(lMMUIndicationOutput_RDY_portalIfc_indications_0_first),
					     .RDY_portalIfc_indications_0_deq(lMMUIndicationOutput_RDY_portalIfc_indications_0_deq),
					     .portalIfc_indications_0_notEmpty(lMMUIndicationOutput_portalIfc_indications_0_notEmpty),
					     .RDY_portalIfc_indications_0_notEmpty(),
					     .portalIfc_indications_1_first(lMMUIndicationOutput_portalIfc_indications_1_first),
					     .RDY_portalIfc_indications_1_first(lMMUIndicationOutput_RDY_portalIfc_indications_1_first),
					     .RDY_portalIfc_indications_1_deq(lMMUIndicationOutput_RDY_portalIfc_indications_1_deq),
					     .portalIfc_indications_1_notEmpty(lMMUIndicationOutput_portalIfc_indications_1_notEmpty),
					     .RDY_portalIfc_indications_1_notEmpty(),
					     .portalIfc_indications_2_first(lMMUIndicationOutput_portalIfc_indications_2_first),
					     .RDY_portalIfc_indications_2_first(lMMUIndicationOutput_RDY_portalIfc_indications_2_first),
					     .RDY_portalIfc_indications_2_deq(lMMUIndicationOutput_RDY_portalIfc_indications_2_deq),
					     .portalIfc_indications_2_notEmpty(lMMUIndicationOutput_portalIfc_indications_2_notEmpty),
					     .RDY_portalIfc_indications_2_notEmpty(),
					     .portalIfc_intr_status(),
					     .RDY_portalIfc_intr_status(),
					     .portalIfc_intr_channel(),
					     .RDY_portalIfc_intr_channel(),
					     .RDY_ifc_idResponse(lMMUIndicationOutput_RDY_ifc_idResponse),
					     .RDY_ifc_configResp(lMMUIndicationOutput_RDY_ifc_configResp),
					     .RDY_ifc_error(lMMUIndicationOutput_RDY_ifc_error));

  // submodule lMMUIndicationOutputNoc_fifoMsgSource
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) lMMUIndicationOutputNoc_fifoMsgSource(.RST(RST_N),
								.CLK(CLK),
								.D_IN(lMMUIndicationOutputNoc_fifoMsgSource_D_IN),
								.ENQ(lMMUIndicationOutputNoc_fifoMsgSource_ENQ),
								.DEQ(lMMUIndicationOutputNoc_fifoMsgSource_DEQ),
								.CLR(lMMUIndicationOutputNoc_fifoMsgSource_CLR),
								.D_OUT(lMMUIndicationOutputNoc_fifoMsgSource_D_OUT),
								.FULL_N(lMMUIndicationOutputNoc_fifoMsgSource_FULL_N),
								.EMPTY_N(lMMUIndicationOutputNoc_fifoMsgSource_EMPTY_N));

  // submodule lMMURequestInput
  mkMMURequestInput lMMURequestInput(.CLK(CLK),
				     .RST_N(RST_N),
				     .portalIfc_messageSize_size_methodNumber(lMMURequestInput_portalIfc_messageSize_size_methodNumber),
				     .portalIfc_requests_0_enq_v(lMMURequestInput_portalIfc_requests_0_enq_v),
				     .portalIfc_requests_1_enq_v(lMMURequestInput_portalIfc_requests_1_enq_v),
				     .portalIfc_requests_2_enq_v(lMMURequestInput_portalIfc_requests_2_enq_v),
				     .portalIfc_requests_3_enq_v(lMMURequestInput_portalIfc_requests_3_enq_v),
				     .portalIfc_requests_4_enq_v(lMMURequestInput_portalIfc_requests_4_enq_v),
				     .EN_portalIfc_requests_0_enq(lMMURequestInput_EN_portalIfc_requests_0_enq),
				     .EN_portalIfc_requests_1_enq(lMMURequestInput_EN_portalIfc_requests_1_enq),
				     .EN_portalIfc_requests_2_enq(lMMURequestInput_EN_portalIfc_requests_2_enq),
				     .EN_portalIfc_requests_3_enq(lMMURequestInput_EN_portalIfc_requests_3_enq),
				     .EN_portalIfc_requests_4_enq(lMMURequestInput_EN_portalIfc_requests_4_enq),
				     .EN_pipes_sglist_PipeOut_deq(lMMURequestInput_EN_pipes_sglist_PipeOut_deq),
				     .EN_pipes_region_PipeOut_deq(lMMURequestInput_EN_pipes_region_PipeOut_deq),
				     .EN_pipes_idRequest_PipeOut_deq(lMMURequestInput_EN_pipes_idRequest_PipeOut_deq),
				     .EN_pipes_idReturn_PipeOut_deq(lMMURequestInput_EN_pipes_idReturn_PipeOut_deq),
				     .EN_pipes_setInterface_PipeOut_deq(lMMURequestInput_EN_pipes_setInterface_PipeOut_deq),
				     .portalIfc_messageSize_size(),
				     .RDY_portalIfc_messageSize_size(),
				     .RDY_portalIfc_requests_0_enq(lMMURequestInput_RDY_portalIfc_requests_0_enq),
				     .portalIfc_requests_0_notFull(),
				     .RDY_portalIfc_requests_0_notFull(),
				     .RDY_portalIfc_requests_1_enq(lMMURequestInput_RDY_portalIfc_requests_1_enq),
				     .portalIfc_requests_1_notFull(),
				     .RDY_portalIfc_requests_1_notFull(),
				     .RDY_portalIfc_requests_2_enq(lMMURequestInput_RDY_portalIfc_requests_2_enq),
				     .portalIfc_requests_2_notFull(),
				     .RDY_portalIfc_requests_2_notFull(),
				     .RDY_portalIfc_requests_3_enq(lMMURequestInput_RDY_portalIfc_requests_3_enq),
				     .portalIfc_requests_3_notFull(),
				     .RDY_portalIfc_requests_3_notFull(),
				     .RDY_portalIfc_requests_4_enq(lMMURequestInput_RDY_portalIfc_requests_4_enq),
				     .portalIfc_requests_4_notFull(),
				     .RDY_portalIfc_requests_4_notFull(),
				     .portalIfc_intr_status(),
				     .RDY_portalIfc_intr_status(),
				     .portalIfc_intr_channel(),
				     .RDY_portalIfc_intr_channel(),
				     .pipes_sglist_PipeOut_first(lMMURequestInput_pipes_sglist_PipeOut_first),
				     .RDY_pipes_sglist_PipeOut_first(lMMURequestInput_RDY_pipes_sglist_PipeOut_first),
				     .RDY_pipes_sglist_PipeOut_deq(lMMURequestInput_RDY_pipes_sglist_PipeOut_deq),
				     .pipes_sglist_PipeOut_notEmpty(),
				     .RDY_pipes_sglist_PipeOut_notEmpty(),
				     .pipes_region_PipeOut_first(lMMURequestInput_pipes_region_PipeOut_first),
				     .RDY_pipes_region_PipeOut_first(lMMURequestInput_RDY_pipes_region_PipeOut_first),
				     .RDY_pipes_region_PipeOut_deq(lMMURequestInput_RDY_pipes_region_PipeOut_deq),
				     .pipes_region_PipeOut_notEmpty(),
				     .RDY_pipes_region_PipeOut_notEmpty(),
				     .pipes_idRequest_PipeOut_first(lMMURequestInput_pipes_idRequest_PipeOut_first),
				     .RDY_pipes_idRequest_PipeOut_first(lMMURequestInput_RDY_pipes_idRequest_PipeOut_first),
				     .RDY_pipes_idRequest_PipeOut_deq(lMMURequestInput_RDY_pipes_idRequest_PipeOut_deq),
				     .pipes_idRequest_PipeOut_notEmpty(),
				     .RDY_pipes_idRequest_PipeOut_notEmpty(),
				     .pipes_idReturn_PipeOut_first(lMMURequestInput_pipes_idReturn_PipeOut_first),
				     .RDY_pipes_idReturn_PipeOut_first(lMMURequestInput_RDY_pipes_idReturn_PipeOut_first),
				     .RDY_pipes_idReturn_PipeOut_deq(lMMURequestInput_RDY_pipes_idReturn_PipeOut_deq),
				     .pipes_idReturn_PipeOut_notEmpty(),
				     .RDY_pipes_idReturn_PipeOut_notEmpty(),
				     .pipes_setInterface_PipeOut_first(lMMURequestInput_pipes_setInterface_PipeOut_first),
				     .RDY_pipes_setInterface_PipeOut_first(lMMURequestInput_RDY_pipes_setInterface_PipeOut_first),
				     .RDY_pipes_setInterface_PipeOut_deq(lMMURequestInput_RDY_pipes_setInterface_PipeOut_deq),
				     .pipes_setInterface_PipeOut_notEmpty(),
				     .RDY_pipes_setInterface_PipeOut_notEmpty());

  // submodule lMMURequestInputNoc_fifoMsgSink
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) lMMURequestInputNoc_fifoMsgSink(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(lMMURequestInputNoc_fifoMsgSink_D_IN),
							  .ENQ(lMMURequestInputNoc_fifoMsgSink_ENQ),
							  .DEQ(lMMURequestInputNoc_fifoMsgSink_DEQ),
							  .CLR(lMMURequestInputNoc_fifoMsgSink_CLR),
							  .D_OUT(lMMURequestInputNoc_fifoMsgSink_D_OUT),
							  .FULL_N(lMMURequestInputNoc_fifoMsgSink_FULL_N),
							  .EMPTY_N(lMMURequestInputNoc_fifoMsgSink_EMPTY_N));

  // submodule lMMU_mmu
  mkMMUSynth lMMU_mmu(.mmuid(4'd0),
		      .hostMapped(1'd1),
		      .CLK(CLK),
		      .RST_N(RST_N),
		      .addr_0_request_put(lMMU_mmu_addr_0_request_put),
		      .addr_1_request_put(lMMU_mmu_addr_1_request_put),
		      .request_idRequest_fd(lMMU_mmu_request_idRequest_fd),
		      .request_idReturn_sglId(lMMU_mmu_request_idReturn_sglId),
		      .request_region_barr0(lMMU_mmu_request_region_barr0),
		      .request_region_barr12(lMMU_mmu_request_region_barr12),
		      .request_region_barr4(lMMU_mmu_request_region_barr4),
		      .request_region_barr8(lMMU_mmu_request_region_barr8),
		      .request_region_index0(lMMU_mmu_request_region_index0),
		      .request_region_index12(lMMU_mmu_request_region_index12),
		      .request_region_index4(lMMU_mmu_request_region_index4),
		      .request_region_index8(lMMU_mmu_request_region_index8),
		      .request_region_sglId(lMMU_mmu_request_region_sglId),
		      .request_setInterface_interfaceId(lMMU_mmu_request_setInterface_interfaceId),
		      .request_setInterface_sglId(lMMU_mmu_request_setInterface_sglId),
		      .request_sglist_addr(lMMU_mmu_request_sglist_addr),
		      .request_sglist_len(lMMU_mmu_request_sglist_len),
		      .request_sglist_sglId(lMMU_mmu_request_sglist_sglId),
		      .request_sglist_sglIndex(lMMU_mmu_request_sglist_sglIndex),
		      .EN_request_sglist(lMMU_mmu_EN_request_sglist),
		      .EN_request_region(lMMU_mmu_EN_request_region),
		      .EN_request_idRequest(lMMU_mmu_EN_request_idRequest),
		      .EN_request_idReturn(lMMU_mmu_EN_request_idReturn),
		      .EN_request_setInterface(lMMU_mmu_EN_request_setInterface),
		      .EN_idResponsePipe_deq(lMMU_mmu_EN_idResponsePipe_deq),
		      .EN_configResponsePipe_deq(lMMU_mmu_EN_configResponsePipe_deq),
		      .EN_errorPipe_deq(lMMU_mmu_EN_errorPipe_deq),
		      .EN_addr_0_request_put(lMMU_mmu_EN_addr_0_request_put),
		      .EN_addr_0_response_get(lMMU_mmu_EN_addr_0_response_get),
		      .EN_addr_1_request_put(lMMU_mmu_EN_addr_1_request_put),
		      .EN_addr_1_response_get(lMMU_mmu_EN_addr_1_response_get),
		      .RDY_request_sglist(lMMU_mmu_RDY_request_sglist),
		      .RDY_request_region(lMMU_mmu_RDY_request_region),
		      .RDY_request_idRequest(lMMU_mmu_RDY_request_idRequest),
		      .RDY_request_idReturn(lMMU_mmu_RDY_request_idReturn),
		      .RDY_request_setInterface(),
		      .idResponsePipe_first(lMMU_mmu_idResponsePipe_first),
		      .RDY_idResponsePipe_first(lMMU_mmu_RDY_idResponsePipe_first),
		      .RDY_idResponsePipe_deq(lMMU_mmu_RDY_idResponsePipe_deq),
		      .idResponsePipe_notEmpty(),
		      .RDY_idResponsePipe_notEmpty(),
		      .configResponsePipe_first(lMMU_mmu_configResponsePipe_first),
		      .RDY_configResponsePipe_first(lMMU_mmu_RDY_configResponsePipe_first),
		      .RDY_configResponsePipe_deq(lMMU_mmu_RDY_configResponsePipe_deq),
		      .configResponsePipe_notEmpty(),
		      .RDY_configResponsePipe_notEmpty(),
		      .errorPipe_first(lMMU_mmu_errorPipe_first),
		      .RDY_errorPipe_first(lMMU_mmu_RDY_errorPipe_first),
		      .RDY_errorPipe_deq(lMMU_mmu_RDY_errorPipe_deq),
		      .errorPipe_notEmpty(),
		      .RDY_errorPipe_notEmpty(),
		      .RDY_addr_0_request_put(lMMU_mmu_RDY_addr_0_request_put),
		      .addr_0_response_get(lMMU_mmu_addr_0_response_get),
		      .RDY_addr_0_response_get(lMMU_mmu_RDY_addr_0_response_get),
		      .RDY_addr_1_request_put(lMMU_mmu_RDY_addr_1_request_put),
		      .addr_1_response_get(lMMU_mmu_addr_1_response_get),
		      .RDY_addr_1_response_get(lMMU_mmu_RDY_addr_1_response_get));

  // submodule lMemServerIndicationOutput
  mkMemServerIndicationOutput lMemServerIndicationOutput(.CLK(CLK),
							 .RST_N(RST_N),
							 .ifc_addrResponse_physAddr(lMemServerIndicationOutput_ifc_addrResponse_physAddr),
							 .ifc_error_code(lMemServerIndicationOutput_ifc_error_code),
							 .ifc_error_extra(lMemServerIndicationOutput_ifc_error_extra),
							 .ifc_error_offset(lMemServerIndicationOutput_ifc_error_offset),
							 .ifc_error_sglId(lMemServerIndicationOutput_ifc_error_sglId),
							 .ifc_reportMemoryTraffic_words(lMemServerIndicationOutput_ifc_reportMemoryTraffic_words),
							 .ifc_reportStateDbg_rec(lMemServerIndicationOutput_ifc_reportStateDbg_rec),
							 .portalIfc_messageSize_size_methodNumber(lMemServerIndicationOutput_portalIfc_messageSize_size_methodNumber),
							 .EN_portalIfc_indications_0_deq(lMemServerIndicationOutput_EN_portalIfc_indications_0_deq),
							 .EN_portalIfc_indications_1_deq(lMemServerIndicationOutput_EN_portalIfc_indications_1_deq),
							 .EN_portalIfc_indications_2_deq(lMemServerIndicationOutput_EN_portalIfc_indications_2_deq),
							 .EN_portalIfc_indications_3_deq(lMemServerIndicationOutput_EN_portalIfc_indications_3_deq),
							 .EN_ifc_addrResponse(lMemServerIndicationOutput_EN_ifc_addrResponse),
							 .EN_ifc_reportStateDbg(lMemServerIndicationOutput_EN_ifc_reportStateDbg),
							 .EN_ifc_reportMemoryTraffic(lMemServerIndicationOutput_EN_ifc_reportMemoryTraffic),
							 .EN_ifc_error(lMemServerIndicationOutput_EN_ifc_error),
							 .portalIfc_messageSize_size(lMemServerIndicationOutput_portalIfc_messageSize_size),
							 .RDY_portalIfc_messageSize_size(),
							 .portalIfc_indications_0_first(lMemServerIndicationOutput_portalIfc_indications_0_first),
							 .RDY_portalIfc_indications_0_first(lMemServerIndicationOutput_RDY_portalIfc_indications_0_first),
							 .RDY_portalIfc_indications_0_deq(lMemServerIndicationOutput_RDY_portalIfc_indications_0_deq),
							 .portalIfc_indications_0_notEmpty(lMemServerIndicationOutput_portalIfc_indications_0_notEmpty),
							 .RDY_portalIfc_indications_0_notEmpty(),
							 .portalIfc_indications_1_first(lMemServerIndicationOutput_portalIfc_indications_1_first),
							 .RDY_portalIfc_indications_1_first(lMemServerIndicationOutput_RDY_portalIfc_indications_1_first),
							 .RDY_portalIfc_indications_1_deq(lMemServerIndicationOutput_RDY_portalIfc_indications_1_deq),
							 .portalIfc_indications_1_notEmpty(lMemServerIndicationOutput_portalIfc_indications_1_notEmpty),
							 .RDY_portalIfc_indications_1_notEmpty(),
							 .portalIfc_indications_2_first(lMemServerIndicationOutput_portalIfc_indications_2_first),
							 .RDY_portalIfc_indications_2_first(lMemServerIndicationOutput_RDY_portalIfc_indications_2_first),
							 .RDY_portalIfc_indications_2_deq(lMemServerIndicationOutput_RDY_portalIfc_indications_2_deq),
							 .portalIfc_indications_2_notEmpty(lMemServerIndicationOutput_portalIfc_indications_2_notEmpty),
							 .RDY_portalIfc_indications_2_notEmpty(),
							 .portalIfc_indications_3_first(lMemServerIndicationOutput_portalIfc_indications_3_first),
							 .RDY_portalIfc_indications_3_first(lMemServerIndicationOutput_RDY_portalIfc_indications_3_first),
							 .RDY_portalIfc_indications_3_deq(lMemServerIndicationOutput_RDY_portalIfc_indications_3_deq),
							 .portalIfc_indications_3_notEmpty(lMemServerIndicationOutput_portalIfc_indications_3_notEmpty),
							 .RDY_portalIfc_indications_3_notEmpty(),
							 .portalIfc_intr_status(),
							 .RDY_portalIfc_intr_status(),
							 .portalIfc_intr_channel(),
							 .RDY_portalIfc_intr_channel(),
							 .RDY_ifc_addrResponse(lMemServerIndicationOutput_RDY_ifc_addrResponse),
							 .RDY_ifc_reportStateDbg(lMemServerIndicationOutput_RDY_ifc_reportStateDbg),
							 .RDY_ifc_reportMemoryTraffic(lMemServerIndicationOutput_RDY_ifc_reportMemoryTraffic),
							 .RDY_ifc_error(lMemServerIndicationOutput_RDY_ifc_error));

  // submodule lMemServerIndicationOutputNoc_fifoMsgSource
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) lMemServerIndicationOutputNoc_fifoMsgSource(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(lMemServerIndicationOutputNoc_fifoMsgSource_D_IN),
								      .ENQ(lMemServerIndicationOutputNoc_fifoMsgSource_ENQ),
								      .DEQ(lMemServerIndicationOutputNoc_fifoMsgSource_DEQ),
								      .CLR(lMemServerIndicationOutputNoc_fifoMsgSource_CLR),
								      .D_OUT(lMemServerIndicationOutputNoc_fifoMsgSource_D_OUT),
								      .FULL_N(lMemServerIndicationOutputNoc_fifoMsgSource_FULL_N),
								      .EMPTY_N(lMemServerIndicationOutputNoc_fifoMsgSource_EMPTY_N));

  // submodule lMemServerRequestInput
  mkMemServerRequestInput lMemServerRequestInput(.CLK(CLK),
						 .RST_N(RST_N),
						 .portalIfc_messageSize_size_methodNumber(lMemServerRequestInput_portalIfc_messageSize_size_methodNumber),
						 .portalIfc_requests_0_enq_v(lMemServerRequestInput_portalIfc_requests_0_enq_v),
						 .portalIfc_requests_1_enq_v(lMemServerRequestInput_portalIfc_requests_1_enq_v),
						 .portalIfc_requests_2_enq_v(lMemServerRequestInput_portalIfc_requests_2_enq_v),
						 .portalIfc_requests_3_enq_v(lMemServerRequestInput_portalIfc_requests_3_enq_v),
						 .EN_portalIfc_requests_0_enq(lMemServerRequestInput_EN_portalIfc_requests_0_enq),
						 .EN_portalIfc_requests_1_enq(lMemServerRequestInput_EN_portalIfc_requests_1_enq),
						 .EN_portalIfc_requests_2_enq(lMemServerRequestInput_EN_portalIfc_requests_2_enq),
						 .EN_portalIfc_requests_3_enq(lMemServerRequestInput_EN_portalIfc_requests_3_enq),
						 .EN_pipes_addrTrans_PipeOut_deq(lMemServerRequestInput_EN_pipes_addrTrans_PipeOut_deq),
						 .EN_pipes_setTileState_PipeOut_deq(lMemServerRequestInput_EN_pipes_setTileState_PipeOut_deq),
						 .EN_pipes_stateDbg_PipeOut_deq(lMemServerRequestInput_EN_pipes_stateDbg_PipeOut_deq),
						 .EN_pipes_memoryTraffic_PipeOut_deq(lMemServerRequestInput_EN_pipes_memoryTraffic_PipeOut_deq),
						 .portalIfc_messageSize_size(),
						 .RDY_portalIfc_messageSize_size(),
						 .RDY_portalIfc_requests_0_enq(lMemServerRequestInput_RDY_portalIfc_requests_0_enq),
						 .portalIfc_requests_0_notFull(),
						 .RDY_portalIfc_requests_0_notFull(),
						 .RDY_portalIfc_requests_1_enq(lMemServerRequestInput_RDY_portalIfc_requests_1_enq),
						 .portalIfc_requests_1_notFull(),
						 .RDY_portalIfc_requests_1_notFull(),
						 .RDY_portalIfc_requests_2_enq(lMemServerRequestInput_RDY_portalIfc_requests_2_enq),
						 .portalIfc_requests_2_notFull(),
						 .RDY_portalIfc_requests_2_notFull(),
						 .RDY_portalIfc_requests_3_enq(lMemServerRequestInput_RDY_portalIfc_requests_3_enq),
						 .portalIfc_requests_3_notFull(),
						 .RDY_portalIfc_requests_3_notFull(),
						 .portalIfc_intr_status(),
						 .RDY_portalIfc_intr_status(),
						 .portalIfc_intr_channel(),
						 .RDY_portalIfc_intr_channel(),
						 .pipes_addrTrans_PipeOut_first(lMemServerRequestInput_pipes_addrTrans_PipeOut_first),
						 .RDY_pipes_addrTrans_PipeOut_first(lMemServerRequestInput_RDY_pipes_addrTrans_PipeOut_first),
						 .RDY_pipes_addrTrans_PipeOut_deq(lMemServerRequestInput_RDY_pipes_addrTrans_PipeOut_deq),
						 .pipes_addrTrans_PipeOut_notEmpty(),
						 .RDY_pipes_addrTrans_PipeOut_notEmpty(),
						 .pipes_setTileState_PipeOut_first(lMemServerRequestInput_pipes_setTileState_PipeOut_first),
						 .RDY_pipes_setTileState_PipeOut_first(lMemServerRequestInput_RDY_pipes_setTileState_PipeOut_first),
						 .RDY_pipes_setTileState_PipeOut_deq(lMemServerRequestInput_RDY_pipes_setTileState_PipeOut_deq),
						 .pipes_setTileState_PipeOut_notEmpty(),
						 .RDY_pipes_setTileState_PipeOut_notEmpty(),
						 .pipes_stateDbg_PipeOut_first(lMemServerRequestInput_pipes_stateDbg_PipeOut_first),
						 .RDY_pipes_stateDbg_PipeOut_first(lMemServerRequestInput_RDY_pipes_stateDbg_PipeOut_first),
						 .RDY_pipes_stateDbg_PipeOut_deq(lMemServerRequestInput_RDY_pipes_stateDbg_PipeOut_deq),
						 .pipes_stateDbg_PipeOut_notEmpty(),
						 .RDY_pipes_stateDbg_PipeOut_notEmpty(),
						 .pipes_memoryTraffic_PipeOut_first(lMemServerRequestInput_pipes_memoryTraffic_PipeOut_first),
						 .RDY_pipes_memoryTraffic_PipeOut_first(lMemServerRequestInput_RDY_pipes_memoryTraffic_PipeOut_first),
						 .RDY_pipes_memoryTraffic_PipeOut_deq(lMemServerRequestInput_RDY_pipes_memoryTraffic_PipeOut_deq),
						 .pipes_memoryTraffic_PipeOut_notEmpty(),
						 .RDY_pipes_memoryTraffic_PipeOut_notEmpty());

  // submodule lMemServerRequestInputNoc_fifoMsgSink
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) lMemServerRequestInputNoc_fifoMsgSink(.RST(RST_N),
								.CLK(CLK),
								.D_IN(lMemServerRequestInputNoc_fifoMsgSink_D_IN),
								.ENQ(lMemServerRequestInputNoc_fifoMsgSink_ENQ),
								.DEQ(lMemServerRequestInputNoc_fifoMsgSink_DEQ),
								.CLR(lMemServerRequestInputNoc_fifoMsgSink_CLR),
								.D_OUT(lMemServerRequestInputNoc_fifoMsgSink_D_OUT),
								.FULL_N(lMemServerRequestInputNoc_fifoMsgSink_FULL_N),
								.EMPTY_N(lMemServerRequestInputNoc_fifoMsgSink_EMPTY_N));

  // submodule lMemServer_reader_addrReqFifo
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) lMemServer_reader_addrReqFifo(.RST(RST_N),
							.CLK(CLK),
							.D_IN(lMemServer_reader_addrReqFifo_D_IN),
							.ENQ(lMemServer_reader_addrReqFifo_ENQ),
							.DEQ(lMemServer_reader_addrReqFifo_DEQ),
							.CLR(lMemServer_reader_addrReqFifo_CLR),
							.D_OUT(lMemServer_reader_addrReqFifo_D_OUT),
							.FULL_N(),
							.EMPTY_N(lMemServer_reader_addrReqFifo_EMPTY_N));

  // submodule lMemServer_reader_mmu_servers_0_tokFifo
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd9),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) lMemServer_reader_mmu_servers_0_tokFifo(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(lMemServer_reader_mmu_servers_0_tokFifo_D_IN),
								      .ENQ(lMemServer_reader_mmu_servers_0_tokFifo_ENQ),
								      .DEQ(lMemServer_reader_mmu_servers_0_tokFifo_DEQ),
								      .CLR(lMemServer_reader_mmu_servers_0_tokFifo_CLR),
								      .D_OUT(lMemServer_reader_mmu_servers_0_tokFifo_D_OUT),
								      .FULL_N(lMemServer_reader_mmu_servers_0_tokFifo_FULL_N),
								      .EMPTY_N(lMemServer_reader_mmu_servers_0_tokFifo_EMPTY_N));

  // submodule lMemServer_reader_readers_0_clientBurstLen
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd11),
	    .lo(5'h0),
	    .hi(5'd31)) lMemServer_reader_readers_0_clientBurstLen(.CLK(CLK),
								   .ADDR_1(lMemServer_reader_readers_0_clientBurstLen_ADDR_1),
								   .ADDR_2(lMemServer_reader_readers_0_clientBurstLen_ADDR_2),
								   .ADDR_3(lMemServer_reader_readers_0_clientBurstLen_ADDR_3),
								   .ADDR_4(lMemServer_reader_readers_0_clientBurstLen_ADDR_4),
								   .ADDR_5(lMemServer_reader_readers_0_clientBurstLen_ADDR_5),
								   .ADDR_IN(lMemServer_reader_readers_0_clientBurstLen_ADDR_IN),
								   .D_IN(lMemServer_reader_readers_0_clientBurstLen_D_IN),
								   .WE(lMemServer_reader_readers_0_clientBurstLen_WE),
								   .D_OUT_1(lMemServer_reader_readers_0_clientBurstLen_D_OUT_1),
								   .D_OUT_2(),
								   .D_OUT_3(),
								   .D_OUT_4(),
								   .D_OUT_5());

  // submodule lMemServer_reader_readers_0_clientData_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd135),
	  .MEMSIZE(12'd2048)) lMemServer_reader_readers_0_clientData_memory(.CLKA(CLK),
									    .CLKB(CLK),
									    .ADDRA(lMemServer_reader_readers_0_clientData_memory_ADDRA),
									    .ADDRB(lMemServer_reader_readers_0_clientData_memory_ADDRB),
									    .DIA(lMemServer_reader_readers_0_clientData_memory_DIA),
									    .DIB(lMemServer_reader_readers_0_clientData_memory_DIB),
									    .WEA(lMemServer_reader_readers_0_clientData_memory_WEA),
									    .WEB(lMemServer_reader_readers_0_clientData_memory_WEB),
									    .ENA(lMemServer_reader_readers_0_clientData_memory_ENA),
									    .ENB(lMemServer_reader_readers_0_clientData_memory_ENB),
									    .DOA(lMemServer_reader_readers_0_clientData_memory_DOA),
									    .DOB(lMemServer_reader_readers_0_clientData_memory_DOB));

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq(.CLK(CLK),
												   .D_IN(lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq_D_IN),
												   .EN(lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq_EN),
												   .Q_OUT(lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq_Q_OUT));

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq(.CLK(CLK),
												   .D_IN(lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq_D_IN),
												   .EN(lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq_EN),
												   .Q_OUT(lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq_Q_OUT));

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff
  SizedFIFO #(.p1width(32'd135),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff(.RST(RST_N),
											       .CLK(CLK),
											       .D_IN(lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_D_IN),
											       .ENQ(lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_ENQ),
											       .DEQ(lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_DEQ),
											       .CLR(lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_CLR),
											       .D_OUT(),
											       .FULL_N(lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_FULL_N),
											       .EMPTY_N());

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq(.CLK(CLK),
												   .D_IN(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq_D_IN),
												   .EN(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq_EN),
												   .Q_OUT(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq_Q_OUT));

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq(.CLK(CLK),
												   .D_IN(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq_D_IN),
												   .EN(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq_EN),
												   .Q_OUT(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq_Q_OUT));

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff
  SizedFIFO #(.p1width(32'd135),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff(.RST(RST_N),
											       .CLK(CLK),
											       .D_IN(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_D_IN),
											       .ENQ(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_ENQ),
											       .DEQ(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_DEQ),
											       .CLR(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_CLR),
											       .D_OUT(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_D_OUT),
											       .FULL_N(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_FULL_N),
											       .EMPTY_N(lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_EMPTY_N));

  // submodule lMemServer_reader_readers_0_clientRequest
  SizedFIFO #(.p1width(32'd89),
	      .p2depth(32'd9),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) lMemServer_reader_readers_0_clientRequest(.RST(RST_N),
									.CLK(CLK),
									.D_IN(lMemServer_reader_readers_0_clientRequest_D_IN),
									.ENQ(lMemServer_reader_readers_0_clientRequest_ENQ),
									.DEQ(lMemServer_reader_readers_0_clientRequest_DEQ),
									.CLR(lMemServer_reader_readers_0_clientRequest_CLR),
									.D_OUT(lMemServer_reader_readers_0_clientRequest_D_OUT),
									.FULL_N(lMemServer_reader_readers_0_clientRequest_FULL_N),
									.EMPTY_N(lMemServer_reader_readers_0_clientRequest_EMPTY_N));

  // submodule lMemServer_reader_readers_0_clientSelect
  FIFO2 #(.width(32'd2),
	  .guarded(1'd1)) lMemServer_reader_readers_0_clientSelect(.RST(RST_N),
								   .CLK(CLK),
								   .D_IN(lMemServer_reader_readers_0_clientSelect_D_IN),
								   .ENQ(lMemServer_reader_readers_0_clientSelect_ENQ),
								   .DEQ(lMemServer_reader_readers_0_clientSelect_DEQ),
								   .CLR(lMemServer_reader_readers_0_clientSelect_CLR),
								   .D_OUT(lMemServer_reader_readers_0_clientSelect_D_OUT),
								   .FULL_N(lMemServer_reader_readers_0_clientSelect_FULL_N),
								   .EMPTY_N(lMemServer_reader_readers_0_clientSelect_EMPTY_N));

  // submodule lMemServer_reader_readers_0_dmaErrorFifo
  FIFO2 #(.width(32'd35),
	  .guarded(1'd1)) lMemServer_reader_readers_0_dmaErrorFifo(.RST(RST_N),
								   .CLK(CLK),
								   .D_IN(lMemServer_reader_readers_0_dmaErrorFifo_D_IN),
								   .ENQ(lMemServer_reader_readers_0_dmaErrorFifo_ENQ),
								   .DEQ(lMemServer_reader_readers_0_dmaErrorFifo_DEQ),
								   .CLR(lMemServer_reader_readers_0_dmaErrorFifo_CLR),
								   .D_OUT(lMemServer_reader_readers_0_dmaErrorFifo_D_OUT),
								   .FULL_N(lMemServer_reader_readers_0_dmaErrorFifo_FULL_N),
								   .EMPTY_N(lMemServer_reader_readers_0_dmaErrorFifo_EMPTY_N));

  // submodule lMemServer_reader_readers_0_serverData
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) lMemServer_reader_readers_0_serverData(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(lMemServer_reader_readers_0_serverData_D_IN),
								 .ENQ(lMemServer_reader_readers_0_serverData_ENQ),
								 .DEQ(lMemServer_reader_readers_0_serverData_DEQ),
								 .CLR(lMemServer_reader_readers_0_serverData_CLR),
								 .D_OUT(lMemServer_reader_readers_0_serverData_D_OUT),
								 .FULL_N(lMemServer_reader_readers_0_serverData_FULL_N),
								 .EMPTY_N(lMemServer_reader_readers_0_serverData_EMPTY_N));

  // submodule lMemServer_reader_readers_0_serverProcessing_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd24),
	  .MEMSIZE(6'd32)) lMemServer_reader_readers_0_serverProcessing_memory(.CLKA(CLK),
									       .CLKB(CLK),
									       .ADDRA(lMemServer_reader_readers_0_serverProcessing_memory_ADDRA),
									       .ADDRB(lMemServer_reader_readers_0_serverProcessing_memory_ADDRB),
									       .DIA(lMemServer_reader_readers_0_serverProcessing_memory_DIA),
									       .DIB(lMemServer_reader_readers_0_serverProcessing_memory_DIB),
									       .WEA(lMemServer_reader_readers_0_serverProcessing_memory_WEA),
									       .WEB(lMemServer_reader_readers_0_serverProcessing_memory_WEB),
									       .ENA(lMemServer_reader_readers_0_serverProcessing_memory_ENA),
									       .ENB(lMemServer_reader_readers_0_serverProcessing_memory_ENB),
									       .DOA(lMemServer_reader_readers_0_serverProcessing_memory_DOA),
									       .DOB(lMemServer_reader_readers_0_serverProcessing_memory_DOB));

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq(.CLK(CLK),
													 .D_IN(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq_D_IN),
													 .EN(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq_EN),
													 .Q_OUT(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq_Q_OUT));

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq(.CLK(CLK),
													 .D_IN(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq_D_IN),
													 .EN(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq_EN),
													 .Q_OUT(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq_Q_OUT));

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff
  SizedFIFO #(.p1width(32'd24),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff(.RST(RST_N),
												     .CLK(CLK),
												     .D_IN(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_D_IN),
												     .ENQ(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_ENQ),
												     .DEQ(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_DEQ),
												     .CLR(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_CLR),
												     .D_OUT(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_D_OUT),
												     .FULL_N(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_FULL_N),
												     .EMPTY_N(lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_EMPTY_N));

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq(.CLK(CLK),
													 .D_IN(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq_D_IN),
													 .EN(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq_EN),
													 .Q_OUT(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq_Q_OUT));

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq(.CLK(CLK),
													 .D_IN(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq_D_IN),
													 .EN(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq_EN),
													 .Q_OUT(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq_Q_OUT));

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff
  SizedFIFO #(.p1width(32'd24),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff(.RST(RST_N),
												     .CLK(CLK),
												     .D_IN(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_D_IN),
												     .ENQ(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_ENQ),
												     .DEQ(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_DEQ),
												     .CLR(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_CLR),
												     .D_OUT(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_D_OUT),
												     .FULL_N(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_FULL_N),
												     .EMPTY_N(lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_EMPTY_N));

  // submodule lMemServer_reader_readers_0_serverRequest
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) lMemServer_reader_readers_0_serverRequest(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(lMemServer_reader_readers_0_serverRequest_D_IN),
								    .ENQ(lMemServer_reader_readers_0_serverRequest_ENQ),
								    .DEQ(lMemServer_reader_readers_0_serverRequest_DEQ),
								    .CLR(lMemServer_reader_readers_0_serverRequest_CLR),
								    .D_OUT(lMemServer_reader_readers_0_serverRequest_D_OUT),
								    .FULL_N(lMemServer_reader_readers_0_serverRequest_FULL_N),
								    .EMPTY_N(lMemServer_reader_readers_0_serverRequest_EMPTY_N));

  // submodule lMemServer_reader_readers_0_serverTag
  FIFO2 #(.width(32'd5),
	  .guarded(1'd1)) lMemServer_reader_readers_0_serverTag(.RST(RST_N),
								.CLK(CLK),
								.D_IN(lMemServer_reader_readers_0_serverTag_D_IN),
								.ENQ(lMemServer_reader_readers_0_serverTag_ENQ),
								.DEQ(lMemServer_reader_readers_0_serverTag_DEQ),
								.CLR(lMemServer_reader_readers_0_serverTag_CLR),
								.D_OUT(lMemServer_reader_readers_0_serverTag_D_OUT),
								.FULL_N(lMemServer_reader_readers_0_serverTag_FULL_N),
								.EMPTY_N(lMemServer_reader_readers_0_serverTag_EMPTY_N));

  // submodule lMemServer_reader_readers_0_tag_gen_comp_fifo
  FIFO2 #(.width(32'd5),
	  .guarded(1'd1)) lMemServer_reader_readers_0_tag_gen_comp_fifo(.RST(RST_N),
									.CLK(CLK),
									.D_IN(lMemServer_reader_readers_0_tag_gen_comp_fifo_D_IN),
									.ENQ(lMemServer_reader_readers_0_tag_gen_comp_fifo_ENQ),
									.DEQ(lMemServer_reader_readers_0_tag_gen_comp_fifo_DEQ),
									.CLR(lMemServer_reader_readers_0_tag_gen_comp_fifo_CLR),
									.D_OUT(lMemServer_reader_readers_0_tag_gen_comp_fifo_D_OUT),
									.FULL_N(lMemServer_reader_readers_0_tag_gen_comp_fifo_FULL_N),
									.EMPTY_N(lMemServer_reader_readers_0_tag_gen_comp_fifo_EMPTY_N));

  // submodule lMemServer_reader_readers_0_tag_gen_retFifo
  FIFO2 #(.width(32'd5),
	  .guarded(1'd1)) lMemServer_reader_readers_0_tag_gen_retFifo(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(lMemServer_reader_readers_0_tag_gen_retFifo_D_IN),
								      .ENQ(lMemServer_reader_readers_0_tag_gen_retFifo_ENQ),
								      .DEQ(lMemServer_reader_readers_0_tag_gen_retFifo_DEQ),
								      .CLR(lMemServer_reader_readers_0_tag_gen_retFifo_CLR),
								      .D_OUT(lMemServer_reader_readers_0_tag_gen_retFifo_D_OUT),
								      .FULL_N(lMemServer_reader_readers_0_tag_gen_retFifo_FULL_N),
								      .EMPTY_N(lMemServer_reader_readers_0_tag_gen_retFifo_EMPTY_N));

  // submodule lMemServer_reader_readers_0_tag_gen_tagFifo
  FIFO2 #(.width(32'd5),
	  .guarded(1'd1)) lMemServer_reader_readers_0_tag_gen_tagFifo(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(lMemServer_reader_readers_0_tag_gen_tagFifo_D_IN),
								      .ENQ(lMemServer_reader_readers_0_tag_gen_tagFifo_ENQ),
								      .DEQ(lMemServer_reader_readers_0_tag_gen_tagFifo_DEQ),
								      .CLR(lMemServer_reader_readers_0_tag_gen_tagFifo_CLR),
								      .D_OUT(lMemServer_reader_readers_0_tag_gen_tagFifo_D_OUT),
								      .FULL_N(lMemServer_reader_readers_0_tag_gen_tagFifo_FULL_N),
								      .EMPTY_N(lMemServer_reader_readers_0_tag_gen_tagFifo_EMPTY_N));

  // submodule lMemServer_writer_addrReqFifo
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) lMemServer_writer_addrReqFifo(.RST(RST_N),
							.CLK(CLK),
							.D_IN(lMemServer_writer_addrReqFifo_D_IN),
							.ENQ(lMemServer_writer_addrReqFifo_ENQ),
							.DEQ(lMemServer_writer_addrReqFifo_DEQ),
							.CLR(lMemServer_writer_addrReqFifo_CLR),
							.D_OUT(lMemServer_writer_addrReqFifo_D_OUT),
							.FULL_N(lMemServer_writer_addrReqFifo_FULL_N),
							.EMPTY_N(lMemServer_writer_addrReqFifo_EMPTY_N));

  // submodule lMemServer_writer_mmu_servers_0_tokFifo
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd9),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) lMemServer_writer_mmu_servers_0_tokFifo(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(lMemServer_writer_mmu_servers_0_tokFifo_D_IN),
								      .ENQ(lMemServer_writer_mmu_servers_0_tokFifo_ENQ),
								      .DEQ(lMemServer_writer_mmu_servers_0_tokFifo_DEQ),
								      .CLR(lMemServer_writer_mmu_servers_0_tokFifo_CLR),
								      .D_OUT(lMemServer_writer_mmu_servers_0_tokFifo_D_OUT),
								      .FULL_N(lMemServer_writer_mmu_servers_0_tokFifo_FULL_N),
								      .EMPTY_N(lMemServer_writer_mmu_servers_0_tokFifo_EMPTY_N));

  // submodule lMemServer_writer_writers_0_clientRequest
  SizedFIFO #(.p1width(32'd89),
	      .p2depth(32'd9),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) lMemServer_writer_writers_0_clientRequest(.RST(RST_N),
									.CLK(CLK),
									.D_IN(lMemServer_writer_writers_0_clientRequest_D_IN),
									.ENQ(lMemServer_writer_writers_0_clientRequest_ENQ),
									.DEQ(lMemServer_writer_writers_0_clientRequest_DEQ),
									.CLR(lMemServer_writer_writers_0_clientRequest_CLR),
									.D_OUT(lMemServer_writer_writers_0_clientRequest_D_OUT),
									.FULL_N(lMemServer_writer_writers_0_clientRequest_FULL_N),
									.EMPTY_N(lMemServer_writer_writers_0_clientRequest_EMPTY_N));

  // submodule lMemServer_writer_writers_0_clientResponse
  FIFO2 #(.width(32'd7),
	  .guarded(1'd1)) lMemServer_writer_writers_0_clientResponse(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(lMemServer_writer_writers_0_clientResponse_D_IN),
								     .ENQ(lMemServer_writer_writers_0_clientResponse_ENQ),
								     .DEQ(lMemServer_writer_writers_0_clientResponse_DEQ),
								     .CLR(lMemServer_writer_writers_0_clientResponse_CLR),
								     .D_OUT(lMemServer_writer_writers_0_clientResponse_D_OUT),
								     .FULL_N(lMemServer_writer_writers_0_clientResponse_FULL_N),
								     .EMPTY_N(lMemServer_writer_writers_0_clientResponse_EMPTY_N));

  // submodule lMemServer_writer_writers_0_clientWriteData_0
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) lMemServer_writer_writers_0_clientWriteData_0(.RST(RST_N),
									.CLK(CLK),
									.D_IN(lMemServer_writer_writers_0_clientWriteData_0_D_IN),
									.ENQ(lMemServer_writer_writers_0_clientWriteData_0_ENQ),
									.DEQ(lMemServer_writer_writers_0_clientWriteData_0_DEQ),
									.CLR(lMemServer_writer_writers_0_clientWriteData_0_CLR),
									.D_OUT(lMemServer_writer_writers_0_clientWriteData_0_D_OUT),
									.FULL_N(lMemServer_writer_writers_0_clientWriteData_0_FULL_N),
									.EMPTY_N(lMemServer_writer_writers_0_clientWriteData_0_EMPTY_N));

  // submodule lMemServer_writer_writers_0_clientWriteData_1
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) lMemServer_writer_writers_0_clientWriteData_1(.RST(RST_N),
									.CLK(CLK),
									.D_IN(lMemServer_writer_writers_0_clientWriteData_1_D_IN),
									.ENQ(lMemServer_writer_writers_0_clientWriteData_1_ENQ),
									.DEQ(lMemServer_writer_writers_0_clientWriteData_1_DEQ),
									.CLR(lMemServer_writer_writers_0_clientWriteData_1_CLR),
									.D_OUT(lMemServer_writer_writers_0_clientWriteData_1_D_OUT),
									.FULL_N(lMemServer_writer_writers_0_clientWriteData_1_FULL_N),
									.EMPTY_N(lMemServer_writer_writers_0_clientWriteData_1_EMPTY_N));

  // submodule lMemServer_writer_writers_0_dmaErrorFifo
  FIFO2 #(.width(32'd35),
	  .guarded(1'd1)) lMemServer_writer_writers_0_dmaErrorFifo(.RST(RST_N),
								   .CLK(CLK),
								   .D_IN(lMemServer_writer_writers_0_dmaErrorFifo_D_IN),
								   .ENQ(lMemServer_writer_writers_0_dmaErrorFifo_ENQ),
								   .DEQ(lMemServer_writer_writers_0_dmaErrorFifo_DEQ),
								   .CLR(lMemServer_writer_writers_0_dmaErrorFifo_CLR),
								   .D_OUT(lMemServer_writer_writers_0_dmaErrorFifo_D_OUT),
								   .FULL_N(lMemServer_writer_writers_0_dmaErrorFifo_FULL_N),
								   .EMPTY_N(lMemServer_writer_writers_0_dmaErrorFifo_EMPTY_N));

  // submodule lMemServer_writer_writers_0_memDataFifo
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) lMemServer_writer_writers_0_memDataFifo(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(lMemServer_writer_writers_0_memDataFifo_D_IN),
								  .ENQ(lMemServer_writer_writers_0_memDataFifo_ENQ),
								  .DEQ(lMemServer_writer_writers_0_memDataFifo_DEQ),
								  .CLR(lMemServer_writer_writers_0_memDataFifo_CLR),
								  .D_OUT(lMemServer_writer_writers_0_memDataFifo_D_OUT),
								  .FULL_N(lMemServer_writer_writers_0_memDataFifo_FULL_N),
								  .EMPTY_N(lMemServer_writer_writers_0_memDataFifo_EMPTY_N));

  // submodule lMemServer_writer_writers_0_respFifos_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd7),
	  .MEMSIZE(6'd32)) lMemServer_writer_writers_0_respFifos_memory(.CLKA(CLK),
									.CLKB(CLK),
									.ADDRA(lMemServer_writer_writers_0_respFifos_memory_ADDRA),
									.ADDRB(lMemServer_writer_writers_0_respFifos_memory_ADDRB),
									.DIA(lMemServer_writer_writers_0_respFifos_memory_DIA),
									.DIB(lMemServer_writer_writers_0_respFifos_memory_DIB),
									.WEA(lMemServer_writer_writers_0_respFifos_memory_WEA),
									.WEB(lMemServer_writer_writers_0_respFifos_memory_WEB),
									.ENA(lMemServer_writer_writers_0_respFifos_memory_ENA),
									.ENB(lMemServer_writer_writers_0_respFifos_memory_ENB),
									.DOA(lMemServer_writer_writers_0_respFifos_memory_DOA),
									.DOB(lMemServer_writer_writers_0_respFifos_memory_DOB));

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq(.CLK(CLK),
												  .D_IN(lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq_D_IN),
												  .EN(lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq_EN),
												  .Q_OUT(lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq_Q_OUT));

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq(.CLK(CLK),
												  .D_IN(lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq_D_IN),
												  .EN(lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq_EN),
												  .Q_OUT(lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq_Q_OUT));

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff
  SizedFIFO #(.p1width(32'd7),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff(.RST(RST_N),
											      .CLK(CLK),
											      .D_IN(lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_D_IN),
											      .ENQ(lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_ENQ),
											      .DEQ(lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_DEQ),
											      .CLR(lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_CLR),
											      .D_OUT(),
											      .FULL_N(lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_FULL_N),
											      .EMPTY_N());

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq(.CLK(CLK),
												  .D_IN(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq_D_IN),
												  .EN(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq_EN),
												  .Q_OUT(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq_Q_OUT));

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq(.CLK(CLK),
												  .D_IN(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq_D_IN),
												  .EN(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq_EN),
												  .Q_OUT(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq_Q_OUT));

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff
  SizedFIFO #(.p1width(32'd7),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff(.RST(RST_N),
											      .CLK(CLK),
											      .D_IN(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_D_IN),
											      .ENQ(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_ENQ),
											      .DEQ(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_DEQ),
											      .CLR(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_CLR),
											      .D_OUT(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_D_OUT),
											      .FULL_N(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_FULL_N),
											      .EMPTY_N(lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_EMPTY_N));

  // submodule lMemServer_writer_writers_0_serverProcessing
  SizedFIFO #(.p1width(32'd24),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) lMemServer_writer_writers_0_serverProcessing(.RST(RST_N),
									   .CLK(CLK),
									   .D_IN(lMemServer_writer_writers_0_serverProcessing_D_IN),
									   .ENQ(lMemServer_writer_writers_0_serverProcessing_ENQ),
									   .DEQ(lMemServer_writer_writers_0_serverProcessing_DEQ),
									   .CLR(lMemServer_writer_writers_0_serverProcessing_CLR),
									   .D_OUT(lMemServer_writer_writers_0_serverProcessing_D_OUT),
									   .FULL_N(lMemServer_writer_writers_0_serverProcessing_FULL_N),
									   .EMPTY_N(lMemServer_writer_writers_0_serverProcessing_EMPTY_N));

  // submodule lMemServer_writer_writers_0_serverRequest
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) lMemServer_writer_writers_0_serverRequest(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(lMemServer_writer_writers_0_serverRequest_D_IN),
								    .ENQ(lMemServer_writer_writers_0_serverRequest_ENQ),
								    .DEQ(lMemServer_writer_writers_0_serverRequest_DEQ),
								    .CLR(lMemServer_writer_writers_0_serverRequest_CLR),
								    .D_OUT(lMemServer_writer_writers_0_serverRequest_D_OUT),
								    .FULL_N(lMemServer_writer_writers_0_serverRequest_FULL_N),
								    .EMPTY_N(lMemServer_writer_writers_0_serverRequest_EMPTY_N));

  // submodule lMemServer_writer_writers_0_tag_gen_comp_fifo
  FIFO2 #(.width(32'd5),
	  .guarded(1'd1)) lMemServer_writer_writers_0_tag_gen_comp_fifo(.RST(RST_N),
									.CLK(CLK),
									.D_IN(lMemServer_writer_writers_0_tag_gen_comp_fifo_D_IN),
									.ENQ(lMemServer_writer_writers_0_tag_gen_comp_fifo_ENQ),
									.DEQ(lMemServer_writer_writers_0_tag_gen_comp_fifo_DEQ),
									.CLR(lMemServer_writer_writers_0_tag_gen_comp_fifo_CLR),
									.D_OUT(lMemServer_writer_writers_0_tag_gen_comp_fifo_D_OUT),
									.FULL_N(lMemServer_writer_writers_0_tag_gen_comp_fifo_FULL_N),
									.EMPTY_N(lMemServer_writer_writers_0_tag_gen_comp_fifo_EMPTY_N));

  // submodule lMemServer_writer_writers_0_tag_gen_retFifo
  FIFO2 #(.width(32'd5),
	  .guarded(1'd1)) lMemServer_writer_writers_0_tag_gen_retFifo(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(lMemServer_writer_writers_0_tag_gen_retFifo_D_IN),
								      .ENQ(lMemServer_writer_writers_0_tag_gen_retFifo_ENQ),
								      .DEQ(lMemServer_writer_writers_0_tag_gen_retFifo_DEQ),
								      .CLR(lMemServer_writer_writers_0_tag_gen_retFifo_CLR),
								      .D_OUT(lMemServer_writer_writers_0_tag_gen_retFifo_D_OUT),
								      .FULL_N(lMemServer_writer_writers_0_tag_gen_retFifo_FULL_N),
								      .EMPTY_N(lMemServer_writer_writers_0_tag_gen_retFifo_EMPTY_N));

  // submodule lMemServer_writer_writers_0_tag_gen_tagFifo
  FIFO2 #(.width(32'd5),
	  .guarded(1'd1)) lMemServer_writer_writers_0_tag_gen_tagFifo(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(lMemServer_writer_writers_0_tag_gen_tagFifo_D_IN),
								      .ENQ(lMemServer_writer_writers_0_tag_gen_tagFifo_ENQ),
								      .DEQ(lMemServer_writer_writers_0_tag_gen_tagFifo_DEQ),
								      .CLR(lMemServer_writer_writers_0_tag_gen_tagFifo_CLR),
								      .D_OUT(lMemServer_writer_writers_0_tag_gen_tagFifo_D_OUT),
								      .FULL_N(lMemServer_writer_writers_0_tag_gen_tagFifo_FULL_N),
								      .EMPTY_N(lMemServer_writer_writers_0_tag_gen_tagFifo_EMPTY_N));

  // submodule sink_0
  XsimSink sink_0(.RST(RST_N),
		  .CLK(CLK),
		  .CLK_GATE(1'd1),
		  .portal(top_requests_0_id),
		  .EN_beat(sink_0_EN_beat),
		  .beat(sink_0_beat),
		  .RDY_beat(sink_0_RDY_beat));

  // submodule sink_1
  XsimSink sink_1(.RST(RST_N),
		  .CLK(CLK),
		  .CLK_GATE(1'd1),
		  .portal(32'd2),
		  .EN_beat(sink_1_EN_beat),
		  .beat(sink_1_beat),
		  .RDY_beat(sink_1_RDY_beat));

  // submodule sink_2
  XsimSink sink_2(.RST(RST_N),
		  .CLK(CLK),
		  .CLK_GATE(1'd1),
		  .portal(32'd1),
		  .EN_beat(sink_2_EN_beat),
		  .beat(sink_2_beat),
		  .RDY_beat(sink_2_RDY_beat));

  // submodule slave_2_0_bFifo
  SizedFIFO #(.p1width(32'd70),
	      .p2depth(32'd150),
	      .p3cntr_width(32'd8),
	      .guarded(1'd1)) slave_2_0_bFifo(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(slave_2_0_bFifo_D_IN),
					      .ENQ(slave_2_0_bFifo_ENQ),
					      .DEQ(slave_2_0_bFifo_DEQ),
					      .CLR(slave_2_0_bFifo_CLR),
					      .D_OUT(slave_2_0_bFifo_D_OUT),
					      .FULL_N(slave_2_0_bFifo_FULL_N),
					      .EMPTY_N(slave_2_0_bFifo_EMPTY_N));

  // submodule slave_2_0_readDelayFifo
  SizedFIFO #(.p1width(32'd120),
	      .p2depth(32'd150),
	      .p3cntr_width(32'd8),
	      .guarded(1'd1)) slave_2_0_readDelayFifo(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(slave_2_0_readDelayFifo_D_IN),
						      .ENQ(slave_2_0_readDelayFifo_ENQ),
						      .DEQ(slave_2_0_readDelayFifo_DEQ),
						      .CLR(slave_2_0_readDelayFifo_CLR),
						      .D_OUT(slave_2_0_readDelayFifo_D_OUT),
						      .FULL_N(slave_2_0_readDelayFifo_FULL_N),
						      .EMPTY_N(slave_2_0_readDelayFifo_EMPTY_N));

  // submodule slave_2_0_reqs
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(1'd1)) slave_2_0_reqs(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(slave_2_0_reqs_D_IN),
					     .ENQ(slave_2_0_reqs_ENQ),
					     .DEQ(slave_2_0_reqs_DEQ),
					     .CLR(slave_2_0_reqs_CLR),
					     .D_OUT(),
					     .FULL_N(),
					     .EMPTY_N());

  // submodule slave_2_0_rw_rws_0
  XsimDmaReadWrite slave_2_0_rw_rws_0(.RST(RST_N),
				      .CLK(CLK),
				      .CLK_GATE(1'd1),
				      .idreturn_id(slave_2_0_rw_rws_0_idreturn_id),
				      .init_handle(slave_2_0_rw_rws_0_init_handle),
				      .init_id(slave_2_0_rw_rws_0_init_id),
				      .init_size(slave_2_0_rw_rws_0_init_size),
				      .initfd_fd(slave_2_0_rw_rws_0_initfd_fd),
				      .initfd_id(slave_2_0_rw_rws_0_initfd_id),
				      .readrequest_addr(slave_2_0_rw_rws_0_readrequest_addr),
				      .readrequest_handle(slave_2_0_rw_rws_0_readrequest_handle),
				      .write32_addr(slave_2_0_rw_rws_0_write32_addr),
				      .write32_byteenable(slave_2_0_rw_rws_0_write32_byteenable),
				      .write32_data(slave_2_0_rw_rws_0_write32_data),
				      .write32_handle(slave_2_0_rw_rws_0_write32_handle),
				      .en_init(slave_2_0_rw_rws_0_en_init),
				      .en_initfd(slave_2_0_rw_rws_0_en_initfd),
				      .en_idreturn(slave_2_0_rw_rws_0_en_idreturn),
				      .en_write32(slave_2_0_rw_rws_0_en_write32),
				      .en_readrequest(slave_2_0_rw_rws_0_en_readrequest),
				      .en_readresponse(slave_2_0_rw_rws_0_en_readresponse),
				      .rdy_readrequest(slave_2_0_rw_rws_0_rdy_readrequest),
				      .readresponse_data(slave_2_0_rw_rws_0_readresponse_data),
				      .rdy_readresponse(slave_2_0_rw_rws_0_rdy_readresponse));

  // submodule slave_2_0_rw_rws_1
  XsimDmaReadWrite slave_2_0_rw_rws_1(.RST(RST_N),
				      .CLK(CLK),
				      .CLK_GATE(1'd1),
				      .idreturn_id(slave_2_0_rw_rws_1_idreturn_id),
				      .init_handle(slave_2_0_rw_rws_1_init_handle),
				      .init_id(slave_2_0_rw_rws_1_init_id),
				      .init_size(slave_2_0_rw_rws_1_init_size),
				      .initfd_fd(slave_2_0_rw_rws_1_initfd_fd),
				      .initfd_id(slave_2_0_rw_rws_1_initfd_id),
				      .readrequest_addr(slave_2_0_rw_rws_1_readrequest_addr),
				      .readrequest_handle(slave_2_0_rw_rws_1_readrequest_handle),
				      .write32_addr(slave_2_0_rw_rws_1_write32_addr),
				      .write32_byteenable(slave_2_0_rw_rws_1_write32_byteenable),
				      .write32_data(slave_2_0_rw_rws_1_write32_data),
				      .write32_handle(slave_2_0_rw_rws_1_write32_handle),
				      .en_init(slave_2_0_rw_rws_1_en_init),
				      .en_initfd(slave_2_0_rw_rws_1_en_initfd),
				      .en_idreturn(slave_2_0_rw_rws_1_en_idreturn),
				      .en_write32(slave_2_0_rw_rws_1_en_write32),
				      .en_readrequest(slave_2_0_rw_rws_1_en_readrequest),
				      .en_readresponse(slave_2_0_rw_rws_1_en_readresponse),
				      .rdy_readrequest(slave_2_0_rw_rws_1_rdy_readrequest),
				      .readresponse_data(slave_2_0_rw_rws_1_readresponse_data),
				      .rdy_readresponse(slave_2_0_rw_rws_1_rdy_readresponse));

  // submodule slave_2_0_rw_rws_2
  XsimDmaReadWrite slave_2_0_rw_rws_2(.RST(RST_N),
				      .CLK(CLK),
				      .CLK_GATE(1'd1),
				      .idreturn_id(slave_2_0_rw_rws_2_idreturn_id),
				      .init_handle(slave_2_0_rw_rws_2_init_handle),
				      .init_id(slave_2_0_rw_rws_2_init_id),
				      .init_size(slave_2_0_rw_rws_2_init_size),
				      .initfd_fd(slave_2_0_rw_rws_2_initfd_fd),
				      .initfd_id(slave_2_0_rw_rws_2_initfd_id),
				      .readrequest_addr(slave_2_0_rw_rws_2_readrequest_addr),
				      .readrequest_handle(slave_2_0_rw_rws_2_readrequest_handle),
				      .write32_addr(slave_2_0_rw_rws_2_write32_addr),
				      .write32_byteenable(slave_2_0_rw_rws_2_write32_byteenable),
				      .write32_data(slave_2_0_rw_rws_2_write32_data),
				      .write32_handle(slave_2_0_rw_rws_2_write32_handle),
				      .en_init(slave_2_0_rw_rws_2_en_init),
				      .en_initfd(slave_2_0_rw_rws_2_en_initfd),
				      .en_idreturn(slave_2_0_rw_rws_2_en_idreturn),
				      .en_write32(slave_2_0_rw_rws_2_en_write32),
				      .en_readrequest(slave_2_0_rw_rws_2_en_readrequest),
				      .en_readresponse(slave_2_0_rw_rws_2_en_readresponse),
				      .rdy_readrequest(slave_2_0_rw_rws_2_rdy_readrequest),
				      .readresponse_data(slave_2_0_rw_rws_2_readresponse_data),
				      .rdy_readresponse(slave_2_0_rw_rws_2_rdy_readresponse));

  // submodule slave_2_0_rw_rws_3
  XsimDmaReadWrite slave_2_0_rw_rws_3(.RST(RST_N),
				      .CLK(CLK),
				      .CLK_GATE(1'd1),
				      .idreturn_id(slave_2_0_rw_rws_3_idreturn_id),
				      .init_handle(slave_2_0_rw_rws_3_init_handle),
				      .init_id(slave_2_0_rw_rws_3_init_id),
				      .init_size(slave_2_0_rw_rws_3_init_size),
				      .initfd_fd(slave_2_0_rw_rws_3_initfd_fd),
				      .initfd_id(slave_2_0_rw_rws_3_initfd_id),
				      .readrequest_addr(slave_2_0_rw_rws_3_readrequest_addr),
				      .readrequest_handle(slave_2_0_rw_rws_3_readrequest_handle),
				      .write32_addr(slave_2_0_rw_rws_3_write32_addr),
				      .write32_byteenable(slave_2_0_rw_rws_3_write32_byteenable),
				      .write32_data(slave_2_0_rw_rws_3_write32_data),
				      .write32_handle(slave_2_0_rw_rws_3_write32_handle),
				      .en_init(slave_2_0_rw_rws_3_en_init),
				      .en_initfd(slave_2_0_rw_rws_3_en_initfd),
				      .en_idreturn(slave_2_0_rw_rws_3_en_idreturn),
				      .en_write32(slave_2_0_rw_rws_3_en_write32),
				      .en_readrequest(slave_2_0_rw_rws_3_en_readrequest),
				      .en_readresponse(slave_2_0_rw_rws_3_en_readresponse),
				      .rdy_readrequest(slave_2_0_rw_rws_3_rdy_readrequest),
				      .readresponse_data(slave_2_0_rw_rws_3_readresponse_data),
				      .rdy_readresponse(slave_2_0_rw_rws_3_rdy_readresponse));

  // submodule slave_2_0_taglastfifo
  FIFO2 #(.width(32'd7), .guarded(1'd1)) slave_2_0_taglastfifo(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(slave_2_0_taglastfifo_D_IN),
							       .ENQ(slave_2_0_taglastfifo_ENQ),
							       .DEQ(slave_2_0_taglastfifo_DEQ),
							       .CLR(slave_2_0_taglastfifo_CLR),
							       .D_OUT(slave_2_0_taglastfifo_D_OUT),
							       .FULL_N(slave_2_0_taglastfifo_FULL_N),
							       .EMPTY_N(slave_2_0_taglastfifo_EMPTY_N));

  // submodule slave_2_0_writeDelayFifo
  SizedFIFO #(.p1width(32'd120),
	      .p2depth(32'd150),
	      .p3cntr_width(32'd8),
	      .guarded(1'd1)) slave_2_0_writeDelayFifo(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(slave_2_0_writeDelayFifo_D_IN),
						       .ENQ(slave_2_0_writeDelayFifo_ENQ),
						       .DEQ(slave_2_0_writeDelayFifo_DEQ),
						       .CLR(slave_2_0_writeDelayFifo_CLR),
						       .D_OUT(slave_2_0_writeDelayFifo_D_OUT),
						       .FULL_N(slave_2_0_writeDelayFifo_FULL_N),
						       .EMPTY_N(slave_2_0_writeDelayFifo_EMPTY_N));

  // submodule tmp_1_0
  XsimSource tmp_1_0(.RST(RST_N),
		     .CLK(CLK),
		     .CLK_GATE(1'd1),
		     .portal(top_indications_0_id),
		     .beat(tmp_1_0_beat),
		     .en_beat(tmp_1_0_en_beat));

  // submodule tmp_1_1
  XsimSource tmp_1_1(.RST(RST_N),
		     .CLK(CLK),
		     .CLK_GATE(1'd1),
		     .portal(32'd4),
		     .beat(tmp_1_1_beat),
		     .en_beat(tmp_1_1_en_beat));

  // submodule tmp_1_2
  XsimSource tmp_1_2(.RST(RST_N),
		     .CLK(CLK),
		     .CLK_GATE(1'd1),
		     .portal(32'd3),
		     .beat(tmp_1_2_beat),
		     .en_beat(tmp_1_2_en_beat));

  // submodule top
  mkCnocTop top(.CLK(CLK),
		.RST_N(RST_N),
		.readers_0_readData_put(top_readers_0_readData_put),
		.readers_1_readData_put(top_readers_1_readData_put),
		.requests_0_message_enq_v(top_requests_0_message_enq_v),
		.writers_0_writeDone_put(top_writers_0_writeDone_put),
		.writers_1_writeDone_put(top_writers_1_writeDone_put),
		.EN_requests_0_message_enq(top_EN_requests_0_message_enq),
		.EN_indications_0_message_deq(top_EN_indications_0_message_deq),
		.EN_readers_0_readReq_get(top_EN_readers_0_readReq_get),
		.EN_readers_0_readData_put(top_EN_readers_0_readData_put),
		.EN_readers_1_readReq_get(top_EN_readers_1_readReq_get),
		.EN_readers_1_readData_put(top_EN_readers_1_readData_put),
		.EN_writers_0_writeReq_get(top_EN_writers_0_writeReq_get),
		.EN_writers_0_writeData_get(top_EN_writers_0_writeData_get),
		.EN_writers_0_writeDone_put(top_EN_writers_0_writeDone_put),
		.EN_writers_1_writeReq_get(top_EN_writers_1_writeReq_get),
		.EN_writers_1_writeData_get(top_EN_writers_1_writeData_get),
		.EN_writers_1_writeDone_put(top_EN_writers_1_writeDone_put),
		.requests_0_id(top_requests_0_id),
		.RDY_requests_0_id(),
		.RDY_requests_0_message_enq(top_RDY_requests_0_message_enq),
		.requests_0_message_notFull(),
		.RDY_requests_0_message_notFull(),
		.indications_0_id(top_indications_0_id),
		.RDY_indications_0_id(),
		.indications_0_message_first(top_indications_0_message_first),
		.RDY_indications_0_message_first(top_RDY_indications_0_message_first),
		.RDY_indications_0_message_deq(top_RDY_indications_0_message_deq),
		.indications_0_message_notEmpty(),
		.RDY_indications_0_message_notEmpty(),
		.readers_0_readReq_get(top_readers_0_readReq_get),
		.RDY_readers_0_readReq_get(top_RDY_readers_0_readReq_get),
		.RDY_readers_0_readData_put(top_RDY_readers_0_readData_put),
		.readers_1_readReq_get(top_readers_1_readReq_get),
		.RDY_readers_1_readReq_get(top_RDY_readers_1_readReq_get),
		.RDY_readers_1_readData_put(top_RDY_readers_1_readData_put),
		.writers_0_writeReq_get(top_writers_0_writeReq_get),
		.RDY_writers_0_writeReq_get(top_RDY_writers_0_writeReq_get),
		.writers_0_writeData_get(top_writers_0_writeData_get),
		.RDY_writers_0_writeData_get(top_RDY_writers_0_writeData_get),
		.RDY_writers_0_writeDone_put(top_RDY_writers_0_writeDone_put),
		.writers_1_writeReq_get(top_writers_1_writeReq_get),
		.RDY_writers_1_writeReq_get(top_RDY_writers_1_writeReq_get),
		.writers_1_writeData_get(top_writers_1_writeData_get),
		.RDY_writers_1_writeData_get(top_RDY_writers_1_writeData_get),
		.RDY_writers_1_writeDone_put(top_RDY_writers_1_writeDone_put));

  // rule RL_mkConnectionGetPut_3
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     slave_2_0_writeDelayFifo_EMPTY_N &&
	     slave_2_0_cycles - slave_2_0_writeDelayFifo_D_OUT[119:56] >=
	     64'd150 &&
	     lMemServer_writer_writers_0_memDataFifo_EMPTY_N &&
	     slave_2_0_writeDelayFifo_EMPTY_N &&
	     (writeLen___2__h97518 != 10'd1 || slave_2_0_bFifo_FULL_N) ;

  // rule RL_lMemServer_reader_readers_0_checkMmuResp
  assign CAN_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp =
	     lMemServer_reader_readers_0_clientRequest_EMPTY_N &&
	     lMemServer_reader_readers_0_tag_gen_tagFifo_EMPTY_N &&
	     lMemServer_reader_readers_0_serverRequest_FULL_N &&
	     (lMemServer_reader_readers_0_clientRequest_D_OUT[88:73] !=
	      16'd0 ||
	      !lMemServer_reader_mmu_servers_0_tokFifo_D_OUT &&
	      lMMU_mmu_RDY_addr_0_response_get &&
	      lMemServer_reader_mmu_servers_0_tokFifo_EMPTY_N) ;
  assign WILL_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp =
	     CAN_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp &&
	     !WILL_FIRE_RL_lMemServer_reader_mmuEntry ;

  // rule RL_lMemServer_reader_readers_0_tag_completed
  assign WILL_FIRE_RL_lMemServer_reader_readers_0_tag_completed =
	     lMemServer_reader_readers_0_tag_gen_comp_fifo_EMPTY_N &&
	     lMemServer_reader_readers_0_serverProcessing_s_ETC___d378 &&
	     lMemServer_reader_readers_0_serverTag_FULL_N &&
	     !WILL_FIRE_RL_mkConnectionGetPut ;

  // rule RL_lMemServer_reader_readers_0_burst_remainder
  assign WILL_FIRE_RL_lMemServer_reader_readers_0_burst_remainder =
	     (!SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d427 ||
	      lMemServer_reader_readers_0_clientSelect_FULL_N &&
	      (lMemServer_reader_readers_0_clientData_serverAdapterB_cnt ^
	       3'h4) <
	      3'd7) &&
	     lMemServer_reader_readers_0_compCountReg != 10'd0 ;

  // rule RL_lMemServer_reader_readers_0_read_data
  assign CAN_FIRE_RL_lMemServer_reader_readers_0_read_data =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq_Q_OUT &&
	     (lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_EMPTY_N ||
	      lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_enqw_whas) &&
	     lMemServer_reader_readers_0_serverData_EMPTY_N &&
	     lMemServer_reader_readers_0_clientData_serverA_ETC___d356 ;
  assign WILL_FIRE_RL_lMemServer_reader_readers_0_read_data =
	     CAN_FIRE_RL_lMemServer_reader_readers_0_read_data &&
	     !WILL_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp ;

  // rule RL_lMemServer_reader_readers_0_complete_burst1a
  assign WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq_Q_OUT &&
	     (lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_EMPTY_N ||
	      lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_enqw_whas) &&
	     lMemServer_reader_readers_0_serverTag_i_notEmp_ETC___d407 &&
	     lMemServer_reader_readers_0_compCountReg == 10'd0 ;

  // rule RL_lMemServer_reader_readers_0_tag_gen_complete_rule1
  assign WILL_FIRE_RL_lMemServer_reader_readers_0_tag_gen_complete_rule1 =
	     (lMemServer_reader_readers_0_tag_gen_tags_port1_ETC___d277 ||
	      lMemServer_reader_readers_0_tag_gen_comp_fifo_FULL_N) &&
	     lMemServer_reader_readers_0_tag_gen_comp_state[0] &&
	     !lMemServer_reader_readers_0_tag_gen_retFifo_EMPTY_N ;

  // rule RL_lMemServer_reader_dbgFSM_fsm_start
  assign WILL_FIRE_RL_lMemServer_reader_dbgFSM_fsm_start =
	     lMemServer_reader_dbgFSM_abort_whas__51_AND_lM_ETC___d513 &&
	     lMemServer_reader_dbgFSM_start_reg &&
	     !WILL_FIRE_RL_handle_stateDbg_request ;

  // rule RL_lMemServer_reader_dbgFSM_idle_l157c7
  assign WILL_FIRE_RL_lMemServer_reader_dbgFSM_idle_l157c7 =
	     lMemServer_reader_dbgPtr != 8'd0 &&
	     !lMemServer_reader_dbgFSM_start_wire_whas &&
	     lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd1 ;

  // rule RL_lMemServer_reader_dbgFSM_idle_l157c7_1
  assign WILL_FIRE_RL_lMemServer_reader_dbgFSM_idle_l157c7_1 =
	     lMemServer_reader_dbgPtr != 8'd0 &&
	     !lMemServer_reader_dbgFSM_start_wire_whas &&
	     lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd3 ;

  // rule RL_lMemServer_reader_trafficFSM_action_l169c10
  assign WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l169c10 =
	     lMemServer_reader_trafficPtr == 8'd0 &&
	     (lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd2 ||
	      lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd4) ;

  // rule RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways
  assign WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways =
	     slave_2_0_rw_rws_0_rdy_readresponse &&
	     slave_2_0_rw_rws_1_rdy_readresponse &&
	     slave_2_0_rw_rws_2_rdy_readresponse &&
	     slave_2_0_rw_rws_3_rdy_readresponse &&
	     slave_2_0_taglastfifo_EMPTY_N &&
	     lMemServer_reader_readers_0_serverData_FULL_N &&
	     (lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt ^
	      3'h4) <
	     3'd7 ;

  // rule RL_lMemServer_reader_trafficFSM_fsm_start
  assign WILL_FIRE_RL_lMemServer_reader_trafficFSM_fsm_start =
	     lMemServer_reader_trafficFSM_abort_whas__19_AN_ETC___d577 &&
	     lMemServer_reader_trafficFSM_start_reg &&
	     !WILL_FIRE_RL_handle_memoryTraffic_request ;

  // rule RL_lMemServer_reader_trafficFSM_action_l167c20
  assign WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l167c20 =
	     lMemServer_reader_trafficFSM_start_wire_whas &&
	     (lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd0 ||
	      lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd5) ;

  // rule RL_lMemServer_reader_trafficFSM_idle_l166c4
  assign WILL_FIRE_RL_lMemServer_reader_trafficFSM_idle_l166c4 =
	     !lMemServer_reader_trafficFSM_start_wire_whas &&
	     lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd5 ;

  // rule RL_lMemServer_writer_writers_0_checkMmuResp
  assign CAN_FIRE_RL_lMemServer_writer_writers_0_checkMmuResp =
	     lMemServer_writer_writers_0_clientRequest_EMPTY_N &&
	     lMemServer_writer_writers_0_tag_gen_tagFifo_EMPTY_N &&
	     lMemServer_writer_writers_0_serverRequest_FULL_N &&
	     (lMemServer_writer_writers_0_clientRequest_D_OUT[88:73] !=
	      16'd0 ||
	      !lMemServer_writer_mmu_servers_0_tokFifo_D_OUT &&
	      lMMU_mmu_RDY_addr_1_response_get &&
	      lMemServer_writer_mmu_servers_0_tokFifo_EMPTY_N) ;
  assign WILL_FIRE_RL_lMemServer_writer_writers_0_checkMmuResp =
	     CAN_FIRE_RL_lMemServer_writer_writers_0_checkMmuResp &&
	     !WILL_FIRE_RL_lMemServer_writer_mmuEntry ;

  // rule RL_lMemServer_writer_writers_0_respFifos_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_lMemServer_writer_writers_0_respFifos_serverAdapterB_stageReadResponseAlways =
	     lMemServer_writer_writers_0_tag_gen_comp_fifo_EMPTY_N &&
	     (lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt ^
	      3'h4) <
	     3'd7 ;

  // rule RL_lMemServer_writer_writers_0_tag_gen_complete_rule1
  assign WILL_FIRE_RL_lMemServer_writer_writers_0_tag_gen_complete_rule1 =
	     (lMemServer_writer_writers_0_tag_gen_tags_port1_ETC___d689 ||
	      lMemServer_writer_writers_0_tag_gen_comp_fifo_FULL_N) &&
	     lMemServer_writer_writers_0_tag_gen_comp_state[0] &&
	     !lMemServer_writer_writers_0_tag_gen_retFifo_EMPTY_N ;

  // rule RL_lMemServer_writer_dbgFSM_fsm_start
  assign WILL_FIRE_RL_lMemServer_writer_dbgFSM_fsm_start =
	     lMemServer_writer_dbgFSM_abort_whas__29_AND_lM_ETC___d891 &&
	     lMemServer_writer_dbgFSM_start_reg &&
	     !WILL_FIRE_RL_handle_stateDbg_request ;

  // rule RL_lMemServer_writer_dbgFSM_idle_l241c7
  assign WILL_FIRE_RL_lMemServer_writer_dbgFSM_idle_l241c7 =
	     lMemServer_writer_dbgPtr != 8'd0 &&
	     !lMemServer_writer_dbgFSM_start_wire_whas &&
	     lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd1 ;

  // rule RL_lMemServer_writer_dbgFSM_idle_l241c7_1
  assign WILL_FIRE_RL_lMemServer_writer_dbgFSM_idle_l241c7_1 =
	     lMemServer_writer_dbgPtr != 8'd0 &&
	     !lMemServer_writer_dbgFSM_start_wire_whas &&
	     lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd3 ;

  // rule RL_lMemServer_writer_trafficFSM_action_l253c10
  assign WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l253c10 =
	     lMemServer_writer_trafficPtr == 8'd0 &&
	     (lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd2 ||
	      lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd4) ;

  // rule RL_lMemServer_writer_writers_0_memdata
  assign WILL_FIRE_RL_lMemServer_writer_writers_0_memdata =
	     lMemServer_writer_writers_0_serverProcessing_EMPTY_N &&
	     lMemServer_writer_writers_0_memDataFifo_FULL_N &&
	     NOT_SEL_ARR_NOT_lMemServer_writer_writers_0_ki_ETC___d779 ;

  // rule RL_lMemServer_writer_trafficFSM_fsm_start
  assign WILL_FIRE_RL_lMemServer_writer_trafficFSM_fsm_start =
	     lMemServer_writer_trafficFSM_abort_whas__97_AN_ETC___d953 &&
	     lMemServer_writer_trafficFSM_start_reg &&
	     !WILL_FIRE_RL_handle_memoryTraffic_request ;

  // rule RL_lMemServer_writer_trafficFSM_action_l251c20
  assign WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l251c20 =
	     lMemServer_writer_trafficFSM_start_wire_whas &&
	     (lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd0 ||
	      lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd5) ;

  // rule RL_lMemServer_writer_trafficFSM_idle_l250c4
  assign WILL_FIRE_RL_lMemServer_writer_trafficFSM_idle_l250c4 =
	     !lMemServer_writer_trafficFSM_start_wire_whas &&
	     lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd5 ;

  // rule RL_lMemServer_0_mr_request
  assign WILL_FIRE_RL_lMemServer_0_mr_request =
	     top_RDY_readers_0_readReq_get &&
	     lMemServer_reader_readers_0_clientRequest_i_no_ETC___d963 ;

  // rule RL_lMemServer_0_mr_response
  assign WILL_FIRE_RL_lMemServer_0_mr_response =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq_Q_OUT &&
	     (lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_EMPTY_N ||
	      lMemServer_reader_readers_0_clientData_serverAdapterB_outData_enqw_whas) &&
	     lMemServer_reader_readers_0_clientSelect_EMPTY_N &&
	     lMemServer_reader_readers_0_clientSelect_D_OUT == 2'd0 &&
	     top_RDY_readers_0_readData_put ;

  // rule RL_lMemServer_1_mr_request
  assign WILL_FIRE_RL_lMemServer_1_mr_request =
	     top_RDY_readers_1_readReq_get &&
	     lMemServer_reader_readers_0_clientRequest_i_no_ETC___d963 &&
	     !WILL_FIRE_RL_lMemServer_0_mr_request ;

  // rule RL_lMemServer_1_mr_response
  assign WILL_FIRE_RL_lMemServer_1_mr_response =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq_Q_OUT &&
	     (lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_EMPTY_N ||
	      lMemServer_reader_readers_0_clientData_serverAdapterB_outData_enqw_whas) &&
	     lMemServer_reader_readers_0_clientSelect_EMPTY_N &&
	     lMemServer_reader_readers_0_clientSelect_D_OUT == 2'd1 &&
	     top_RDY_readers_1_readData_put ;

  // rule RL_lMemServer_1_0_mw_request
  assign WILL_FIRE_RL_lMemServer_1_0_mw_request =
	     top_RDY_writers_0_writeReq_get &&
	     lMemServer_writer_writers_0_clientRequest_i_no_ETC___d1034 &&
	     !WILL_FIRE_RL_handle_addrTrans_request ;

  // rule RL_lMemServer_1_1_mw_request
  assign WILL_FIRE_RL_lMemServer_1_1_mw_request =
	     top_RDY_writers_1_writeReq_get &&
	     lMemServer_writer_writers_0_clientRequest_i_no_ETC___d1034 &&
	     !WILL_FIRE_RL_lMemServer_1_0_mw_request &&
	     !WILL_FIRE_RL_handle_addrTrans_request ;

  // rule RL_lMMUIndicationOutputNoc_sendHeader
  assign WILL_FIRE_RL_lMMUIndicationOutputNoc_sendHeader =
	     lMMUIndicationOutputNoc_fifoMsgSource_FULL_N &&
	     !lMMUIndicationOutputNoc_bpState &&
	     (lMMUIndicationOutput_portalIfc_indications_0_notEmpty ||
	      lMMUIndicationOutput_portalIfc_indications_1_notEmpty ||
	      lMMUIndicationOutput_portalIfc_indications_2_notEmpty) ;

  // rule RL_lMMUIndicationOutputNoc_sendMessage
  assign WILL_FIRE_RL_lMMUIndicationOutputNoc_sendMessage =
	     lMMUIndicationOutputNoc_fifoMsgSource_FULL_N &&
	     CASE_lMMUIndicationOutputNoc_methodIdReg_176_0_ETC___d1185 &&
	     lMMUIndicationOutputNoc_bpState ;

  // rule RL_lMMURequestInputNoc_receiveMessageHeader
  assign WILL_FIRE_RL_lMMURequestInputNoc_receiveMessageHeader =
	     lMMURequestInputNoc_fifoMsgSink_EMPTY_N &&
	     !lMMURequestInputNoc_bpState ;

  // rule RL_lMMURequestInputNoc_receiveMessage
  assign WILL_FIRE_RL_lMMURequestInputNoc_receiveMessage =
	     lMMURequestInputNoc_fifoMsgSink_EMPTY_N &&
	     CASE_lMMURequestInputNoc_methodIdReg_211_0_lMM_ETC___d1217 &&
	     lMMURequestInputNoc_bpState ;

  // rule RL_lMemServerIndicationOutputNoc_sendHeader
  assign WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendHeader =
	     lMemServerIndicationOutputNoc_fifoMsgSource_FULL_N &&
	     !lMemServerIndicationOutputNoc_bpState &&
	     (lMemServerIndicationOutput_portalIfc_indications_0_notEmpty ||
	      lMemServerIndicationOutput_portalIfc_indications_1_notEmpty ||
	      lMemServerIndicationOutput_portalIfc_indications_2_notEmpty ||
	      lMemServerIndicationOutput_portalIfc_indications_3_notEmpty) ;

  // rule RL_lMemServer_reader_mmuEntry
  assign WILL_FIRE_RL_lMemServer_reader_mmuEntry =
	     lMemServerIndicationOutput_RDY_ifc_addrResponse &&
	     lMemServer_reader_addrReqFifo_EMPTY_N &&
	     (lMemServer_reader_addrReqFifo_D_OUT[31:16] != 16'd0 ||
	      lMMU_mmu_RDY_addr_0_response_get) ;

  // rule RL_lMemServer_reader_readers_0_dmaError
  assign WILL_FIRE_RL_lMemServer_reader_readers_0_dmaError =
	     lMemServerIndicationOutput_RDY_ifc_error &&
	     lMemServer_reader_readers_0_dmaErrorFifo_EMPTY_N ;

  // rule RL_lMemServer_reader_dbgFSM_action_l158c10
  assign WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_l158c10 =
	     lMemServerIndicationOutput_RDY_ifc_reportStateDbg &&
	     lMemServer_reader_dbgPtr == 8'd0 &&
	     (lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd1 ||
	      lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd3) ;

  // rule RL_lMemServer_reader_trafficFSM_action_l173c17
  assign WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17 =
	     lMemServerIndicationOutput_RDY_ifc_reportMemoryTraffic &&
	     lMemServer_reader_trafficPtr != 8'd0 &&
	     (lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd2 ||
	      lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd4) ;

  // rule RL_lMemServer_writer_mmuEntry
  assign WILL_FIRE_RL_lMemServer_writer_mmuEntry =
	     lMemServerIndicationOutput_RDY_ifc_addrResponse &&
	     lMemServer_writer_addrReqFifo_EMPTY_N &&
	     (lMemServer_writer_addrReqFifo_D_OUT[31:16] != 16'd0 ||
	      lMMU_mmu_RDY_addr_1_response_get) &&
	     !WILL_FIRE_RL_lMemServer_reader_mmuEntry ;

  // rule RL_lMemServer_writer_writers_0_dmaError
  assign CAN_FIRE_RL_lMemServer_writer_writers_0_dmaError =
	     lMemServerIndicationOutput_RDY_ifc_error &&
	     lMemServer_writer_writers_0_dmaErrorFifo_EMPTY_N ;

  // rule RL_lMemServer_writer_dbgFSM_action_l242c10
  assign WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_l242c10 =
	     lMemServerIndicationOutput_RDY_ifc_reportStateDbg &&
	     lMemServer_writer_dbgPtr == 8'd0 &&
	     (lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd1 ||
	      lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd3) &&
	     !WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_l158c10 ;

  // rule RL_lMemServer_writer_trafficFSM_action_l257c17
  assign WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l257c17 =
	     lMemServerIndicationOutput_RDY_ifc_reportMemoryTraffic &&
	     lMemServer_writer_trafficPtr != 8'd0 &&
	     (lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd2 ||
	      lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd4) &&
	     !WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17 ;

  // rule RL_lMemServerIndicationOutputNoc_sendMessage
  assign WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendMessage =
	     lMemServerIndicationOutputNoc_fifoMsgSource_FULL_N &&
	     CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1259 &&
	     CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1264 &&
	     lMemServerIndicationOutputNoc_bpState ;

  // rule RL_lMemServerRequestInputNoc_receiveMessageHeader
  assign WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessageHeader =
	     lMemServerRequestInputNoc_fifoMsgSink_EMPTY_N &&
	     !lMemServerRequestInputNoc_bpState ;

  // rule RL_lMemServerRequestInputNoc_receiveMessage
  assign WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessage =
	     lMemServerRequestInputNoc_fifoMsgSink_EMPTY_N &&
	     CASE_lMemServerRequestInputNoc_methodIdReg_293_ETC___d1298 &&
	     lMemServerRequestInputNoc_bpState ;

  // rule RL_handle_addrTrans_request
  assign WILL_FIRE_RL_handle_addrTrans_request =
	     lMemServerRequestInput_RDY_pipes_addrTrans_PipeOut_first &&
	     lMemServerRequestInput_RDY_pipes_addrTrans_PipeOut_deq &&
	     lMemServer_writer_addrReqFifo_FULL_N &&
	     (lMemServerRequestInput_pipes_addrTrans_PipeOut_first[63:48] !=
	      16'd0 ||
	      lMMU_mmu_RDY_addr_1_request_put) ;

  // rule RL_handle_setTileState_request
  assign WILL_FIRE_RL_handle_setTileState_request =
	     lMemServerRequestInput_RDY_pipes_setTileState_PipeOut_first &&
	     lMemServerRequestInput_RDY_pipes_setTileState_PipeOut_deq ;

  // rule RL_handle_stateDbg_request
  assign WILL_FIRE_RL_handle_stateDbg_request =
	     lMemServerRequestInput_RDY_pipes_stateDbg_PipeOut_first &&
	     lMemServerRequestInput_RDY_pipes_stateDbg_PipeOut_deq &&
	     IF_lMemServerRequestInput_pipes_stateDbg_PipeO_ETC___d1138 ;

  // rule RL_handle_memoryTraffic_request
  assign WILL_FIRE_RL_handle_memoryTraffic_request =
	     lMemServerRequestInput_RDY_pipes_memoryTraffic_PipeOut_first &&
	     lMemServerRequestInput_RDY_pipes_memoryTraffic_PipeOut_deq &&
	     IF_lMemServerRequestInput_pipes_memoryTraffic__ETC___d1149 ;

  // rule RL_lMemServer_reader_dbgFSM_action_f_init_l157c7
  assign WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_f_init_l157c7 =
	     lMemServer_reader_dbgFSM_start_wire_whas &&
	     lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd0 ||
	     lMemServer_reader_dbgPtr != 8'd0 &&
	     lMemServer_reader_dbgFSM_start_wire_whas &&
	     lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd1 ||
	     lMemServer_reader_dbgPtr != 8'd0 &&
	     lMemServer_reader_dbgFSM_start_wire_whas &&
	     lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd3 ;

  // rule RL_lMemServer_writer_dbgFSM_action_f_init_l241c7
  assign WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_f_init_l241c7 =
	     lMemServer_writer_dbgFSM_start_wire_whas &&
	     lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd0 ||
	     lMemServer_writer_dbgPtr != 8'd0 &&
	     lMemServer_writer_dbgFSM_start_wire_whas &&
	     lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd1 ||
	     lMemServer_writer_dbgPtr != 8'd0 &&
	     lMemServer_writer_dbgFSM_start_wire_whas &&
	     lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd3 ;

  // rule RL_slave_2_0_read_rule
  assign WILL_FIRE_RL_slave_2_0_read_rule =
	     slave_2_0_rw_rws_0_rdy_readrequest &&
	     slave_2_0_rw_rws_1_rdy_readrequest &&
	     slave_2_0_rw_rws_2_rdy_readrequest &&
	     slave_2_0_rw_rws_3_rdy_readrequest &&
	     slave_2_0_readDelayFifo_EMPTY_N &&
	     slave_2_0_taglastfifo_FULL_N &&
	     slave_2_0_readDelayFifo_EMPTY_N &&
	     slave_2_0_cycles - slave_2_0_readDelayFifo_D_OUT[119:56] >=
	     64'd150 ;

  // rule RL_mkConnectionGetPut
  assign WILL_FIRE_RL_mkConnectionGetPut =
	     lMemServer_reader_readers_0_serverProcessing_s_ETC___d378 &&
	     lMemServer_reader_readers_0_serverRequest_EMPTY_N &&
	     slave_2_0_readDelayFifo_FULL_N ;

  // inputs to muxes for submodule ports
  assign MUX_lMMUIndicationOutputNoc_bpState_write_1__SEL_1 =
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendMessage &&
	     lMMUIndicationOutputNoc_messageWordsReg == 16'd1 ;
  assign MUX_lMMURequestInputNoc_bpState_write_1__SEL_1 =
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessageHeader &&
	     _theResult____h89323 != 8'd0 ;
  assign MUX_lMMU_mmu_addr_0_request_put_1__SEL_1 =
	     WILL_FIRE_RL_lMemServer_0_mr_request &&
	     top_readers_0_readReq_get[87:72] == 16'd0 &&
	     top_readers_0_readReq_get_65_BITS_71_TO_56_66__ETC___d967 &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d986 ;
  assign MUX_lMMU_mmu_addr_1_request_put_1__SEL_1 =
	     WILL_FIRE_RL_handle_addrTrans_request &&
	     lMemServerRequestInput_pipes_addrTrans_PipeOut_first[63:48] ==
	     16'd0 ;
  assign MUX_lMMU_mmu_addr_1_request_put_1__SEL_2 =
	     WILL_FIRE_RL_lMemServer_1_0_mw_request &&
	     top_writers_0_writeReq_get[87:72] == 16'd0 &&
	     top_writers_0_writeReq_get_036_BITS_71_TO_56_0_ETC___d1038 &&
	     SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1057 ;
  assign MUX_lMMU_mmu_addr_1_request_put_1__SEL_3 =
	     WILL_FIRE_RL_lMemServer_1_1_mw_request &&
	     top_writers_1_writeReq_get[87:72] == 16'd0 &&
	     top_writers_1_writeReq_get_076_BITS_71_TO_56_0_ETC___d1078 &&
	     SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1088 ;
  assign MUX_lMemServerIndicationOutput_ifc_error_1__SEL_2 =
	     CAN_FIRE_RL_lMemServer_writer_writers_0_dmaError &&
	     !WILL_FIRE_RL_lMemServer_reader_readers_0_dmaError ;
  assign MUX_lMemServerIndicationOutputNoc_bpState_write_1__SEL_1 =
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendMessage &&
	     lMemServerIndicationOutputNoc_messageWordsReg == 16'd1 ;
  assign MUX_lMemServerRequestInputNoc_bpState_write_1__SEL_1 =
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessageHeader &&
	     _theResult____h91163 != 8'd0 ;
  assign MUX_lMemServer_reader_dbgFSM_start_reg_write_1__SEL_1 =
	     WILL_FIRE_RL_handle_stateDbg_request &&
	     !lMemServerRequestInput_pipes_stateDbg_PipeOut_first ;
  assign MUX_lMemServer_reader_dbgFSM_state_mkFSMstate_write_1__SEL_1 =
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_idle_l157c7_1 ||
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_idle_l157c7 ;
  assign MUX_lMemServer_reader_readers_0_clientData_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d401 ;
  assign MUX_lMemServer_reader_readers_0_clientData_memory_b_put_1__SEL_2 =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_burst_remainder &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d427 ;
  assign MUX_lMemServer_reader_readers_0_dmaErrorFifo_enq_1__SEL_1 =
	     WILL_FIRE_RL_lMemServer_0_mr_request &&
	     (!top_readers_0_readReq_get_65_BITS_71_TO_56_66__ETC___d967 ||
	      top_readers_0_readReq_get[87:72] != 16'd0) ;
  assign MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__SEL_1 =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_tag_gen_complete_rule1 &&
	     !lMemServer_reader_readers_0_tag_gen_tags_port1_ETC___d277 ;
  assign MUX_lMemServer_reader_trafficFSM_start_reg_write_1__SEL_1 =
	     WILL_FIRE_RL_handle_memoryTraffic_request &&
	     !lMemServerRequestInput_pipes_memoryTraffic_PipeOut_first ;
  assign MUX_lMemServer_writer_dbgFSM_start_reg_write_1__SEL_1 =
	     WILL_FIRE_RL_handle_stateDbg_request &&
	     lMemServerRequestInput_pipes_stateDbg_PipeOut_first ;
  assign MUX_lMemServer_writer_dbgFSM_state_mkFSMstate_write_1__SEL_1 =
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_idle_l241c7_1 ||
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_idle_l241c7 ;
  assign MUX_lMemServer_writer_trafficFSM_start_reg_write_1__SEL_1 =
	     WILL_FIRE_RL_handle_memoryTraffic_request &&
	     lMemServerRequestInput_pipes_memoryTraffic_PipeOut_first ;
  assign MUX_lMemServer_writer_writers_0_dmaErrorFifo_enq_1__SEL_1 =
	     WILL_FIRE_RL_lMemServer_1_0_mw_request &&
	     (!top_writers_0_writeReq_get_036_BITS_71_TO_56_0_ETC___d1038 ||
	      top_writers_0_writeReq_get[87:72] != 16'd0) ;
  assign MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__SEL_1 =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_tag_gen_complete_rule1 &&
	     !lMemServer_writer_writers_0_tag_gen_tags_port1_ETC___d689 ;
  assign MUX_lMMUIndicationOutputNoc_fifoMsgSource_enq_1__VAL_1 =
	     { methodNumber__h88764, x__h88873 } ;
  always@(lMMUIndicationOutputNoc_methodIdReg or
	  lMMUIndicationOutput_portalIfc_indications_0_first or
	  lMMUIndicationOutput_portalIfc_indications_1_first or
	  lMMUIndicationOutput_portalIfc_indications_2_first)
  begin
    case (lMMUIndicationOutputNoc_methodIdReg)
      8'd0:
	  MUX_lMMUIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2 =
	      lMMUIndicationOutput_portalIfc_indications_0_first;
      8'd1:
	  MUX_lMMUIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2 =
	      lMMUIndicationOutput_portalIfc_indications_1_first;
      8'd2:
	  MUX_lMMUIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2 =
	      lMMUIndicationOutput_portalIfc_indications_2_first;
      default: MUX_lMMUIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_lMMUIndicationOutputNoc_messageWordsReg_write_1__VAL_2 =
	     lMMUIndicationOutputNoc_messageWordsReg - 16'd1 ;
  assign MUX_lMMURequestInputNoc_messageWordsReg_write_1__VAL_2 =
	     lMMURequestInputNoc_messageWordsReg - 8'd1 ;
  assign MUX_lMMU_mmu_addr_1_request_put_1__VAL_1 =
	     { lMemServerRequestInput_pipes_addrTrans_PipeOut_first[36:32],
	       off__h87160 } ;
  assign MUX_lMemServerIndicationOutput_ifc_addrResponse_1__VAL_1 =
	     { 24'd0, lMMU_mmu_addr_0_response_get[39:0] } ;
  assign MUX_lMemServerIndicationOutput_ifc_addrResponse_1__VAL_2 =
	     { 24'd0, lMMU_mmu_addr_1_response_get[39:0] } ;
  assign MUX_lMemServerIndicationOutput_ifc_error_1__VAL_1 =
	     { 29'd0,
	       lMemServer_reader_readers_0_dmaErrorFifo_D_OUT[34:32] } ;
  assign MUX_lMemServerIndicationOutput_ifc_error_1__VAL_2 =
	     { 29'd0,
	       lMemServer_writer_writers_0_dmaErrorFifo_D_OUT[34:32] } ;
  assign MUX_lMemServerIndicationOutputNoc_fifoMsgSource_enq_1__VAL_1 =
	     { methodNumber__h90584, x__h90693 } ;
  always@(lMemServerIndicationOutputNoc_methodIdReg or
	  lMemServerIndicationOutput_portalIfc_indications_0_first or
	  lMemServerIndicationOutput_portalIfc_indications_1_first or
	  lMemServerIndicationOutput_portalIfc_indications_2_first or
	  lMemServerIndicationOutput_portalIfc_indications_3_first)
  begin
    case (lMemServerIndicationOutputNoc_methodIdReg)
      8'd0:
	  MUX_lMemServerIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2 =
	      lMemServerIndicationOutput_portalIfc_indications_0_first;
      8'd1:
	  MUX_lMemServerIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2 =
	      lMemServerIndicationOutput_portalIfc_indications_1_first;
      8'd2:
	  MUX_lMemServerIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2 =
	      lMemServerIndicationOutput_portalIfc_indications_2_first;
      8'd3:
	  MUX_lMemServerIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2 =
	      lMemServerIndicationOutput_portalIfc_indications_3_first;
      default: MUX_lMemServerIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_lMemServerIndicationOutputNoc_messageWordsReg_write_1__VAL_2 =
	     lMemServerIndicationOutputNoc_messageWordsReg - 16'd1 ;
  assign MUX_lMemServerRequestInputNoc_messageWordsReg_write_1__VAL_2 =
	     lMemServerRequestInputNoc_messageWordsReg - 8'd1 ;
  assign MUX_lMemServer_reader_dbgPtr_write_1__VAL_1 =
	     lMemServer_reader_dbgPtr + 8'd1 ;
  assign MUX_lMemServer_reader_readers_0_clientBurstLen_upd_2__VAL_1 =
	     { lMemServer_reader_readers_0_clientBurstLen_D_OUT_1[9:0] ==
	       10'd2,
	       x__h13625 } ;
  assign MUX_lMemServer_reader_readers_0_clientBurstLen_upd_2__VAL_2 =
	     { lMemServer_reader_readers_0_clientRequest_D_OUT[16:11] == 6'd1,
	       x__h12884 } ;
  assign MUX_lMemServer_reader_readers_0_clientData_memory_b_put_2__VAL_1 =
	     { lMemServer_reader_readers_0_serverTag_D_OUT,
	       IF_lMemServer_reader_readers_0_serverProcessin_ETC__q1[9:4] } ;
  assign MUX_lMemServer_reader_readers_0_clientData_memory_b_put_2__VAL_2 =
	     { lMemServer_reader_readers_0_compTagReg,
	       lMemServer_reader_readers_0_compCountReg[5:0] } ;
  assign MUX_lMemServer_reader_readers_0_clientRequest_enq_1__VAL_1 =
	     { top_readers_0_readReq_get, 1'd0 } ;
  assign MUX_lMemServer_reader_readers_0_clientRequest_enq_1__VAL_2 =
	     { top_readers_1_readReq_get, 1'd1 } ;
  assign MUX_lMemServer_reader_readers_0_clientSelect_enq_1__VAL_1 =
	     { 1'd0, client__h14064 } ;
  assign MUX_lMemServer_reader_readers_0_clientSelect_enq_1__VAL_2 =
	     { 1'd0, lMemServer_reader_readers_0_compClientReg } ;
  assign MUX_lMemServer_reader_readers_0_compCountReg_write_1__VAL_1 =
	     cnt__h14065 - 10'd1 ;
  assign MUX_lMemServer_reader_readers_0_compCountReg_write_1__VAL_2 =
	     lMemServer_reader_readers_0_compCountReg - 10'd1 ;
  assign MUX_lMemServer_reader_readers_0_dmaErrorFifo_enq_1__VAL_1 =
	     { (top_readers_0_readReq_get[87:72] == 16'd0) ? 3'd1 : 3'd3,
	       top_readers_0_readReq_get[87:56] } ;
  assign MUX_lMemServer_reader_readers_0_dmaErrorFifo_enq_1__VAL_2 =
	     { (top_readers_1_readReq_get[87:72] == 16'd0) ? 3'd1 : 3'd3,
	       top_readers_1_readReq_get[87:56] } ;
  assign MUX_lMemServer_reader_readers_0_serverProcessing_memory_b_put_3__VAL_2 =
	     { lMemServer_reader_readers_0_serverRequest_D_OUT[52:47],
	       lMemServer_reader_readers_0_serverRequest_D_OUT[62:53],
	       lMemServer_reader_readers_0_serverRequest_D_OUT[6:0],
	       lMemServer_reader_readers_0_serverRequest_D_OUT[62:53] ==
	       10'd16 } ;
  assign MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__VAL_1 =
	     { 1'd0, lMemServer_reader_readers_0_tag_gen_comp_state[31:1] } ;
  assign MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__VAL_2 =
	     { lMemServer_reader_readers_0_tag_gen_comp_state[30:0], 1'd1 } ;
  assign MUX_lMemServer_reader_trafficAccum_write_1__VAL_1 =
	     lMemServer_reader_trafficAccum + v__h43658 ;
  assign MUX_lMemServer_reader_trafficPtr_write_1__VAL_1 =
	     lMemServer_reader_trafficPtr + 8'd1 ;
  assign MUX_lMemServer_writer_dbgPtr_write_1__VAL_1 =
	     lMemServer_writer_dbgPtr + 8'd1 ;
  assign MUX_lMemServer_writer_trafficAccum_write_1__VAL_1 =
	     lMemServer_writer_trafficAccum + v__h81861 ;
  assign MUX_lMemServer_writer_trafficPtr_write_1__VAL_1 =
	     lMemServer_writer_trafficPtr + 8'd1 ;
  assign MUX_lMemServer_writer_writers_0_clientRequest_enq_1__VAL_1 =
	     { top_writers_0_writeReq_get, 1'd0 } ;
  assign MUX_lMemServer_writer_writers_0_clientRequest_enq_1__VAL_2 =
	     { top_writers_1_writeReq_get, 1'd1 } ;
  assign MUX_lMemServer_writer_writers_0_dmaErrorFifo_enq_1__VAL_1 =
	     { (top_writers_0_writeReq_get[87:72] == 16'd0) ? 3'd2 : 3'd4,
	       top_writers_0_writeReq_get[87:56] } ;
  assign MUX_lMemServer_writer_writers_0_dmaErrorFifo_enq_1__VAL_2 =
	     { (top_writers_1_writeReq_get[87:72] == 16'd0) ? 3'd2 : 3'd4,
	       top_writers_1_writeReq_get[87:56] } ;
  assign MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__VAL_1 =
	     { 1'd0, lMemServer_writer_writers_0_tag_gen_comp_state[31:1] } ;
  assign MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__VAL_2 =
	     { lMemServer_writer_writers_0_tag_gen_comp_state[30:0], 1'd1 } ;

  // inlined wires
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_enqw_whas =
	     (!lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1[0] ||
	      lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_FULL_N) &&
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1[1] &&
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1[0] ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_enqw_whas =
	     (!lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1[0] ||
	      lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_FULL_N) &&
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1[1] &&
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1[0] ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt_1_whas =
	     (WILL_FIRE_RL_lMemServer_reader_readers_0_tag_completed ||
	      WILL_FIRE_RL_mkConnectionGetPut) &&
	     (!lMemServer_reader_readers_0_serverProcessing_serverAdapterB_writeWithResp_wget[1] ||
	      lMemServer_reader_readers_0_serverProcessing_serverAdapterB_writeWithResp_wget[0]) ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_writeWithResp_wget =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_tag_completed ?
	       2'd0 :
	       2'd2 ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_writeWithResp_whas =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_tag_completed ||
	     WILL_FIRE_RL_mkConnectionGetPut ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1_1_wget =
	     { 1'd1,
	       !lMemServer_reader_readers_0_serverProcessing_serverAdapterB_writeWithResp_wget[1] ||
	       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_writeWithResp_wget[0] } ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_outData_enqw_whas =
	     (!lMemServer_reader_readers_0_clientData_serverAdapterA_s1[0] ||
	      lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_FULL_N) &&
	     lMemServer_reader_readers_0_clientData_serverAdapterA_s1[1] &&
	     lMemServer_reader_readers_0_clientData_serverAdapterA_s1[0] ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_outData_enqw_whas =
	     (!lMemServer_reader_readers_0_clientData_serverAdapterB_s1[0] ||
	      lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_FULL_N) &&
	     lMemServer_reader_readers_0_clientData_serverAdapterB_s1[1] &&
	     lMemServer_reader_readers_0_clientData_serverAdapterB_s1[0] ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_cnt_1_whas =
	     MUX_lMemServer_reader_readers_0_clientData_memory_b_put_1__SEL_1 ||
	     MUX_lMemServer_reader_readers_0_clientData_memory_b_put_1__SEL_2 ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_s1_1_wget =
	     2'd3 ;
  assign lMemServer_reader_readers_0_tag_gen_counter_dec_wire_whas =
	     lMemServer_reader_readers_0_tag_gen_tagFifo_FULL_N &&
	     lMemServer_reader_readers_0_tag_gen_inited &&
	     lMemServer_reader_readers_0_tag_gen_counter_positive_reg ;
  assign lMemServer_reader_dbgFSM_start_wire_whas =
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_fsm_start ||
	     lMemServer_reader_dbgFSM_start_reg_1 &&
	     !lMemServer_reader_dbgFSM_state_fired ;
  assign lMemServer_reader_trafficFSM_start_wire_whas =
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_fsm_start ||
	     lMemServer_reader_trafficFSM_start_reg_1 &&
	     !lMemServer_reader_trafficFSM_state_fired ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_enqw_whas =
	     (!lMemServer_writer_writers_0_respFifos_serverAdapterA_s1[0] ||
	      lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_FULL_N) &&
	     lMemServer_writer_writers_0_respFifos_serverAdapterA_s1[1] &&
	     lMemServer_writer_writers_0_respFifos_serverAdapterA_s1[0] ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_writeWithResp_whas =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_memdata &&
	     lMemServer_writer_writers_0_firstReg ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_enqw_whas =
	     (!lMemServer_writer_writers_0_respFifos_serverAdapterB_s1[0] ||
	      lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_FULL_N) &&
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_s1[1] &&
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_s1[0] ;
  assign lMemServer_writer_writers_0_tag_gen_counter_dec_wire_whas =
	     lMemServer_writer_writers_0_tag_gen_tagFifo_FULL_N &&
	     lMemServer_writer_writers_0_tag_gen_inited &&
	     lMemServer_writer_writers_0_tag_gen_counter_positive_reg ;
  assign lMemServer_writer_dbgFSM_start_wire_whas =
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_fsm_start ||
	     lMemServer_writer_dbgFSM_start_reg_1 &&
	     !lMemServer_writer_dbgFSM_state_fired ;
  assign lMemServer_writer_trafficFSM_start_wire_whas =
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_fsm_start ||
	     lMemServer_writer_trafficFSM_start_reg_1 &&
	     !lMemServer_writer_trafficFSM_state_fired ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_outData_dequeueing_whas =
	     WILL_FIRE_RL_lMemServer_1_mr_response ||
	     WILL_FIRE_RL_lMemServer_0_mr_response ;
  assign lMemServer_reader_dbgFSM_state_set_pw_whas =
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_idle_l157c7_1 ||
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_idle_l157c7 ||
	     lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd2 ||
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_l158c10 ||
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_f_init_l157c7 ;
  assign lMemServer_reader_trafficFSM_state_set_pw_whas =
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_idle_l166c4 ||
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17 ||
	     lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd3 ||
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l169c10 ||
	     lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l167c20 ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_dequeueing_whas =
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq_Q_OUT &&
	     (lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_EMPTY_N ||
	      lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_enqw_whas) &&
	     lMemServer_writer_writers_0_clientResponse_FULL_N ;
  assign lMemServer_writer_dbgFSM_state_set_pw_whas =
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_idle_l241c7_1 ||
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_idle_l241c7 ||
	     lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd2 ||
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_l242c10 ||
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_f_init_l241c7 ;
  assign lMemServer_writer_trafficFSM_state_set_pw_whas =
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_idle_l250c4 ||
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l257c17 ||
	     lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd3 ||
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l253c10 ||
	     lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l251c20 ;
  assign lMemServer_reader_readers_0_tag_gen_tags_port0__write_1 =
	     lMemServer_reader_readers_0_tag_gen_tags & y__h11144 ;
  assign lMemServer_reader_readers_0_tag_gen_tags_EN_port1__write =
	     lMemServer_reader_readers_0_tag_gen_tagFifo_FULL_N &&
	     lMemServer_reader_readers_0_tag_gen_inited &&
	     lMemServer_reader_readers_0_tag_gen_counter_positive_reg ;
  assign lMemServer_reader_readers_0_tag_gen_tags_port1__write_1 =
	     t__h11265 | x__h11292 ;
  assign lMemServer_reader_readers_0_tag_gen_tags_port2__read =
	     lMemServer_reader_readers_0_tag_gen_tags_EN_port1__write ?
	       lMemServer_reader_readers_0_tag_gen_tags_port1__write_1 :
	       t__h11265 ;
  assign lMemServer_writer_writers_0_tag_gen_tags_port0__write_1 =
	     lMemServer_writer_writers_0_tag_gen_tags & y__h50214 ;
  assign lMemServer_writer_writers_0_tag_gen_tags_EN_port1__write =
	     lMemServer_writer_writers_0_tag_gen_tagFifo_FULL_N &&
	     lMemServer_writer_writers_0_tag_gen_inited &&
	     lMemServer_writer_writers_0_tag_gen_counter_positive_reg ;
  assign lMemServer_writer_writers_0_tag_gen_tags_port1__write_1 =
	     t__h50335 | x__h50362 ;
  assign lMemServer_writer_writers_0_tag_gen_tags_port2__read =
	     lMemServer_writer_writers_0_tag_gen_tags_EN_port1__write ?
	       lMemServer_writer_writers_0_tag_gen_tags_port1__write_1 :
	       t__h50335 ;

  // register dumpstarted
  assign dumpstarted_D_IN = 1'd1 ;
  assign dumpstarted_EN = !dumpstarted ;

  // register lMMUIndicationOutputNoc_bpState
  assign lMMUIndicationOutputNoc_bpState_D_IN =
	     !MUX_lMMUIndicationOutputNoc_bpState_write_1__SEL_1 ;
  assign lMMUIndicationOutputNoc_bpState_EN =
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendMessage &&
	     lMMUIndicationOutputNoc_messageWordsReg == 16'd1 ||
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendHeader ;

  // register lMMUIndicationOutputNoc_messageWordsReg
  assign lMMUIndicationOutputNoc_messageWordsReg_D_IN =
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendHeader ?
	       numWords__h88720 :
	       MUX_lMMUIndicationOutputNoc_messageWordsReg_write_1__VAL_2 ;
  assign lMMUIndicationOutputNoc_messageWordsReg_EN =
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendHeader ||
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendMessage ;

  // register lMMUIndicationOutputNoc_methodIdReg
  assign lMMUIndicationOutputNoc_methodIdReg_D_IN = readyChannel__h88347 ;
  assign lMMUIndicationOutputNoc_methodIdReg_EN =
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendHeader ;

  // register lMMURequestInputNoc_bpState
  assign lMMURequestInputNoc_bpState_D_IN =
	     MUX_lMMURequestInputNoc_bpState_write_1__SEL_1 ;
  assign lMMURequestInputNoc_bpState_EN =
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessageHeader &&
	     _theResult____h89323 != 8'd0 ||
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessage &&
	     lMMURequestInputNoc_messageWordsReg == 8'd1 ;

  // register lMMURequestInputNoc_messageWordsReg
  assign lMMURequestInputNoc_messageWordsReg_D_IN =
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessageHeader ?
	       _theResult____h89323 :
	       MUX_lMMURequestInputNoc_messageWordsReg_write_1__VAL_2 ;
  assign lMMURequestInputNoc_messageWordsReg_EN =
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessageHeader ||
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessage ;

  // register lMMURequestInputNoc_methodIdReg
  assign lMMURequestInputNoc_methodIdReg_D_IN =
	     lMMURequestInputNoc_fifoMsgSink_D_OUT[23:16] ;
  assign lMMURequestInputNoc_methodIdReg_EN =
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessageHeader ;

  // register lMemServerIndicationOutputNoc_bpState
  assign lMemServerIndicationOutputNoc_bpState_D_IN =
	     !MUX_lMemServerIndicationOutputNoc_bpState_write_1__SEL_1 ;
  assign lMemServerIndicationOutputNoc_bpState_EN =
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendMessage &&
	     lMemServerIndicationOutputNoc_messageWordsReg == 16'd1 ||
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendHeader ;

  // register lMemServerIndicationOutputNoc_messageWordsReg
  assign lMemServerIndicationOutputNoc_messageWordsReg_D_IN =
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendHeader ?
	       numWords__h90540 :
	       MUX_lMemServerIndicationOutputNoc_messageWordsReg_write_1__VAL_2 ;
  assign lMemServerIndicationOutputNoc_messageWordsReg_EN =
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendHeader ||
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendMessage ;

  // register lMemServerIndicationOutputNoc_methodIdReg
  assign lMemServerIndicationOutputNoc_methodIdReg_D_IN =
	     readyChannel__h90073 ;
  assign lMemServerIndicationOutputNoc_methodIdReg_EN =
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendHeader ;

  // register lMemServerRequestInputNoc_bpState
  assign lMemServerRequestInputNoc_bpState_D_IN =
	     MUX_lMemServerRequestInputNoc_bpState_write_1__SEL_1 ;
  assign lMemServerRequestInputNoc_bpState_EN =
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessageHeader &&
	     _theResult____h91163 != 8'd0 ||
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessage &&
	     lMemServerRequestInputNoc_messageWordsReg == 8'd1 ;

  // register lMemServerRequestInputNoc_messageWordsReg
  assign lMemServerRequestInputNoc_messageWordsReg_D_IN =
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessageHeader ?
	       _theResult____h91163 :
	       MUX_lMemServerRequestInputNoc_messageWordsReg_write_1__VAL_2 ;
  assign lMemServerRequestInputNoc_messageWordsReg_EN =
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessageHeader ||
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessage ;

  // register lMemServerRequestInputNoc_methodIdReg
  assign lMemServerRequestInputNoc_methodIdReg_D_IN =
	     lMemServerRequestInputNoc_fifoMsgSink_D_OUT[23:16] ;
  assign lMemServerRequestInputNoc_methodIdReg_EN =
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessageHeader ;

  // register lMemServer_reader_dbgFSM_start_reg
  assign lMemServer_reader_dbgFSM_start_reg_D_IN =
	     MUX_lMemServer_reader_dbgFSM_start_reg_write_1__SEL_1 ;
  assign lMemServer_reader_dbgFSM_start_reg_EN =
	     WILL_FIRE_RL_handle_stateDbg_request &&
	     !lMemServerRequestInput_pipes_stateDbg_PipeOut_first ||
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_fsm_start ;

  // register lMemServer_reader_dbgFSM_start_reg_1
  assign lMemServer_reader_dbgFSM_start_reg_1_D_IN =
	     lMemServer_reader_dbgFSM_start_wire_whas ;
  assign lMemServer_reader_dbgFSM_start_reg_1_EN = 1'd1 ;

  // register lMemServer_reader_dbgFSM_state_can_overlap
  assign lMemServer_reader_dbgFSM_state_can_overlap_D_IN =
	     lMemServer_reader_dbgFSM_state_set_pw_whas ||
	     lMemServer_reader_dbgFSM_state_can_overlap ;
  assign lMemServer_reader_dbgFSM_state_can_overlap_EN = 1'd1 ;

  // register lMemServer_reader_dbgFSM_state_fired
  assign lMemServer_reader_dbgFSM_state_fired_D_IN =
	     lMemServer_reader_dbgFSM_state_set_pw_whas ;
  assign lMemServer_reader_dbgFSM_state_fired_EN = 1'd1 ;

  // register lMemServer_reader_dbgFSM_state_mkFSMstate
  always@(MUX_lMemServer_reader_dbgFSM_state_mkFSMstate_write_1__SEL_1 or
	  WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_f_init_l157c7 or
	  WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_l158c10 or
	  lMemServer_reader_dbgFSM_state_mkFSMstate)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lMemServer_reader_dbgFSM_state_mkFSMstate_write_1__SEL_1:
	  lMemServer_reader_dbgFSM_state_mkFSMstate_D_IN = 3'd0;
      WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_f_init_l157c7:
	  lMemServer_reader_dbgFSM_state_mkFSMstate_D_IN = 3'd1;
      WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_l158c10:
	  lMemServer_reader_dbgFSM_state_mkFSMstate_D_IN = 3'd2;
      lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd2:
	  lMemServer_reader_dbgFSM_state_mkFSMstate_D_IN = 3'd3;
      default: lMemServer_reader_dbgFSM_state_mkFSMstate_D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign lMemServer_reader_dbgFSM_state_mkFSMstate_EN =
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_idle_l157c7_1 ||
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_idle_l157c7 ||
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_f_init_l157c7 ||
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_l158c10 ||
	     lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd2 ;

  // register lMemServer_reader_dbgPtr
  assign lMemServer_reader_dbgPtr_D_IN =
	     (lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd2) ?
	       MUX_lMemServer_reader_dbgPtr_write_1__VAL_1 :
	       8'd0 ;
  assign lMemServer_reader_dbgPtr_EN =
	     lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd2 ||
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_f_init_l157c7 ;

  // register lMemServer_reader_readers_0_beatCount
  assign lMemServer_reader_readers_0_beatCount_D_IN =
	     lMemServer_reader_readers_0_beatCount + 32'd1 ;
  assign lMemServer_reader_readers_0_beatCount_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways ;

  // register lMemServer_reader_readers_0_burstReg
  assign lMemServer_reader_readers_0_burstReg_D_IN = 10'h0 ;
  assign lMemServer_reader_readers_0_burstReg_EN = 1'b0 ;

  // register lMemServer_reader_readers_0_clientData_serverAdapterA_cnt
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_cnt_D_IN =
	     lMemServer_reader_readers_0_clientData_serverAdapterA_cnt +
	     3'd0 +
	     3'd0 ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_cnt_EN = 1'b0 ;

  // register lMemServer_reader_readers_0_clientData_serverAdapterA_s1
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_s1_D_IN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ?
	       2'd2 :
	       2'd0 ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_s1_EN = 1'd1 ;

  // register lMemServer_reader_readers_0_clientData_serverAdapterB_cnt
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_cnt_D_IN =
	     lMemServer_reader_readers_0_clientData_serverA_ETC___d236 ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_cnt_EN =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_cnt_1_whas ||
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_dequeueing_whas ;

  // register lMemServer_reader_readers_0_clientData_serverAdapterB_s1
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_s1_D_IN =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_cnt_1_whas ?
	       lMemServer_reader_readers_0_clientData_serverAdapterB_s1_1_wget :
	       2'd0 ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_s1_EN = 1'd1 ;

  // register lMemServer_reader_readers_0_compClientReg
  assign lMemServer_reader_readers_0_compClientReg_D_IN = client__h14064 ;
  assign lMemServer_reader_readers_0_compClientReg_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a ;

  // register lMemServer_reader_readers_0_compCountReg
  assign lMemServer_reader_readers_0_compCountReg_D_IN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a ?
	       MUX_lMemServer_reader_readers_0_compCountReg_write_1__VAL_1 :
	       MUX_lMemServer_reader_readers_0_compCountReg_write_1__VAL_2 ;
  assign lMemServer_reader_readers_0_compCountReg_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a ||
	     WILL_FIRE_RL_lMemServer_reader_readers_0_burst_remainder ;

  // register lMemServer_reader_readers_0_compTagReg
  assign lMemServer_reader_readers_0_compTagReg_D_IN =
	     lMemServer_reader_readers_0_serverTag_D_OUT ;
  assign lMemServer_reader_readers_0_compTagReg_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a ;

  // register lMemServer_reader_readers_0_compTileReg
  assign lMemServer_reader_readers_0_compTileReg_D_IN =
	     IF_lMemServer_reader_readers_0_serverProcessin_ETC__q2[5:4] ;
  assign lMemServer_reader_readers_0_compTileReg_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a ;

  // register lMemServer_reader_readers_0_cycle_cnt
  assign lMemServer_reader_readers_0_cycle_cnt_D_IN =
	     lMemServer_reader_readers_0_cycle_cnt + 64'd1 ;
  assign lMemServer_reader_readers_0_cycle_cnt_EN = 1'd1 ;

  // register lMemServer_reader_readers_0_firstReg
  assign lMemServer_reader_readers_0_firstReg_D_IN =
	     lMemServer_reader_readers_0_serverData_D_OUT[0] ;
  assign lMemServer_reader_readers_0_firstReg_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ;

  // register lMemServer_reader_readers_0_killv_0
  assign lMemServer_reader_readers_0_killv_0_D_IN =
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[1:0] !=
	     2'd2 &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[1:0] !=
	     2'd1 ;
  assign lMemServer_reader_readers_0_killv_0_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd0 ;

  // register lMemServer_reader_readers_0_killv_1
  assign lMemServer_reader_readers_0_killv_1_D_IN =
	     lMemServer_reader_readers_0_killv_0_D_IN ;
  assign lMemServer_reader_readers_0_killv_1_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd1 ;

  // register lMemServer_reader_readers_0_killv_2
  assign lMemServer_reader_readers_0_killv_2_D_IN =
	     lMemServer_reader_readers_0_killv_0_D_IN ;
  assign lMemServer_reader_readers_0_killv_2_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd2 ;

  // register lMemServer_reader_readers_0_killv_3
  assign lMemServer_reader_readers_0_killv_3_D_IN =
	     lMemServer_reader_readers_0_killv_0_D_IN ;
  assign lMemServer_reader_readers_0_killv_3_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd3 ;

  // register lMemServer_reader_readers_0_last_comp
  assign lMemServer_reader_readers_0_last_comp_D_IN =
	     lMemServer_reader_readers_0_cycle_cnt ;
  assign lMemServer_reader_readers_0_last_comp_EN =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_dequeueing_whas ;

  // register lMemServer_reader_readers_0_last_loadClient
  assign lMemServer_reader_readers_0_last_loadClient_D_IN =
	     lMemServer_reader_readers_0_cycle_cnt ;
  assign lMemServer_reader_readers_0_last_loadClient_EN =
	     WILL_FIRE_RL_lMemServer_1_mr_request ||
	     WILL_FIRE_RL_lMemServer_0_mr_request ;

  // register lMemServer_reader_readers_0_last_mmuResp
  assign lMemServer_reader_readers_0_last_mmuResp_D_IN =
	     lMemServer_reader_readers_0_cycle_cnt ;
  assign lMemServer_reader_readers_0_last_mmuResp_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp ;

  // register lMemServer_reader_readers_0_last_readData
  assign lMemServer_reader_readers_0_last_readData_D_IN =
	     lMemServer_reader_readers_0_cycle_cnt ;
  assign lMemServer_reader_readers_0_last_readData_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ;

  // register lMemServer_reader_readers_0_last_readReq
  assign lMemServer_reader_readers_0_last_readReq_D_IN =
	     lMemServer_reader_readers_0_cycle_cnt ;
  assign lMemServer_reader_readers_0_last_readReq_EN =
	     WILL_FIRE_RL_mkConnectionGetPut ;

  // register lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt_D_IN =
	     lMemServer_reader_readers_0_serverProcessing_s_ETC___d91 ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways ||
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ;

  // register lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1_D_IN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways ?
	       2'd3 :
	       2'd0 ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1_EN =
	     1'd1 ;

  // register lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt_D_IN =
	     lMemServer_reader_readers_0_serverProcessing_s_ETC___d140 ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt_EN =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a ;

  // register lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1_D_IN =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_writeWithResp_whas ?
	       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1_1_wget :
	       2'd0 ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1_EN =
	     1'd1 ;

  // register lMemServer_reader_readers_0_stopv_0
  assign lMemServer_reader_readers_0_stopv_0_D_IN =
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[1:0] !=
	     2'd2 ;
  assign lMemServer_reader_readers_0_stopv_0_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd0 ;

  // register lMemServer_reader_readers_0_stopv_1
  assign lMemServer_reader_readers_0_stopv_1_D_IN =
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[1:0] !=
	     2'd2 ;
  assign lMemServer_reader_readers_0_stopv_1_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd1 ;

  // register lMemServer_reader_readers_0_stopv_2
  assign lMemServer_reader_readers_0_stopv_2_D_IN =
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[1:0] !=
	     2'd2 ;
  assign lMemServer_reader_readers_0_stopv_2_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd2 ;

  // register lMemServer_reader_readers_0_stopv_3
  assign lMemServer_reader_readers_0_stopv_3_D_IN =
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[1:0] !=
	     2'd2 ;
  assign lMemServer_reader_readers_0_stopv_3_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd3 ;

  // register lMemServer_reader_readers_0_tag_gen_comp_state
  assign lMemServer_reader_readers_0_tag_gen_comp_state_D_IN =
	     MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__SEL_1 ?
	       MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__VAL_1 :
	       MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__VAL_2 ;
  assign lMemServer_reader_readers_0_tag_gen_comp_state_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_tag_gen_complete_rule1 &&
	     !lMemServer_reader_readers_0_tag_gen_tags_port1_ETC___d277 ||
	     lMemServer_reader_readers_0_tag_gen_retFifo_EMPTY_N ;

  // register lMemServer_reader_readers_0_tag_gen_counter_cnt
  assign lMemServer_reader_readers_0_tag_gen_counter_cnt_D_IN =
	     lMemServer_reader_readers_0_tag_gen_counter_cn_ETC___d272 ;
  assign lMemServer_reader_readers_0_tag_gen_counter_cnt_EN = 1'd1 ;

  // register lMemServer_reader_readers_0_tag_gen_counter_positive_reg
  assign lMemServer_reader_readers_0_tag_gen_counter_positive_reg_D_IN =
	     lMemServer_reader_readers_0_tag_gen_counter_cn_ETC___d272 !=
	     6'd0 ;
  assign lMemServer_reader_readers_0_tag_gen_counter_positive_reg_EN = 1'd1 ;

  // register lMemServer_reader_readers_0_tag_gen_head_ptr
  assign lMemServer_reader_readers_0_tag_gen_head_ptr_D_IN =
	     lMemServer_reader_readers_0_tag_gen_head_ptr + 5'd1 ;
  assign lMemServer_reader_readers_0_tag_gen_head_ptr_EN =
	     lMemServer_reader_readers_0_tag_gen_tagFifo_FULL_N &&
	     lMemServer_reader_readers_0_tag_gen_inited &&
	     lMemServer_reader_readers_0_tag_gen_counter_positive_reg ||
	     !lMemServer_reader_readers_0_tag_gen_inited ;

  // register lMemServer_reader_readers_0_tag_gen_inited
  assign lMemServer_reader_readers_0_tag_gen_inited_D_IN =
	     lMemServer_reader_readers_0_tag_gen_head_ptr == 5'd31 ;
  assign lMemServer_reader_readers_0_tag_gen_inited_EN =
	     !lMemServer_reader_readers_0_tag_gen_inited ;

  // register lMemServer_reader_readers_0_tag_gen_tags
  assign lMemServer_reader_readers_0_tag_gen_tags_D_IN =
	     lMemServer_reader_readers_0_tag_gen_tags_port2__read ;
  assign lMemServer_reader_readers_0_tag_gen_tags_EN = 1'b1 ;

  // register lMemServer_reader_readers_0_tag_gen_tail_ptr
  assign lMemServer_reader_readers_0_tag_gen_tail_ptr_D_IN =
	     lMemServer_reader_readers_0_tag_gen_tail_ptr + 5'd1 ;
  assign lMemServer_reader_readers_0_tag_gen_tail_ptr_EN =
	     MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__SEL_1 ;

  // register lMemServer_reader_trafficAccum
  assign lMemServer_reader_trafficAccum_D_IN =
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l169c10 ?
	       MUX_lMemServer_reader_trafficAccum_write_1__VAL_1 :
	       64'd0 ;
  assign lMemServer_reader_trafficAccum_EN =
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l169c10 ||
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l167c20 ;

  // register lMemServer_reader_trafficFSM_start_reg
  assign lMemServer_reader_trafficFSM_start_reg_D_IN =
	     MUX_lMemServer_reader_trafficFSM_start_reg_write_1__SEL_1 ;
  assign lMemServer_reader_trafficFSM_start_reg_EN =
	     WILL_FIRE_RL_handle_memoryTraffic_request &&
	     !lMemServerRequestInput_pipes_memoryTraffic_PipeOut_first ||
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_fsm_start ;

  // register lMemServer_reader_trafficFSM_start_reg_1
  assign lMemServer_reader_trafficFSM_start_reg_1_D_IN =
	     lMemServer_reader_trafficFSM_start_wire_whas ;
  assign lMemServer_reader_trafficFSM_start_reg_1_EN = 1'd1 ;

  // register lMemServer_reader_trafficFSM_state_can_overlap
  assign lMemServer_reader_trafficFSM_state_can_overlap_D_IN =
	     lMemServer_reader_trafficFSM_state_set_pw_whas ||
	     lMemServer_reader_trafficFSM_state_can_overlap ;
  assign lMemServer_reader_trafficFSM_state_can_overlap_EN = 1'd1 ;

  // register lMemServer_reader_trafficFSM_state_fired
  assign lMemServer_reader_trafficFSM_state_fired_D_IN =
	     lMemServer_reader_trafficFSM_state_set_pw_whas ;
  assign lMemServer_reader_trafficFSM_state_fired_EN = 1'd1 ;

  // register lMemServer_reader_trafficFSM_state_mkFSMstate
  always@(WILL_FIRE_RL_lMemServer_reader_trafficFSM_idle_l166c4 or
	  WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l167c20 or
	  lMemServer_reader_trafficFSM_state_mkFSMstate or
	  WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l169c10 or
	  WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_lMemServer_reader_trafficFSM_idle_l166c4:
	  lMemServer_reader_trafficFSM_state_mkFSMstate_D_IN = 3'd0;
      WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l167c20:
	  lMemServer_reader_trafficFSM_state_mkFSMstate_D_IN = 3'd1;
      lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd1:
	  lMemServer_reader_trafficFSM_state_mkFSMstate_D_IN = 3'd2;
      WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l169c10:
	  lMemServer_reader_trafficFSM_state_mkFSMstate_D_IN = 3'd3;
      lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd3:
	  lMemServer_reader_trafficFSM_state_mkFSMstate_D_IN = 3'd4;
      WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17:
	  lMemServer_reader_trafficFSM_state_mkFSMstate_D_IN = 3'd5;
      default: lMemServer_reader_trafficFSM_state_mkFSMstate_D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign lMemServer_reader_trafficFSM_state_mkFSMstate_EN =
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_idle_l166c4 ||
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l167c20 ||
	     lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l169c10 ||
	     lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd3 ||
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17 ;

  // register lMemServer_reader_trafficPtr
  assign lMemServer_reader_trafficPtr_D_IN =
	     (lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd3) ?
	       MUX_lMemServer_reader_trafficPtr_write_1__VAL_1 :
	       8'd0 ;
  assign lMemServer_reader_trafficPtr_EN =
	     lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd3 ||
	     lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd1 ;

  // register lMemServer_writer_dbgFSM_start_reg
  assign lMemServer_writer_dbgFSM_start_reg_D_IN =
	     MUX_lMemServer_writer_dbgFSM_start_reg_write_1__SEL_1 ;
  assign lMemServer_writer_dbgFSM_start_reg_EN =
	     WILL_FIRE_RL_handle_stateDbg_request &&
	     lMemServerRequestInput_pipes_stateDbg_PipeOut_first ||
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_fsm_start ;

  // register lMemServer_writer_dbgFSM_start_reg_1
  assign lMemServer_writer_dbgFSM_start_reg_1_D_IN =
	     lMemServer_writer_dbgFSM_start_wire_whas ;
  assign lMemServer_writer_dbgFSM_start_reg_1_EN = 1'd1 ;

  // register lMemServer_writer_dbgFSM_state_can_overlap
  assign lMemServer_writer_dbgFSM_state_can_overlap_D_IN =
	     lMemServer_writer_dbgFSM_state_set_pw_whas ||
	     lMemServer_writer_dbgFSM_state_can_overlap ;
  assign lMemServer_writer_dbgFSM_state_can_overlap_EN = 1'd1 ;

  // register lMemServer_writer_dbgFSM_state_fired
  assign lMemServer_writer_dbgFSM_state_fired_D_IN =
	     lMemServer_writer_dbgFSM_state_set_pw_whas ;
  assign lMemServer_writer_dbgFSM_state_fired_EN = 1'd1 ;

  // register lMemServer_writer_dbgFSM_state_mkFSMstate
  always@(MUX_lMemServer_writer_dbgFSM_state_mkFSMstate_write_1__SEL_1 or
	  WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_f_init_l241c7 or
	  WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_l242c10 or
	  lMemServer_writer_dbgFSM_state_mkFSMstate)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lMemServer_writer_dbgFSM_state_mkFSMstate_write_1__SEL_1:
	  lMemServer_writer_dbgFSM_state_mkFSMstate_D_IN = 3'd0;
      WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_f_init_l241c7:
	  lMemServer_writer_dbgFSM_state_mkFSMstate_D_IN = 3'd1;
      WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_l242c10:
	  lMemServer_writer_dbgFSM_state_mkFSMstate_D_IN = 3'd2;
      lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd2:
	  lMemServer_writer_dbgFSM_state_mkFSMstate_D_IN = 3'd3;
      default: lMemServer_writer_dbgFSM_state_mkFSMstate_D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign lMemServer_writer_dbgFSM_state_mkFSMstate_EN =
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_idle_l241c7_1 ||
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_idle_l241c7 ||
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_f_init_l241c7 ||
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_l242c10 ||
	     lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd2 ;

  // register lMemServer_writer_dbgPtr
  assign lMemServer_writer_dbgPtr_D_IN =
	     (lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd2) ?
	       MUX_lMemServer_writer_dbgPtr_write_1__VAL_1 :
	       8'd0 ;
  assign lMemServer_writer_dbgPtr_EN =
	     lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd2 ||
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_f_init_l241c7 ;

  // register lMemServer_writer_trafficAccum
  assign lMemServer_writer_trafficAccum_D_IN =
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l253c10 ?
	       MUX_lMemServer_writer_trafficAccum_write_1__VAL_1 :
	       64'd0 ;
  assign lMemServer_writer_trafficAccum_EN =
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l253c10 ||
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l251c20 ;

  // register lMemServer_writer_trafficFSM_start_reg
  assign lMemServer_writer_trafficFSM_start_reg_D_IN =
	     MUX_lMemServer_writer_trafficFSM_start_reg_write_1__SEL_1 ;
  assign lMemServer_writer_trafficFSM_start_reg_EN =
	     WILL_FIRE_RL_handle_memoryTraffic_request &&
	     lMemServerRequestInput_pipes_memoryTraffic_PipeOut_first ||
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_fsm_start ;

  // register lMemServer_writer_trafficFSM_start_reg_1
  assign lMemServer_writer_trafficFSM_start_reg_1_D_IN =
	     lMemServer_writer_trafficFSM_start_wire_whas ;
  assign lMemServer_writer_trafficFSM_start_reg_1_EN = 1'd1 ;

  // register lMemServer_writer_trafficFSM_state_can_overlap
  assign lMemServer_writer_trafficFSM_state_can_overlap_D_IN =
	     lMemServer_writer_trafficFSM_state_set_pw_whas ||
	     lMemServer_writer_trafficFSM_state_can_overlap ;
  assign lMemServer_writer_trafficFSM_state_can_overlap_EN = 1'd1 ;

  // register lMemServer_writer_trafficFSM_state_fired
  assign lMemServer_writer_trafficFSM_state_fired_D_IN =
	     lMemServer_writer_trafficFSM_state_set_pw_whas ;
  assign lMemServer_writer_trafficFSM_state_fired_EN = 1'd1 ;

  // register lMemServer_writer_trafficFSM_state_mkFSMstate
  always@(WILL_FIRE_RL_lMemServer_writer_trafficFSM_idle_l250c4 or
	  WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l251c20 or
	  lMemServer_writer_trafficFSM_state_mkFSMstate or
	  WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l253c10 or
	  WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l257c17)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_lMemServer_writer_trafficFSM_idle_l250c4:
	  lMemServer_writer_trafficFSM_state_mkFSMstate_D_IN = 3'd0;
      WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l251c20:
	  lMemServer_writer_trafficFSM_state_mkFSMstate_D_IN = 3'd1;
      lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd1:
	  lMemServer_writer_trafficFSM_state_mkFSMstate_D_IN = 3'd2;
      WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l253c10:
	  lMemServer_writer_trafficFSM_state_mkFSMstate_D_IN = 3'd3;
      lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd3:
	  lMemServer_writer_trafficFSM_state_mkFSMstate_D_IN = 3'd4;
      WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l257c17:
	  lMemServer_writer_trafficFSM_state_mkFSMstate_D_IN = 3'd5;
      default: lMemServer_writer_trafficFSM_state_mkFSMstate_D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign lMemServer_writer_trafficFSM_state_mkFSMstate_EN =
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_idle_l250c4 ||
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l251c20 ||
	     lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l253c10 ||
	     lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd3 ||
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l257c17 ;

  // register lMemServer_writer_trafficPtr
  assign lMemServer_writer_trafficPtr_D_IN =
	     (lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd3) ?
	       MUX_lMemServer_writer_trafficPtr_write_1__VAL_1 :
	       8'd0 ;
  assign lMemServer_writer_trafficPtr_EN =
	     lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd3 ||
	     lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd1 ;

  // register lMemServer_writer_writers_0_beatCount
  assign lMemServer_writer_writers_0_beatCount_D_IN =
	     lMemServer_writer_writers_0_beatCount + 32'd1 ;
  assign lMemServer_writer_writers_0_beatCount_EN =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_memdata ;

  // register lMemServer_writer_writers_0_burstReg
  assign lMemServer_writer_writers_0_burstReg_D_IN =
	     burstLen__h52739 - 10'd1 ;
  assign lMemServer_writer_writers_0_burstReg_EN =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_memdata ;

  // register lMemServer_writer_writers_0_cycle_cnt
  assign lMemServer_writer_writers_0_cycle_cnt_D_IN =
	     lMemServer_writer_writers_0_cycle_cnt + 64'd1 ;
  assign lMemServer_writer_writers_0_cycle_cnt_EN = 1'd1 ;

  // register lMemServer_writer_writers_0_firstReg
  assign lMemServer_writer_writers_0_firstReg_D_IN =
	     burstLen__h52739 == 10'd1 ;
  assign lMemServer_writer_writers_0_firstReg_EN =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_memdata ;

  // register lMemServer_writer_writers_0_killv_0
  assign lMemServer_writer_writers_0_killv_0_D_IN =
	     lMemServer_reader_readers_0_killv_0_D_IN ;
  assign lMemServer_writer_writers_0_killv_0_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd0 ;

  // register lMemServer_writer_writers_0_killv_1
  assign lMemServer_writer_writers_0_killv_1_D_IN =
	     lMemServer_reader_readers_0_killv_0_D_IN ;
  assign lMemServer_writer_writers_0_killv_1_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd1 ;

  // register lMemServer_writer_writers_0_killv_2
  assign lMemServer_writer_writers_0_killv_2_D_IN =
	     lMemServer_reader_readers_0_killv_0_D_IN ;
  assign lMemServer_writer_writers_0_killv_2_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd2 ;

  // register lMemServer_writer_writers_0_killv_3
  assign lMemServer_writer_writers_0_killv_3_D_IN =
	     lMemServer_reader_readers_0_killv_0_D_IN ;
  assign lMemServer_writer_writers_0_killv_3_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd3 ;

  // register lMemServer_writer_writers_0_lastReg
  assign lMemServer_writer_writers_0_lastReg_D_IN =
	     burstLen__h52739 == 10'd2 ;
  assign lMemServer_writer_writers_0_lastReg_EN =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_memdata ;

  // register lMemServer_writer_writers_0_last_loadClient
  assign lMemServer_writer_writers_0_last_loadClient_D_IN =
	     lMemServer_writer_writers_0_cycle_cnt ;
  assign lMemServer_writer_writers_0_last_loadClient_EN =
	     WILL_FIRE_RL_lMemServer_1_1_mw_request ||
	     WILL_FIRE_RL_lMemServer_1_0_mw_request ;

  // register lMemServer_writer_writers_0_last_mmuResp
  assign lMemServer_writer_writers_0_last_mmuResp_D_IN =
	     lMemServer_writer_writers_0_cycle_cnt ;
  assign lMemServer_writer_writers_0_last_mmuResp_EN =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_checkMmuResp ;

  // register lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt_D_IN =
	     lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt + 3'd0 +
	     3'd0 ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt_EN = 1'b0 ;

  // register lMemServer_writer_writers_0_respFifos_serverAdapterA_s1
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_s1_D_IN =
	     lMemServer_writer_writers_0_respFifos_serverAdapterA_writeWithResp_whas ?
	       2'd2 :
	       2'd0 ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_s1_EN = 1'd1 ;

  // register lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt_D_IN =
	     lMemServer_writer_writers_0_respFifos_serverAd_ETC___d648 ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt_EN =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_respFifos_serverAdapterB_stageReadResponseAlways ||
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_dequeueing_whas ;

  // register lMemServer_writer_writers_0_respFifos_serverAdapterB_s1
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_s1_D_IN =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_respFifos_serverAdapterB_stageReadResponseAlways ?
	       2'd3 :
	       2'd0 ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_s1_EN = 1'd1 ;

  // register lMemServer_writer_writers_0_stopv_0
  assign lMemServer_writer_writers_0_stopv_0_D_IN =
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[1:0] !=
	     2'd2 ;
  assign lMemServer_writer_writers_0_stopv_0_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd0 ;

  // register lMemServer_writer_writers_0_stopv_1
  assign lMemServer_writer_writers_0_stopv_1_D_IN =
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[1:0] !=
	     2'd2 ;
  assign lMemServer_writer_writers_0_stopv_1_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd1 ;

  // register lMemServer_writer_writers_0_stopv_2
  assign lMemServer_writer_writers_0_stopv_2_D_IN =
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[1:0] !=
	     2'd2 ;
  assign lMemServer_writer_writers_0_stopv_2_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd2 ;

  // register lMemServer_writer_writers_0_stopv_3
  assign lMemServer_writer_writers_0_stopv_3_D_IN =
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[1:0] !=
	     2'd2 ;
  assign lMemServer_writer_writers_0_stopv_3_EN =
	     WILL_FIRE_RL_handle_setTileState_request &&
	     lMemServerRequestInput_pipes_setTileState_PipeOut_first[3:2] ==
	     2'd3 ;

  // register lMemServer_writer_writers_0_tag_gen_comp_state
  assign lMemServer_writer_writers_0_tag_gen_comp_state_D_IN =
	     MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__SEL_1 ?
	       MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__VAL_1 :
	       MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__VAL_2 ;
  assign lMemServer_writer_writers_0_tag_gen_comp_state_EN =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_tag_gen_complete_rule1 &&
	     !lMemServer_writer_writers_0_tag_gen_tags_port1_ETC___d689 ||
	     lMemServer_writer_writers_0_tag_gen_retFifo_EMPTY_N ;

  // register lMemServer_writer_writers_0_tag_gen_counter_cnt
  assign lMemServer_writer_writers_0_tag_gen_counter_cnt_D_IN =
	     lMemServer_writer_writers_0_tag_gen_counter_cn_ETC___d684 ;
  assign lMemServer_writer_writers_0_tag_gen_counter_cnt_EN = 1'd1 ;

  // register lMemServer_writer_writers_0_tag_gen_counter_positive_reg
  assign lMemServer_writer_writers_0_tag_gen_counter_positive_reg_D_IN =
	     lMemServer_writer_writers_0_tag_gen_counter_cn_ETC___d684 !=
	     6'd0 ;
  assign lMemServer_writer_writers_0_tag_gen_counter_positive_reg_EN = 1'd1 ;

  // register lMemServer_writer_writers_0_tag_gen_head_ptr
  assign lMemServer_writer_writers_0_tag_gen_head_ptr_D_IN =
	     lMemServer_writer_writers_0_tag_gen_head_ptr + 5'd1 ;
  assign lMemServer_writer_writers_0_tag_gen_head_ptr_EN =
	     lMemServer_writer_writers_0_tag_gen_tagFifo_FULL_N &&
	     lMemServer_writer_writers_0_tag_gen_inited &&
	     lMemServer_writer_writers_0_tag_gen_counter_positive_reg ||
	     !lMemServer_writer_writers_0_tag_gen_inited ;

  // register lMemServer_writer_writers_0_tag_gen_inited
  assign lMemServer_writer_writers_0_tag_gen_inited_D_IN =
	     lMemServer_writer_writers_0_tag_gen_head_ptr == 5'd31 ;
  assign lMemServer_writer_writers_0_tag_gen_inited_EN =
	     !lMemServer_writer_writers_0_tag_gen_inited ;

  // register lMemServer_writer_writers_0_tag_gen_tags
  assign lMemServer_writer_writers_0_tag_gen_tags_D_IN =
	     lMemServer_writer_writers_0_tag_gen_tags_port2__read ;
  assign lMemServer_writer_writers_0_tag_gen_tags_EN = 1'b1 ;

  // register lMemServer_writer_writers_0_tag_gen_tail_ptr
  assign lMemServer_writer_writers_0_tag_gen_tail_ptr_D_IN =
	     lMemServer_writer_writers_0_tag_gen_tail_ptr + 5'd1 ;
  assign lMemServer_writer_writers_0_tag_gen_tail_ptr_EN =
	     MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__SEL_1 ;

  // register slave_2_0_burstReg
  assign slave_2_0_burstReg_D_IN = 8'h0 ;
  assign slave_2_0_burstReg_EN = 1'b0 ;

  // register slave_2_0_cycles
  assign slave_2_0_cycles_D_IN = slave_2_0_cycles + 64'd1 ;
  assign slave_2_0_cycles_EN = 1'd1 ;

  // register slave_2_0_last_read_eob
  assign slave_2_0_last_read_eob_D_IN = 64'h0 ;
  assign slave_2_0_last_read_eob_EN = 1'b0 ;

  // register slave_2_0_last_reqAr
  assign slave_2_0_last_reqAr_D_IN = 64'h0 ;
  assign slave_2_0_last_reqAr_EN = 1'b0 ;

  // register slave_2_0_last_write_eob
  assign slave_2_0_last_write_eob_D_IN = 64'h0 ;
  assign slave_2_0_last_write_eob_EN = 1'b0 ;

  // register slave_2_0_readLenReg
  assign slave_2_0_readLenReg_D_IN = readLen__h94689 - 10'd1 ;
  assign slave_2_0_readLenReg_EN = WILL_FIRE_RL_slave_2_0_read_rule ;

  // register slave_2_0_readOffsetReg
  assign slave_2_0_readOffsetReg_D_IN = readOffset__h94690 + 32'd16 ;
  assign slave_2_0_readOffsetReg_EN = WILL_FIRE_RL_slave_2_0_read_rule ;

  // register slave_2_0_req_ar_b_ts
  assign slave_2_0_req_ar_b_ts_D_IN = slave_2_0_cycles ;
  assign slave_2_0_req_ar_b_ts_EN =
	     WILL_FIRE_RL_slave_2_0_read_rule &&
	     slave_2_0_readLenReg == 10'd0 ;

  // register slave_2_0_req_aw_b_ts
  assign slave_2_0_req_aw_b_ts_D_IN = slave_2_0_cycles ;
  assign slave_2_0_req_aw_b_ts_EN =
	     WILL_FIRE_RL_mkConnectionGetPut_3 &&
	     slave_2_0_writeLenReg == 10'd0 ;

  // register slave_2_0_writeLenReg
  assign slave_2_0_writeLenReg_D_IN = writeLen___2__h97518 - 10'd1 ;
  assign slave_2_0_writeLenReg_EN = WILL_FIRE_RL_mkConnectionGetPut_3 ;

  // register slave_2_0_writeOffsetReg
  assign slave_2_0_writeOffsetReg_D_IN = writeOffset__h97519 + 32'd16 ;
  assign slave_2_0_writeOffsetReg_EN = WILL_FIRE_RL_mkConnectionGetPut_3 ;

  // submodule lMMUIndicationOutput
  assign lMMUIndicationOutput_ifc_configResp_sglId =
	     { 27'd0, lMMU_mmu_configResponsePipe_first } ;
  assign lMMUIndicationOutput_ifc_error_code =
	     { 29'd0, lMMU_mmu_errorPipe_first[74:72] } ;
  assign lMMUIndicationOutput_ifc_error_extra = 64'd0 ;
  assign lMMUIndicationOutput_ifc_error_offset =
	     { 24'd0, lMMU_mmu_errorPipe_first[39:0] } ;
  assign lMMUIndicationOutput_ifc_error_sglId =
	     lMMU_mmu_errorPipe_first[71:40] ;
  assign lMMUIndicationOutput_ifc_idResponse_sglId =
	     { 27'd0, lMMU_mmu_idResponsePipe_first } ;
  assign lMMUIndicationOutput_portalIfc_messageSize_size_methodNumber =
	     methodNumber__h88764 ;
  assign lMMUIndicationOutput_EN_portalIfc_indications_0_deq =
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendMessage &&
	     lMMUIndicationOutputNoc_methodIdReg == 8'd0 ;
  assign lMMUIndicationOutput_EN_portalIfc_indications_1_deq =
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendMessage &&
	     lMMUIndicationOutputNoc_methodIdReg == 8'd1 ;
  assign lMMUIndicationOutput_EN_portalIfc_indications_2_deq =
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendMessage &&
	     lMMUIndicationOutputNoc_methodIdReg == 8'd2 ;
  assign lMMUIndicationOutput_EN_ifc_idResponse =
	     lMMU_mmu_RDY_idResponsePipe_first &&
	     lMMU_mmu_RDY_idResponsePipe_deq &&
	     lMMUIndicationOutput_RDY_ifc_idResponse ;
  assign lMMUIndicationOutput_EN_ifc_configResp =
	     lMMU_mmu_RDY_configResponsePipe_first &&
	     lMMU_mmu_RDY_configResponsePipe_deq &&
	     lMMUIndicationOutput_RDY_ifc_configResp ;
  assign lMMUIndicationOutput_EN_ifc_error =
	     lMMU_mmu_RDY_errorPipe_first && lMMU_mmu_RDY_errorPipe_deq &&
	     lMMUIndicationOutput_RDY_ifc_error ;

  // submodule lMMUIndicationOutputNoc_fifoMsgSource
  assign lMMUIndicationOutputNoc_fifoMsgSource_D_IN =
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendHeader ?
	       MUX_lMMUIndicationOutputNoc_fifoMsgSource_enq_1__VAL_1 :
	       MUX_lMMUIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2 ;
  assign lMMUIndicationOutputNoc_fifoMsgSource_ENQ =
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendHeader ||
	     WILL_FIRE_RL_lMMUIndicationOutputNoc_sendMessage ;
  assign lMMUIndicationOutputNoc_fifoMsgSource_DEQ =
	     lMMUIndicationOutputNoc_fifoMsgSource_EMPTY_N ;
  assign lMMUIndicationOutputNoc_fifoMsgSource_CLR = 1'b0 ;

  // submodule lMMURequestInput
  assign lMMURequestInput_portalIfc_messageSize_size_methodNumber = 16'h0 ;
  assign lMMURequestInput_portalIfc_requests_0_enq_v =
	     lMMURequestInputNoc_fifoMsgSink_D_OUT ;
  assign lMMURequestInput_portalIfc_requests_1_enq_v =
	     lMMURequestInputNoc_fifoMsgSink_D_OUT ;
  assign lMMURequestInput_portalIfc_requests_2_enq_v =
	     lMMURequestInputNoc_fifoMsgSink_D_OUT ;
  assign lMMURequestInput_portalIfc_requests_3_enq_v =
	     lMMURequestInputNoc_fifoMsgSink_D_OUT ;
  assign lMMURequestInput_portalIfc_requests_4_enq_v =
	     lMMURequestInputNoc_fifoMsgSink_D_OUT ;
  assign lMMURequestInput_EN_portalIfc_requests_0_enq =
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessage &&
	     lMMURequestInputNoc_methodIdReg == 8'd0 ;
  assign lMMURequestInput_EN_portalIfc_requests_1_enq =
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessage &&
	     lMMURequestInputNoc_methodIdReg == 8'd1 ;
  assign lMMURequestInput_EN_portalIfc_requests_2_enq =
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessage &&
	     lMMURequestInputNoc_methodIdReg == 8'd2 ;
  assign lMMURequestInput_EN_portalIfc_requests_3_enq =
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessage &&
	     lMMURequestInputNoc_methodIdReg == 8'd3 ;
  assign lMMURequestInput_EN_portalIfc_requests_4_enq =
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessage &&
	     lMMURequestInputNoc_methodIdReg == 8'd4 ;
  assign lMMURequestInput_EN_pipes_sglist_PipeOut_deq =
	     lMMU_mmu_RDY_request_sglist &&
	     lMMURequestInput_RDY_pipes_sglist_PipeOut_first &&
	     lMMURequestInput_RDY_pipes_sglist_PipeOut_deq ;
  assign lMMURequestInput_EN_pipes_region_PipeOut_deq =
	     lMMU_mmu_RDY_request_region &&
	     lMMURequestInput_RDY_pipes_region_PipeOut_first &&
	     lMMURequestInput_RDY_pipes_region_PipeOut_deq ;
  assign lMMURequestInput_EN_pipes_idRequest_PipeOut_deq =
	     lMMU_mmu_RDY_request_idRequest &&
	     lMMURequestInput_RDY_pipes_idRequest_PipeOut_first &&
	     lMMURequestInput_RDY_pipes_idRequest_PipeOut_deq ;
  assign lMMURequestInput_EN_pipes_idReturn_PipeOut_deq =
	     lMMU_mmu_RDY_request_idReturn &&
	     lMMURequestInput_RDY_pipes_idReturn_PipeOut_first &&
	     lMMURequestInput_RDY_pipes_idReturn_PipeOut_deq ;
  assign lMMURequestInput_EN_pipes_setInterface_PipeOut_deq =
	     lMMURequestInput_RDY_pipes_setInterface_PipeOut_first &&
	     lMMURequestInput_RDY_pipes_setInterface_PipeOut_deq ;

  // submodule lMMURequestInputNoc_fifoMsgSink
  assign lMMURequestInputNoc_fifoMsgSink_D_IN = sink_1_beat ;
  assign lMMURequestInputNoc_fifoMsgSink_ENQ =
	     sink_1_RDY_beat && lMMURequestInputNoc_fifoMsgSink_FULL_N ;
  assign lMMURequestInputNoc_fifoMsgSink_DEQ =
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessage ||
	     WILL_FIRE_RL_lMMURequestInputNoc_receiveMessageHeader ;
  assign lMMURequestInputNoc_fifoMsgSink_CLR = 1'b0 ;

  // submodule lMMU_mmu
  assign lMMU_mmu_addr_0_request_put =
	     MUX_lMMU_mmu_addr_0_request_put_1__SEL_1 ?
	       top_readers_0_readReq_get[60:16] :
	       top_readers_1_readReq_get[60:16] ;
  always@(MUX_lMMU_mmu_addr_1_request_put_1__SEL_1 or
	  MUX_lMMU_mmu_addr_1_request_put_1__VAL_1 or
	  MUX_lMMU_mmu_addr_1_request_put_1__SEL_2 or
	  top_writers_0_writeReq_get or
	  MUX_lMMU_mmu_addr_1_request_put_1__SEL_3 or
	  top_writers_1_writeReq_get)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lMMU_mmu_addr_1_request_put_1__SEL_1:
	  lMMU_mmu_addr_1_request_put =
	      MUX_lMMU_mmu_addr_1_request_put_1__VAL_1;
      MUX_lMMU_mmu_addr_1_request_put_1__SEL_2:
	  lMMU_mmu_addr_1_request_put = top_writers_0_writeReq_get[60:16];
      MUX_lMMU_mmu_addr_1_request_put_1__SEL_3:
	  lMMU_mmu_addr_1_request_put = top_writers_1_writeReq_get[60:16];
      default: lMMU_mmu_addr_1_request_put =
		   45'h0AAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign lMMU_mmu_request_idRequest_fd =
	     lMMURequestInput_pipes_idRequest_PipeOut_first ;
  assign lMMU_mmu_request_idReturn_sglId =
	     lMMURequestInput_pipes_idReturn_PipeOut_first ;
  assign lMMU_mmu_request_region_barr0 =
	     lMMURequestInput_pipes_region_PipeOut_first[95:32] ;
  assign lMMU_mmu_request_region_barr12 =
	     lMMURequestInput_pipes_region_PipeOut_first[383:320] ;
  assign lMMU_mmu_request_region_barr4 =
	     lMMURequestInput_pipes_region_PipeOut_first[191:128] ;
  assign lMMU_mmu_request_region_barr8 =
	     lMMURequestInput_pipes_region_PipeOut_first[287:224] ;
  assign lMMU_mmu_request_region_index0 =
	     lMMURequestInput_pipes_region_PipeOut_first[31:0] ;
  assign lMMU_mmu_request_region_index12 =
	     lMMURequestInput_pipes_region_PipeOut_first[319:288] ;
  assign lMMU_mmu_request_region_index4 =
	     lMMURequestInput_pipes_region_PipeOut_first[127:96] ;
  assign lMMU_mmu_request_region_index8 =
	     lMMURequestInput_pipes_region_PipeOut_first[223:192] ;
  assign lMMU_mmu_request_region_sglId =
	     lMMURequestInput_pipes_region_PipeOut_first[415:384] ;
  assign lMMU_mmu_request_setInterface_interfaceId =
	     lMMURequestInput_pipes_setInterface_PipeOut_first[63:32] ;
  assign lMMU_mmu_request_setInterface_sglId =
	     lMMURequestInput_pipes_setInterface_PipeOut_first[31:0] ;
  assign lMMU_mmu_request_sglist_addr =
	     lMMURequestInput_pipes_sglist_PipeOut_first[95:32] ;
  assign lMMU_mmu_request_sglist_len =
	     lMMURequestInput_pipes_sglist_PipeOut_first[31:0] ;
  assign lMMU_mmu_request_sglist_sglId =
	     lMMURequestInput_pipes_sglist_PipeOut_first[159:128] ;
  assign lMMU_mmu_request_sglist_sglIndex =
	     lMMURequestInput_pipes_sglist_PipeOut_first[127:96] ;
  assign lMMU_mmu_EN_request_sglist =
	     lMMU_mmu_RDY_request_sglist &&
	     lMMURequestInput_RDY_pipes_sglist_PipeOut_first &&
	     lMMURequestInput_RDY_pipes_sglist_PipeOut_deq ;
  assign lMMU_mmu_EN_request_region =
	     lMMU_mmu_RDY_request_region &&
	     lMMURequestInput_RDY_pipes_region_PipeOut_first &&
	     lMMURequestInput_RDY_pipes_region_PipeOut_deq ;
  assign lMMU_mmu_EN_request_idRequest =
	     lMMU_mmu_RDY_request_idRequest &&
	     lMMURequestInput_RDY_pipes_idRequest_PipeOut_first &&
	     lMMURequestInput_RDY_pipes_idRequest_PipeOut_deq ;
  assign lMMU_mmu_EN_request_idReturn =
	     lMMU_mmu_RDY_request_idReturn &&
	     lMMURequestInput_RDY_pipes_idReturn_PipeOut_first &&
	     lMMURequestInput_RDY_pipes_idReturn_PipeOut_deq ;
  assign lMMU_mmu_EN_request_setInterface =
	     lMMURequestInput_RDY_pipes_setInterface_PipeOut_first &&
	     lMMURequestInput_RDY_pipes_setInterface_PipeOut_deq ;
  assign lMMU_mmu_EN_idResponsePipe_deq =
	     lMMU_mmu_RDY_idResponsePipe_first &&
	     lMMU_mmu_RDY_idResponsePipe_deq &&
	     lMMUIndicationOutput_RDY_ifc_idResponse ;
  assign lMMU_mmu_EN_configResponsePipe_deq =
	     lMMU_mmu_RDY_configResponsePipe_first &&
	     lMMU_mmu_RDY_configResponsePipe_deq &&
	     lMMUIndicationOutput_RDY_ifc_configResp ;
  assign lMMU_mmu_EN_errorPipe_deq =
	     lMMU_mmu_RDY_errorPipe_first && lMMU_mmu_RDY_errorPipe_deq &&
	     lMMUIndicationOutput_RDY_ifc_error ;
  assign lMMU_mmu_EN_addr_0_request_put =
	     WILL_FIRE_RL_lMemServer_0_mr_request &&
	     top_readers_0_readReq_get[87:72] == 16'd0 &&
	     top_readers_0_readReq_get_65_BITS_71_TO_56_66__ETC___d967 &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d986 ||
	     WILL_FIRE_RL_lMemServer_1_mr_request &&
	     top_readers_1_readReq_get[87:72] == 16'd0 &&
	     top_readers_1_readReq_get_005_BITS_71_TO_56_00_ETC___d1007 &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d1017 ;
  assign lMMU_mmu_EN_addr_0_response_get =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp &&
	     lMemServer_reader_readers_0_clientRequest_D_OUT[88:73] ==
	     16'd0 ||
	     WILL_FIRE_RL_lMemServer_reader_mmuEntry &&
	     lMemServer_reader_addrReqFifo_D_OUT[31:16] == 16'd0 ;
  assign lMMU_mmu_EN_addr_1_request_put =
	     WILL_FIRE_RL_handle_addrTrans_request &&
	     lMemServerRequestInput_pipes_addrTrans_PipeOut_first[63:48] ==
	     16'd0 ||
	     WILL_FIRE_RL_lMemServer_1_0_mw_request &&
	     top_writers_0_writeReq_get[87:72] == 16'd0 &&
	     top_writers_0_writeReq_get_036_BITS_71_TO_56_0_ETC___d1038 &&
	     SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1057 ||
	     WILL_FIRE_RL_lMemServer_1_1_mw_request &&
	     top_writers_1_writeReq_get[87:72] == 16'd0 &&
	     top_writers_1_writeReq_get_076_BITS_71_TO_56_0_ETC___d1078 &&
	     SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1088 ;
  assign lMMU_mmu_EN_addr_1_response_get =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_checkMmuResp &&
	     lMemServer_writer_writers_0_clientRequest_D_OUT[88:73] ==
	     16'd0 ||
	     WILL_FIRE_RL_lMemServer_writer_mmuEntry &&
	     lMemServer_writer_addrReqFifo_D_OUT[31:16] == 16'd0 ;

  // submodule lMemServerIndicationOutput
  assign lMemServerIndicationOutput_ifc_addrResponse_physAddr =
	     WILL_FIRE_RL_lMemServer_reader_mmuEntry ?
	       MUX_lMemServerIndicationOutput_ifc_addrResponse_1__VAL_1 :
	       MUX_lMemServerIndicationOutput_ifc_addrResponse_1__VAL_2 ;
  assign lMemServerIndicationOutput_ifc_error_code =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_dmaError ?
	       MUX_lMemServerIndicationOutput_ifc_error_1__VAL_1 :
	       MUX_lMemServerIndicationOutput_ifc_error_1__VAL_2 ;
  assign lMemServerIndicationOutput_ifc_error_extra = 64'd0 ;
  assign lMemServerIndicationOutput_ifc_error_offset = 64'd0 ;
  assign lMemServerIndicationOutput_ifc_error_sglId =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_dmaError ?
	       lMemServer_reader_readers_0_dmaErrorFifo_D_OUT[31:0] :
	       lMemServer_writer_writers_0_dmaErrorFifo_D_OUT[31:0] ;
  assign lMemServerIndicationOutput_ifc_reportMemoryTraffic_words =
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17 ?
	       lMemServer_reader_trafficAccum :
	       lMemServer_writer_trafficAccum ;
  assign lMemServerIndicationOutput_ifc_reportStateDbg_rec =
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_l242c10 ?
	       128'h00000002AAAAAAAAAAAAAAAAAAAAAAAA :
	       128'd0 ;
  assign lMemServerIndicationOutput_portalIfc_messageSize_size_methodNumber =
	     methodNumber__h90584 ;
  assign lMemServerIndicationOutput_EN_portalIfc_indications_0_deq =
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendMessage &&
	     lMemServerIndicationOutputNoc_methodIdReg == 8'd0 ;
  assign lMemServerIndicationOutput_EN_portalIfc_indications_1_deq =
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendMessage &&
	     lMemServerIndicationOutputNoc_methodIdReg == 8'd1 ;
  assign lMemServerIndicationOutput_EN_portalIfc_indications_2_deq =
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendMessage &&
	     lMemServerIndicationOutputNoc_methodIdReg == 8'd2 ;
  assign lMemServerIndicationOutput_EN_portalIfc_indications_3_deq =
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendMessage &&
	     lMemServerIndicationOutputNoc_methodIdReg == 8'd3 ;
  assign lMemServerIndicationOutput_EN_ifc_addrResponse =
	     WILL_FIRE_RL_lMemServer_reader_mmuEntry ||
	     WILL_FIRE_RL_lMemServer_writer_mmuEntry ;
  assign lMemServerIndicationOutput_EN_ifc_reportStateDbg =
	     WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_l242c10 ||
	     WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_l158c10 ;
  assign lMemServerIndicationOutput_EN_ifc_reportMemoryTraffic =
	     WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17 ||
	     WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l257c17 ;
  assign lMemServerIndicationOutput_EN_ifc_error =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_dmaError ||
	     CAN_FIRE_RL_lMemServer_writer_writers_0_dmaError &&
	     !WILL_FIRE_RL_lMemServer_reader_readers_0_dmaError ;

  // submodule lMemServerIndicationOutputNoc_fifoMsgSource
  assign lMemServerIndicationOutputNoc_fifoMsgSource_D_IN =
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendHeader ?
	       MUX_lMemServerIndicationOutputNoc_fifoMsgSource_enq_1__VAL_1 :
	       MUX_lMemServerIndicationOutputNoc_fifoMsgSource_enq_1__VAL_2 ;
  assign lMemServerIndicationOutputNoc_fifoMsgSource_ENQ =
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendHeader ||
	     WILL_FIRE_RL_lMemServerIndicationOutputNoc_sendMessage ;
  assign lMemServerIndicationOutputNoc_fifoMsgSource_DEQ =
	     lMemServerIndicationOutputNoc_fifoMsgSource_EMPTY_N ;
  assign lMemServerIndicationOutputNoc_fifoMsgSource_CLR = 1'b0 ;

  // submodule lMemServerRequestInput
  assign lMemServerRequestInput_portalIfc_messageSize_size_methodNumber =
	     16'h0 ;
  assign lMemServerRequestInput_portalIfc_requests_0_enq_v =
	     lMemServerRequestInputNoc_fifoMsgSink_D_OUT ;
  assign lMemServerRequestInput_portalIfc_requests_1_enq_v =
	     lMemServerRequestInputNoc_fifoMsgSink_D_OUT ;
  assign lMemServerRequestInput_portalIfc_requests_2_enq_v =
	     lMemServerRequestInputNoc_fifoMsgSink_D_OUT ;
  assign lMemServerRequestInput_portalIfc_requests_3_enq_v =
	     lMemServerRequestInputNoc_fifoMsgSink_D_OUT ;
  assign lMemServerRequestInput_EN_portalIfc_requests_0_enq =
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessage &&
	     lMemServerRequestInputNoc_methodIdReg == 8'd0 ;
  assign lMemServerRequestInput_EN_portalIfc_requests_1_enq =
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessage &&
	     lMemServerRequestInputNoc_methodIdReg == 8'd1 ;
  assign lMemServerRequestInput_EN_portalIfc_requests_2_enq =
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessage &&
	     lMemServerRequestInputNoc_methodIdReg == 8'd2 ;
  assign lMemServerRequestInput_EN_portalIfc_requests_3_enq =
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessage &&
	     lMemServerRequestInputNoc_methodIdReg == 8'd3 ;
  assign lMemServerRequestInput_EN_pipes_addrTrans_PipeOut_deq =
	     WILL_FIRE_RL_handle_addrTrans_request ;
  assign lMemServerRequestInput_EN_pipes_setTileState_PipeOut_deq =
	     WILL_FIRE_RL_handle_setTileState_request ;
  assign lMemServerRequestInput_EN_pipes_stateDbg_PipeOut_deq =
	     WILL_FIRE_RL_handle_stateDbg_request ;
  assign lMemServerRequestInput_EN_pipes_memoryTraffic_PipeOut_deq =
	     WILL_FIRE_RL_handle_memoryTraffic_request ;

  // submodule lMemServerRequestInputNoc_fifoMsgSink
  assign lMemServerRequestInputNoc_fifoMsgSink_D_IN = sink_2_beat ;
  assign lMemServerRequestInputNoc_fifoMsgSink_ENQ =
	     sink_2_RDY_beat && lMemServerRequestInputNoc_fifoMsgSink_FULL_N ;
  assign lMemServerRequestInputNoc_fifoMsgSink_DEQ =
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessage ||
	     WILL_FIRE_RL_lMemServerRequestInputNoc_receiveMessageHeader ;
  assign lMemServerRequestInputNoc_fifoMsgSink_CLR = 1'b0 ;

  // submodule lMemServer_reader_addrReqFifo
  assign lMemServer_reader_addrReqFifo_D_IN = 32'h0 ;
  assign lMemServer_reader_addrReqFifo_ENQ = 1'b0 ;
  assign lMemServer_reader_addrReqFifo_DEQ =
	     WILL_FIRE_RL_lMemServer_reader_mmuEntry ;
  assign lMemServer_reader_addrReqFifo_CLR = 1'b0 ;

  // submodule lMemServer_reader_mmu_servers_0_tokFifo
  assign lMemServer_reader_mmu_servers_0_tokFifo_D_IN = 1'd0 ;
  assign lMemServer_reader_mmu_servers_0_tokFifo_ENQ =
	     WILL_FIRE_RL_lMemServer_0_mr_request &&
	     top_readers_0_readReq_get[87:72] == 16'd0 &&
	     top_readers_0_readReq_get_65_BITS_71_TO_56_66__ETC___d967 &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d986 ||
	     WILL_FIRE_RL_lMemServer_1_mr_request &&
	     top_readers_1_readReq_get[87:72] == 16'd0 &&
	     top_readers_1_readReq_get_005_BITS_71_TO_56_00_ETC___d1007 &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d1017 ;
  assign lMemServer_reader_mmu_servers_0_tokFifo_DEQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp &&
	     lMemServer_reader_readers_0_clientRequest_D_OUT[88:73] == 16'd0 ;
  assign lMemServer_reader_mmu_servers_0_tokFifo_CLR = 1'b0 ;

  // submodule lMemServer_reader_readers_0_clientBurstLen
  assign lMemServer_reader_readers_0_clientBurstLen_ADDR_1 =
	     lMemServer_reader_readers_0_serverData_D_OUT[5:1] ;
  assign lMemServer_reader_readers_0_clientBurstLen_ADDR_2 = 5'h0 ;
  assign lMemServer_reader_readers_0_clientBurstLen_ADDR_3 = 5'h0 ;
  assign lMemServer_reader_readers_0_clientBurstLen_ADDR_4 = 5'h0 ;
  assign lMemServer_reader_readers_0_clientBurstLen_ADDR_5 = 5'h0 ;
  assign lMemServer_reader_readers_0_clientBurstLen_ADDR_IN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ?
	       lMemServer_reader_readers_0_serverData_D_OUT[5:1] :
	       lMemServer_reader_readers_0_tag_gen_tagFifo_D_OUT ;
  assign lMemServer_reader_readers_0_clientBurstLen_D_IN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ?
	       MUX_lMemServer_reader_readers_0_clientBurstLen_upd_2__VAL_1 :
	       MUX_lMemServer_reader_readers_0_clientBurstLen_upd_2__VAL_2 ;
  assign lMemServer_reader_readers_0_clientBurstLen_WE =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ||
	     WILL_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp ;

  // submodule lMemServer_reader_readers_0_clientData_memory
  assign lMemServer_reader_readers_0_clientData_memory_ADDRA =
	     { lMemServer_reader_readers_0_serverData_D_OUT[5:1],
	       lMemServer_reader_readers_0_clientBurstLen_D_OUT_1[5:0] } ;
  assign lMemServer_reader_readers_0_clientData_memory_ADDRB =
	     MUX_lMemServer_reader_readers_0_clientData_memory_b_put_1__SEL_1 ?
	       MUX_lMemServer_reader_readers_0_clientData_memory_b_put_2__VAL_1 :
	       MUX_lMemServer_reader_readers_0_clientData_memory_b_put_2__VAL_2 ;
  assign lMemServer_reader_readers_0_clientData_memory_DIA =
	     { lMemServer_reader_readers_0_serverData_D_OUT[134:7],
	       tag__h13211,
	       lMemServer_reader_readers_0_clientBurstLen_D_OUT_1[10] } ;
  assign lMemServer_reader_readers_0_clientData_memory_DIB =
	     MUX_lMemServer_reader_readers_0_clientData_memory_b_put_1__SEL_1 ?
	       135'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       135'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign lMemServer_reader_readers_0_clientData_memory_WEA = 1'd1 ;
  assign lMemServer_reader_readers_0_clientData_memory_WEB = 1'd0 ;
  assign lMemServer_reader_readers_0_clientData_memory_ENA =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ;
  assign lMemServer_reader_readers_0_clientData_memory_ENB =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d401 ||
	     WILL_FIRE_RL_lMemServer_reader_readers_0_burst_remainder &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d427 ;

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq_D_IN =
	     1'b0 ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq_EN =
	     1'b0 ;

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq_D_IN =
	     1'd1 ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq_EN =
	     lMemServer_reader_readers_0_clientData_serverAdapterA_outData_enqw_whas ;

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_D_IN =
	     lMemServer_reader_readers_0_clientData_memory_DOA ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_ENQ =
	     lMemServer_reader_readers_0_clientData_serverAdapterA_outData_enqw_whas ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_DEQ =
	     1'b0 ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_CLR =
	     1'b0 ;

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq_D_IN =
	     1'd1 ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq_EN =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_dequeueing_whas ;

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq_D_IN =
	     1'd1 ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq_EN =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_enqw_whas ;

  // submodule lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_D_IN =
	     lMemServer_reader_readers_0_clientData_memory_DOB ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_ENQ =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_enqw_whas &&
	     (!lMemServer_reader_readers_0_clientData_serverAdapterB_outData_dequeueing_whas ||
	      lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_EMPTY_N) ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_DEQ =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_dequeueing_whas &&
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_EMPTY_N ;
  assign lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_CLR =
	     1'b0 ;

  // submodule lMemServer_reader_readers_0_clientRequest
  assign lMemServer_reader_readers_0_clientRequest_D_IN =
	     MUX_lMMU_mmu_addr_0_request_put_1__SEL_1 ?
	       MUX_lMemServer_reader_readers_0_clientRequest_enq_1__VAL_1 :
	       MUX_lMemServer_reader_readers_0_clientRequest_enq_1__VAL_2 ;
  assign lMemServer_reader_readers_0_clientRequest_ENQ =
	     WILL_FIRE_RL_lMemServer_0_mr_request &&
	     top_readers_0_readReq_get[87:72] == 16'd0 &&
	     top_readers_0_readReq_get_65_BITS_71_TO_56_66__ETC___d967 &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d986 ||
	     WILL_FIRE_RL_lMemServer_1_mr_request &&
	     top_readers_1_readReq_get[87:72] == 16'd0 &&
	     top_readers_1_readReq_get_005_BITS_71_TO_56_00_ETC___d1007 &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d1017 ;
  assign lMemServer_reader_readers_0_clientRequest_DEQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp ;
  assign lMemServer_reader_readers_0_clientRequest_CLR = 1'b0 ;

  // submodule lMemServer_reader_readers_0_clientSelect
  assign lMemServer_reader_readers_0_clientSelect_D_IN =
	     MUX_lMemServer_reader_readers_0_clientData_memory_b_put_1__SEL_1 ?
	       MUX_lMemServer_reader_readers_0_clientSelect_enq_1__VAL_1 :
	       MUX_lMemServer_reader_readers_0_clientSelect_enq_1__VAL_2 ;
  assign lMemServer_reader_readers_0_clientSelect_ENQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d401 ||
	     WILL_FIRE_RL_lMemServer_reader_readers_0_burst_remainder &&
	     SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d427 ;
  assign lMemServer_reader_readers_0_clientSelect_DEQ =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_dequeueing_whas ;
  assign lMemServer_reader_readers_0_clientSelect_CLR = 1'b0 ;

  // submodule lMemServer_reader_readers_0_dmaErrorFifo
  assign lMemServer_reader_readers_0_dmaErrorFifo_D_IN =
	     MUX_lMemServer_reader_readers_0_dmaErrorFifo_enq_1__SEL_1 ?
	       MUX_lMemServer_reader_readers_0_dmaErrorFifo_enq_1__VAL_1 :
	       MUX_lMemServer_reader_readers_0_dmaErrorFifo_enq_1__VAL_2 ;
  assign lMemServer_reader_readers_0_dmaErrorFifo_ENQ =
	     WILL_FIRE_RL_lMemServer_0_mr_request &&
	     (!top_readers_0_readReq_get_65_BITS_71_TO_56_66__ETC___d967 ||
	      top_readers_0_readReq_get[87:72] != 16'd0) ||
	     WILL_FIRE_RL_lMemServer_1_mr_request &&
	     (!top_readers_1_readReq_get_005_BITS_71_TO_56_00_ETC___d1007 ||
	      top_readers_1_readReq_get[87:72] != 16'd0) ;
  assign lMemServer_reader_readers_0_dmaErrorFifo_DEQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_dmaError ;
  assign lMemServer_reader_readers_0_dmaErrorFifo_CLR = 1'b0 ;

  // submodule lMemServer_reader_readers_0_serverData
  assign lMemServer_reader_readers_0_serverData_D_IN =
	     { v__h95928, slave_2_0_taglastfifo_D_OUT } ;
  assign lMemServer_reader_readers_0_serverData_ENQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways ;
  assign lMemServer_reader_readers_0_serverData_DEQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ;
  assign lMemServer_reader_readers_0_serverData_CLR = 1'b0 ;

  // submodule lMemServer_reader_readers_0_serverProcessing_memory
  assign lMemServer_reader_readers_0_serverProcessing_memory_ADDRA =
	     slave_2_0_taglastfifo_D_OUT[5:1] ;
  assign lMemServer_reader_readers_0_serverProcessing_memory_ADDRB =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_tag_completed ?
	       lMemServer_reader_readers_0_tag_gen_comp_fifo_D_OUT :
	       lMemServer_reader_readers_0_serverRequest_D_OUT[5:1] ;
  assign lMemServer_reader_readers_0_serverProcessing_memory_DIA =
	     24'b101010101010101010101010 /* unspecified value */  ;
  assign lMemServer_reader_readers_0_serverProcessing_memory_DIB =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_tag_completed ?
	       24'b101010101010101010101010 /* unspecified value */  :
	       MUX_lMemServer_reader_readers_0_serverProcessing_memory_b_put_3__VAL_2 ;
  assign lMemServer_reader_readers_0_serverProcessing_memory_WEA = 1'd0 ;
  assign lMemServer_reader_readers_0_serverProcessing_memory_WEB =
	     !WILL_FIRE_RL_lMemServer_reader_readers_0_tag_completed ;
  assign lMemServer_reader_readers_0_serverProcessing_memory_ENA =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways ;
  assign lMemServer_reader_readers_0_serverProcessing_memory_ENB =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_writeWithResp_whas ;

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq_D_IN =
	     1'd1 ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ;

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq_D_IN =
	     1'd1 ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq_EN =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_enqw_whas ;

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_D_IN =
	     lMemServer_reader_readers_0_serverProcessing_memory_DOA ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_ENQ =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_enqw_whas &&
	     (!WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ||
	      lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_EMPTY_N) ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_DEQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data &&
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_EMPTY_N ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_CLR =
	     1'b0 ;

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq_D_IN =
	     1'd1 ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq_EN =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a ;

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq_D_IN =
	     1'd1 ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq_EN =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_enqw_whas ;

  // submodule lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_D_IN =
	     lMemServer_reader_readers_0_serverProcessing_memory_DOB ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_ENQ =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_enqw_whas &&
	     (!WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a ||
	      lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_EMPTY_N) ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_DEQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a &&
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_EMPTY_N ;
  assign lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_CLR =
	     1'b0 ;

  // submodule lMemServer_reader_readers_0_serverRequest
  assign lMemServer_reader_readers_0_serverRequest_D_IN =
	     { lMemServer_reader_readers_0_clientRequest_D_OUT[88:1],
	       lMMU_mmu_addr_0_response_get[39:0],
	       x_rename_tag__h12914,
	       lMemServer_reader_readers_0_clientRequest_D_OUT[0] } ;
  assign lMemServer_reader_readers_0_serverRequest_ENQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp ;
  assign lMemServer_reader_readers_0_serverRequest_DEQ =
	     WILL_FIRE_RL_mkConnectionGetPut ;
  assign lMemServer_reader_readers_0_serverRequest_CLR = 1'b0 ;

  // submodule lMemServer_reader_readers_0_serverTag
  assign lMemServer_reader_readers_0_serverTag_D_IN =
	     lMemServer_reader_readers_0_tag_gen_comp_fifo_D_OUT ;
  assign lMemServer_reader_readers_0_serverTag_ENQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_tag_completed ;
  assign lMemServer_reader_readers_0_serverTag_DEQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a ;
  assign lMemServer_reader_readers_0_serverTag_CLR = 1'b0 ;

  // submodule lMemServer_reader_readers_0_tag_gen_comp_fifo
  assign lMemServer_reader_readers_0_tag_gen_comp_fifo_D_IN =
	     lMemServer_reader_readers_0_tag_gen_tail_ptr ;
  assign lMemServer_reader_readers_0_tag_gen_comp_fifo_ENQ =
	     MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__SEL_1 ;
  assign lMemServer_reader_readers_0_tag_gen_comp_fifo_DEQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_tag_completed ;
  assign lMemServer_reader_readers_0_tag_gen_comp_fifo_CLR = 1'b0 ;

  // submodule lMemServer_reader_readers_0_tag_gen_retFifo
  assign lMemServer_reader_readers_0_tag_gen_retFifo_D_IN =
	     lMemServer_reader_readers_0_serverData_D_OUT[5:1] ;
  assign lMemServer_reader_readers_0_tag_gen_retFifo_ENQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_read_data &&
	     lMemServer_reader_readers_0_clientBurstLen_D_OUT_1[10] ;
  assign lMemServer_reader_readers_0_tag_gen_retFifo_DEQ =
	     lMemServer_reader_readers_0_tag_gen_retFifo_EMPTY_N ;
  assign lMemServer_reader_readers_0_tag_gen_retFifo_CLR = 1'b0 ;

  // submodule lMemServer_reader_readers_0_tag_gen_tagFifo
  assign lMemServer_reader_readers_0_tag_gen_tagFifo_D_IN =
	     lMemServer_reader_readers_0_tag_gen_head_ptr ;
  assign lMemServer_reader_readers_0_tag_gen_tagFifo_ENQ =
	     lMemServer_reader_readers_0_tag_gen_counter_dec_wire_whas ;
  assign lMemServer_reader_readers_0_tag_gen_tagFifo_DEQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_checkMmuResp ;
  assign lMemServer_reader_readers_0_tag_gen_tagFifo_CLR = 1'b0 ;

  // submodule lMemServer_writer_addrReqFifo
  assign lMemServer_writer_addrReqFifo_D_IN =
	     lMemServerRequestInput_pipes_addrTrans_PipeOut_first[63:32] ;
  assign lMemServer_writer_addrReqFifo_ENQ =
	     WILL_FIRE_RL_handle_addrTrans_request ;
  assign lMemServer_writer_addrReqFifo_DEQ =
	     WILL_FIRE_RL_lMemServer_writer_mmuEntry ;
  assign lMemServer_writer_addrReqFifo_CLR = 1'b0 ;

  // submodule lMemServer_writer_mmu_servers_0_tokFifo
  assign lMemServer_writer_mmu_servers_0_tokFifo_D_IN = 1'd0 ;
  assign lMemServer_writer_mmu_servers_0_tokFifo_ENQ =
	     WILL_FIRE_RL_lMemServer_1_0_mw_request &&
	     top_writers_0_writeReq_get[87:72] == 16'd0 &&
	     top_writers_0_writeReq_get_036_BITS_71_TO_56_0_ETC___d1038 &&
	     SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1057 ||
	     WILL_FIRE_RL_lMemServer_1_1_mw_request &&
	     top_writers_1_writeReq_get[87:72] == 16'd0 &&
	     top_writers_1_writeReq_get_076_BITS_71_TO_56_0_ETC___d1078 &&
	     SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1088 ;
  assign lMemServer_writer_mmu_servers_0_tokFifo_DEQ =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_checkMmuResp &&
	     lMemServer_writer_writers_0_clientRequest_D_OUT[88:73] == 16'd0 ;
  assign lMemServer_writer_mmu_servers_0_tokFifo_CLR = 1'b0 ;

  // submodule lMemServer_writer_writers_0_clientRequest
  assign lMemServer_writer_writers_0_clientRequest_D_IN =
	     MUX_lMMU_mmu_addr_1_request_put_1__SEL_2 ?
	       MUX_lMemServer_writer_writers_0_clientRequest_enq_1__VAL_1 :
	       MUX_lMemServer_writer_writers_0_clientRequest_enq_1__VAL_2 ;
  assign lMemServer_writer_writers_0_clientRequest_ENQ =
	     WILL_FIRE_RL_lMemServer_1_0_mw_request &&
	     top_writers_0_writeReq_get[87:72] == 16'd0 &&
	     top_writers_0_writeReq_get_036_BITS_71_TO_56_0_ETC___d1038 &&
	     SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1057 ||
	     WILL_FIRE_RL_lMemServer_1_1_mw_request &&
	     top_writers_1_writeReq_get[87:72] == 16'd0 &&
	     top_writers_1_writeReq_get_076_BITS_71_TO_56_0_ETC___d1078 &&
	     SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1088 ;
  assign lMemServer_writer_writers_0_clientRequest_DEQ =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_checkMmuResp ;
  assign lMemServer_writer_writers_0_clientRequest_CLR = 1'b0 ;

  // submodule lMemServer_writer_writers_0_clientResponse
  assign lMemServer_writer_writers_0_clientResponse_D_IN =
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_EMPTY_N ?
	       lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_D_OUT :
	       lMemServer_writer_writers_0_respFifos_memory_DOB ;
  assign lMemServer_writer_writers_0_clientResponse_ENQ =
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_dequeueing_whas ;
  assign lMemServer_writer_writers_0_clientResponse_DEQ =
	     lMemServer_writer_writers_0_clientResponse_D_OUT[0] &&
	     top_RDY_writers_1_writeDone_put &&
	     lMemServer_writer_writers_0_clientResponse_EMPTY_N ||
	     !lMemServer_writer_writers_0_clientResponse_D_OUT[0] &&
	     top_RDY_writers_0_writeDone_put &&
	     lMemServer_writer_writers_0_clientResponse_EMPTY_N ;
  assign lMemServer_writer_writers_0_clientResponse_CLR = 1'b0 ;

  // submodule lMemServer_writer_writers_0_clientWriteData_0
  assign lMemServer_writer_writers_0_clientWriteData_0_D_IN =
	     top_writers_0_writeData_get ;
  assign lMemServer_writer_writers_0_clientWriteData_0_ENQ =
	     top_RDY_writers_0_writeData_get &&
	     lMemServer_writer_writers_0_clientWriteData_0_FULL_N ;
  assign lMemServer_writer_writers_0_clientWriteData_0_DEQ =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_memdata &&
	     lMemServer_writer_writers_0_serverProcessing_D_OUT[1] == 1'd0 &&
	     SEL_ARR_NOT_lMemServer_writer_writers_0_killv__ETC___d768 ;
  assign lMemServer_writer_writers_0_clientWriteData_0_CLR = 1'b0 ;

  // submodule lMemServer_writer_writers_0_clientWriteData_1
  assign lMemServer_writer_writers_0_clientWriteData_1_D_IN =
	     top_writers_1_writeData_get ;
  assign lMemServer_writer_writers_0_clientWriteData_1_ENQ =
	     top_RDY_writers_1_writeData_get &&
	     lMemServer_writer_writers_0_clientWriteData_1_FULL_N ;
  assign lMemServer_writer_writers_0_clientWriteData_1_DEQ =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_memdata &&
	     lMemServer_writer_writers_0_serverProcessing_D_OUT[1] == 1'd1 &&
	     SEL_ARR_NOT_lMemServer_writer_writers_0_killv__ETC___d768 ;
  assign lMemServer_writer_writers_0_clientWriteData_1_CLR = 1'b0 ;

  // submodule lMemServer_writer_writers_0_dmaErrorFifo
  assign lMemServer_writer_writers_0_dmaErrorFifo_D_IN =
	     MUX_lMemServer_writer_writers_0_dmaErrorFifo_enq_1__SEL_1 ?
	       MUX_lMemServer_writer_writers_0_dmaErrorFifo_enq_1__VAL_1 :
	       MUX_lMemServer_writer_writers_0_dmaErrorFifo_enq_1__VAL_2 ;
  assign lMemServer_writer_writers_0_dmaErrorFifo_ENQ =
	     WILL_FIRE_RL_lMemServer_1_0_mw_request &&
	     (!top_writers_0_writeReq_get_036_BITS_71_TO_56_0_ETC___d1038 ||
	      top_writers_0_writeReq_get[87:72] != 16'd0) ||
	     WILL_FIRE_RL_lMemServer_1_1_mw_request &&
	     (!top_writers_1_writeReq_get_076_BITS_71_TO_56_0_ETC___d1078 ||
	      top_writers_1_writeReq_get[87:72] != 16'd0) ;
  assign lMemServer_writer_writers_0_dmaErrorFifo_DEQ =
	     MUX_lMemServerIndicationOutput_ifc_error_1__SEL_2 ;
  assign lMemServer_writer_writers_0_dmaErrorFifo_CLR = 1'b0 ;

  // submodule lMemServer_writer_writers_0_memDataFifo
  assign lMemServer_writer_writers_0_memDataFifo_D_IN =
	     { x_data__h52954,
	       lMemServer_writer_writers_0_serverProcessing_D_OUT[7:2],
	       IF_lMemServer_writer_writers_0_firstReg_75_THE_ETC___d800 } ;
  assign lMemServer_writer_writers_0_memDataFifo_ENQ =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_memdata ;
  assign lMemServer_writer_writers_0_memDataFifo_DEQ =
	     WILL_FIRE_RL_mkConnectionGetPut_3 ;
  assign lMemServer_writer_writers_0_memDataFifo_CLR = 1'b0 ;

  // submodule lMemServer_writer_writers_0_respFifos_memory
  assign lMemServer_writer_writers_0_respFifos_memory_ADDRA =
	     lMemServer_writer_writers_0_serverProcessing_D_OUT[6:2] ;
  assign lMemServer_writer_writers_0_respFifos_memory_ADDRB =
	     lMemServer_writer_writers_0_tag_gen_comp_fifo_D_OUT ;
  assign lMemServer_writer_writers_0_respFifos_memory_DIA =
	     { lMemServer_writer_writers_0_serverProcessing_D_OUT[23:18],
	       lMemServer_writer_writers_0_serverProcessing_D_OUT[1] } ;
  assign lMemServer_writer_writers_0_respFifos_memory_DIB =
	     7'b0101010 /* unspecified value */  ;
  assign lMemServer_writer_writers_0_respFifos_memory_WEA = 1'd1 ;
  assign lMemServer_writer_writers_0_respFifos_memory_WEB = 1'd0 ;
  assign lMemServer_writer_writers_0_respFifos_memory_ENA =
	     lMemServer_writer_writers_0_respFifos_serverAdapterA_writeWithResp_whas ;
  assign lMemServer_writer_writers_0_respFifos_memory_ENB =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_respFifos_serverAdapterB_stageReadResponseAlways ;

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq_D_IN =
	     1'b0 ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq_EN =
	     1'b0 ;

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq_D_IN =
	     1'd1 ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq_EN =
	     lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_enqw_whas ;

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_D_IN =
	     lMemServer_writer_writers_0_respFifos_memory_DOA ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_ENQ =
	     lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_enqw_whas ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_DEQ =
	     1'b0 ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_CLR =
	     1'b0 ;

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq_D_IN =
	     1'd1 ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq_EN =
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_dequeueing_whas ;

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq_D_IN =
	     1'd1 ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq_EN =
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_enqw_whas ;

  // submodule lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_D_IN =
	     lMemServer_writer_writers_0_respFifos_memory_DOB ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_ENQ =
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_enqw_whas &&
	     (!lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_dequeueing_whas ||
	      lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_EMPTY_N) ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_DEQ =
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_dequeueing_whas &&
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_EMPTY_N ;
  assign lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_CLR =
	     1'b0 ;

  // submodule lMemServer_writer_writers_0_serverProcessing
  assign lMemServer_writer_writers_0_serverProcessing_D_IN =
	     { lMemServer_writer_writers_0_serverRequest_D_OUT[52:47],
	       lMemServer_writer_writers_0_serverRequest_D_OUT[62:53],
	       lMemServer_writer_writers_0_serverRequest_D_OUT[6:0],
	       lMemServer_writer_writers_0_serverRequest_D_OUT[62:53] ==
	       10'd16 } ;
  assign lMemServer_writer_writers_0_serverProcessing_ENQ =
	     lMemServer_writer_writers_0_serverRequest_EMPTY_N &&
	     lMemServer_writer_writers_0_serverProcessing_FULL_N &&
	     slave_2_0_writeDelayFifo_FULL_N ;
  assign lMemServer_writer_writers_0_serverProcessing_DEQ =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_memdata &&
	     IF_lMemServer_writer_writers_0_firstReg_75_THE_ETC___d800 ;
  assign lMemServer_writer_writers_0_serverProcessing_CLR = 1'b0 ;

  // submodule lMemServer_writer_writers_0_serverRequest
  assign lMemServer_writer_writers_0_serverRequest_D_IN =
	     { lMemServer_writer_writers_0_clientRequest_D_OUT[88:1],
	       lMMU_mmu_addr_1_response_get[39:0],
	       x_rename_tag__h51628,
	       lMemServer_writer_writers_0_clientRequest_D_OUT[0] } ;
  assign lMemServer_writer_writers_0_serverRequest_ENQ =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_checkMmuResp ;
  assign lMemServer_writer_writers_0_serverRequest_DEQ =
	     lMemServer_writer_writers_0_serverRequest_EMPTY_N &&
	     lMemServer_writer_writers_0_serverProcessing_FULL_N &&
	     slave_2_0_writeDelayFifo_FULL_N ;
  assign lMemServer_writer_writers_0_serverRequest_CLR = 1'b0 ;

  // submodule lMemServer_writer_writers_0_tag_gen_comp_fifo
  assign lMemServer_writer_writers_0_tag_gen_comp_fifo_D_IN =
	     lMemServer_writer_writers_0_tag_gen_tail_ptr ;
  assign lMemServer_writer_writers_0_tag_gen_comp_fifo_ENQ =
	     MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__SEL_1 ;
  assign lMemServer_writer_writers_0_tag_gen_comp_fifo_DEQ =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_respFifos_serverAdapterB_stageReadResponseAlways ;
  assign lMemServer_writer_writers_0_tag_gen_comp_fifo_CLR = 1'b0 ;

  // submodule lMemServer_writer_writers_0_tag_gen_retFifo
  assign lMemServer_writer_writers_0_tag_gen_retFifo_D_IN =
	     slave_2_0_bFifo_D_OUT[4:0] ;
  assign lMemServer_writer_writers_0_tag_gen_retFifo_ENQ =
	     slave_2_0_bFifo_EMPTY_N &&
	     slave_2_0_cycles - slave_2_0_bFifo_D_OUT[69:6] >= 64'd150 &&
	     lMemServer_writer_writers_0_tag_gen_inited &&
	     lMemServer_writer_writers_0_tag_gen_retFifo_FULL_N ;
  assign lMemServer_writer_writers_0_tag_gen_retFifo_DEQ =
	     lMemServer_writer_writers_0_tag_gen_retFifo_EMPTY_N ;
  assign lMemServer_writer_writers_0_tag_gen_retFifo_CLR = 1'b0 ;

  // submodule lMemServer_writer_writers_0_tag_gen_tagFifo
  assign lMemServer_writer_writers_0_tag_gen_tagFifo_D_IN =
	     lMemServer_writer_writers_0_tag_gen_head_ptr ;
  assign lMemServer_writer_writers_0_tag_gen_tagFifo_ENQ =
	     lMemServer_writer_writers_0_tag_gen_counter_dec_wire_whas ;
  assign lMemServer_writer_writers_0_tag_gen_tagFifo_DEQ =
	     WILL_FIRE_RL_lMemServer_writer_writers_0_checkMmuResp ;
  assign lMemServer_writer_writers_0_tag_gen_tagFifo_CLR = 1'b0 ;

  // submodule sink_0
  assign sink_0_EN_beat = sink_0_RDY_beat && top_RDY_requests_0_message_enq ;

  // submodule sink_1
  assign sink_1_EN_beat =
	     sink_1_RDY_beat && lMMURequestInputNoc_fifoMsgSink_FULL_N ;

  // submodule sink_2
  assign sink_2_EN_beat =
	     sink_2_RDY_beat && lMemServerRequestInputNoc_fifoMsgSink_FULL_N ;

  // submodule slave_2_0_bFifo
  assign slave_2_0_bFifo_D_IN =
	     { slave_2_0_cycles, slave_2_0_writeDelayFifo_D_OUT[5:0] } ;
  assign slave_2_0_bFifo_ENQ =
	     WILL_FIRE_RL_mkConnectionGetPut_3 &&
	     writeLen___2__h97518 == 10'd1 ;
  assign slave_2_0_bFifo_DEQ =
	     slave_2_0_bFifo_EMPTY_N &&
	     slave_2_0_cycles - slave_2_0_bFifo_D_OUT[69:6] >= 64'd150 &&
	     lMemServer_writer_writers_0_tag_gen_inited &&
	     lMemServer_writer_writers_0_tag_gen_retFifo_FULL_N ;
  assign slave_2_0_bFifo_CLR = 1'b0 ;

  // submodule slave_2_0_readDelayFifo
  assign slave_2_0_readDelayFifo_D_IN =
	     { slave_2_0_cycles,
	       lMemServer_reader_readers_0_serverRequest_D_OUT[46:7],
	       lMemServer_reader_readers_0_serverRequest_D_OUT[62:53],
	       lMemServer_reader_readers_0_serverRequest_D_OUT[6:1] } ;
  assign slave_2_0_readDelayFifo_ENQ = WILL_FIRE_RL_mkConnectionGetPut ;
  assign slave_2_0_readDelayFifo_DEQ =
	     WILL_FIRE_RL_slave_2_0_read_rule && readLen__h94689 == 10'd1 ;
  assign slave_2_0_readDelayFifo_CLR = 1'b0 ;

  // submodule slave_2_0_reqs
  assign slave_2_0_reqs_D_IN = 8'h0 ;
  assign slave_2_0_reqs_ENQ = 1'b0 ;
  assign slave_2_0_reqs_DEQ = 1'b0 ;
  assign slave_2_0_reqs_CLR = 1'b0 ;

  // submodule slave_2_0_rw_rws_0
  assign slave_2_0_rw_rws_0_idreturn_id = 32'h0 ;
  assign slave_2_0_rw_rws_0_init_handle = 32'h0 ;
  assign slave_2_0_rw_rws_0_init_id = 32'h0 ;
  assign slave_2_0_rw_rws_0_init_size = 32'h0 ;
  assign slave_2_0_rw_rws_0_initfd_fd = 32'h0 ;
  assign slave_2_0_rw_rws_0_initfd_id = 32'h0 ;
  assign slave_2_0_rw_rws_0_readrequest_addr = addr__h94701 ;
  assign slave_2_0_rw_rws_0_readrequest_handle =
	     { 24'd0, slave_2_0_readDelayFifo_D_OUT[55:48] } ;
  assign slave_2_0_rw_rws_0_write32_addr = addr__h97530 ;
  assign slave_2_0_rw_rws_0_write32_byteenable = 4'd15 ;
  assign slave_2_0_rw_rws_0_write32_data =
	     lMemServer_writer_writers_0_memDataFifo_D_OUT[38:7] ;
  assign slave_2_0_rw_rws_0_write32_handle =
	     { 24'd0, slave_2_0_writeDelayFifo_D_OUT[55:48] } ;
  assign slave_2_0_rw_rws_0_en_init = 1'b0 ;
  assign slave_2_0_rw_rws_0_en_initfd = 1'b0 ;
  assign slave_2_0_rw_rws_0_en_idreturn = 1'b0 ;
  assign slave_2_0_rw_rws_0_en_write32 = WILL_FIRE_RL_mkConnectionGetPut_3 ;
  assign slave_2_0_rw_rws_0_en_readrequest =
	     WILL_FIRE_RL_slave_2_0_read_rule ;
  assign slave_2_0_rw_rws_0_en_readresponse =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways ;

  // submodule slave_2_0_rw_rws_1
  assign slave_2_0_rw_rws_1_idreturn_id = 32'h0 ;
  assign slave_2_0_rw_rws_1_init_handle = 32'h0 ;
  assign slave_2_0_rw_rws_1_init_id = 32'h0 ;
  assign slave_2_0_rw_rws_1_init_size = 32'h0 ;
  assign slave_2_0_rw_rws_1_initfd_fd = 32'h0 ;
  assign slave_2_0_rw_rws_1_initfd_id = 32'h0 ;
  assign slave_2_0_rw_rws_1_readrequest_addr = addr__h94701 + 32'd4 ;
  assign slave_2_0_rw_rws_1_readrequest_handle =
	     slave_2_0_rw_rws_0_readrequest_handle ;
  assign slave_2_0_rw_rws_1_write32_addr = addr__h97530 + 32'd4 ;
  assign slave_2_0_rw_rws_1_write32_byteenable = 4'd15 ;
  assign slave_2_0_rw_rws_1_write32_data =
	     lMemServer_writer_writers_0_memDataFifo_D_OUT[70:39] ;
  assign slave_2_0_rw_rws_1_write32_handle =
	     slave_2_0_rw_rws_0_write32_handle ;
  assign slave_2_0_rw_rws_1_en_init = 1'b0 ;
  assign slave_2_0_rw_rws_1_en_initfd = 1'b0 ;
  assign slave_2_0_rw_rws_1_en_idreturn = 1'b0 ;
  assign slave_2_0_rw_rws_1_en_write32 = WILL_FIRE_RL_mkConnectionGetPut_3 ;
  assign slave_2_0_rw_rws_1_en_readrequest =
	     WILL_FIRE_RL_slave_2_0_read_rule ;
  assign slave_2_0_rw_rws_1_en_readresponse =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways ;

  // submodule slave_2_0_rw_rws_2
  assign slave_2_0_rw_rws_2_idreturn_id = 32'h0 ;
  assign slave_2_0_rw_rws_2_init_handle = 32'h0 ;
  assign slave_2_0_rw_rws_2_init_id = 32'h0 ;
  assign slave_2_0_rw_rws_2_init_size = 32'h0 ;
  assign slave_2_0_rw_rws_2_initfd_fd = 32'h0 ;
  assign slave_2_0_rw_rws_2_initfd_id = 32'h0 ;
  assign slave_2_0_rw_rws_2_readrequest_addr = addr__h94701 + 32'd8 ;
  assign slave_2_0_rw_rws_2_readrequest_handle =
	     slave_2_0_rw_rws_0_readrequest_handle ;
  assign slave_2_0_rw_rws_2_write32_addr = addr__h97530 + 32'd8 ;
  assign slave_2_0_rw_rws_2_write32_byteenable = 4'd15 ;
  assign slave_2_0_rw_rws_2_write32_data =
	     lMemServer_writer_writers_0_memDataFifo_D_OUT[102:71] ;
  assign slave_2_0_rw_rws_2_write32_handle =
	     slave_2_0_rw_rws_0_write32_handle ;
  assign slave_2_0_rw_rws_2_en_init = 1'b0 ;
  assign slave_2_0_rw_rws_2_en_initfd = 1'b0 ;
  assign slave_2_0_rw_rws_2_en_idreturn = 1'b0 ;
  assign slave_2_0_rw_rws_2_en_write32 = WILL_FIRE_RL_mkConnectionGetPut_3 ;
  assign slave_2_0_rw_rws_2_en_readrequest =
	     WILL_FIRE_RL_slave_2_0_read_rule ;
  assign slave_2_0_rw_rws_2_en_readresponse =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways ;

  // submodule slave_2_0_rw_rws_3
  assign slave_2_0_rw_rws_3_idreturn_id = 32'h0 ;
  assign slave_2_0_rw_rws_3_init_handle = 32'h0 ;
  assign slave_2_0_rw_rws_3_init_id = 32'h0 ;
  assign slave_2_0_rw_rws_3_init_size = 32'h0 ;
  assign slave_2_0_rw_rws_3_initfd_fd = 32'h0 ;
  assign slave_2_0_rw_rws_3_initfd_id = 32'h0 ;
  assign slave_2_0_rw_rws_3_readrequest_addr = addr__h94701 + 32'd12 ;
  assign slave_2_0_rw_rws_3_readrequest_handle =
	     slave_2_0_rw_rws_0_readrequest_handle ;
  assign slave_2_0_rw_rws_3_write32_addr = addr__h97530 + 32'd12 ;
  assign slave_2_0_rw_rws_3_write32_byteenable = 4'd15 ;
  assign slave_2_0_rw_rws_3_write32_data =
	     lMemServer_writer_writers_0_memDataFifo_D_OUT[134:103] ;
  assign slave_2_0_rw_rws_3_write32_handle =
	     slave_2_0_rw_rws_0_write32_handle ;
  assign slave_2_0_rw_rws_3_en_init = 1'b0 ;
  assign slave_2_0_rw_rws_3_en_initfd = 1'b0 ;
  assign slave_2_0_rw_rws_3_en_idreturn = 1'b0 ;
  assign slave_2_0_rw_rws_3_en_write32 = WILL_FIRE_RL_mkConnectionGetPut_3 ;
  assign slave_2_0_rw_rws_3_en_readrequest =
	     WILL_FIRE_RL_slave_2_0_read_rule ;
  assign slave_2_0_rw_rws_3_en_readresponse =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways ;

  // submodule slave_2_0_taglastfifo
  assign slave_2_0_taglastfifo_D_IN =
	     { slave_2_0_readDelayFifo_D_OUT[5:0],
	       readLen__h94689 == 10'd1 } ;
  assign slave_2_0_taglastfifo_ENQ = WILL_FIRE_RL_slave_2_0_read_rule ;
  assign slave_2_0_taglastfifo_DEQ =
	     WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways ;
  assign slave_2_0_taglastfifo_CLR = 1'b0 ;

  // submodule slave_2_0_writeDelayFifo
  assign slave_2_0_writeDelayFifo_D_IN =
	     { slave_2_0_cycles,
	       lMemServer_writer_writers_0_serverRequest_D_OUT[46:7],
	       lMemServer_writer_writers_0_serverRequest_D_OUT[62:53],
	       lMemServer_writer_writers_0_serverRequest_D_OUT[6:1] } ;
  assign slave_2_0_writeDelayFifo_ENQ =
	     lMemServer_writer_writers_0_serverRequest_EMPTY_N &&
	     lMemServer_writer_writers_0_serverProcessing_FULL_N &&
	     slave_2_0_writeDelayFifo_FULL_N ;
  assign slave_2_0_writeDelayFifo_DEQ =
	     WILL_FIRE_RL_mkConnectionGetPut_3 &&
	     writeLen___2__h97518 == 10'd1 ;
  assign slave_2_0_writeDelayFifo_CLR = 1'b0 ;

  // submodule tmp_1_0
  assign tmp_1_0_beat = top_indications_0_message_first ;
  assign tmp_1_0_en_beat =
	     top_RDY_indications_0_message_first &&
	     top_RDY_indications_0_message_deq ;

  // submodule tmp_1_1
  assign tmp_1_1_beat = lMMUIndicationOutputNoc_fifoMsgSource_D_OUT ;
  assign tmp_1_1_en_beat = lMMUIndicationOutputNoc_fifoMsgSource_EMPTY_N ;

  // submodule tmp_1_2
  assign tmp_1_2_beat = lMemServerIndicationOutputNoc_fifoMsgSource_D_OUT ;
  assign tmp_1_2_en_beat =
	     lMemServerIndicationOutputNoc_fifoMsgSource_EMPTY_N ;

  // submodule top
  assign top_readers_0_readData_put =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_EMPTY_N ?
	       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_D_OUT :
	       lMemServer_reader_readers_0_clientData_memory_DOB ;
  assign top_readers_1_readData_put =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_EMPTY_N ?
	       lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_D_OUT :
	       lMemServer_reader_readers_0_clientData_memory_DOB ;
  assign top_requests_0_message_enq_v = sink_0_beat ;
  assign top_writers_0_writeDone_put =
	     lMemServer_writer_writers_0_clientResponse_D_OUT[6:1] ;
  assign top_writers_1_writeDone_put =
	     lMemServer_writer_writers_0_clientResponse_D_OUT[6:1] ;
  assign top_EN_requests_0_message_enq =
	     sink_0_RDY_beat && top_RDY_requests_0_message_enq ;
  assign top_EN_indications_0_message_deq =
	     top_RDY_indications_0_message_first &&
	     top_RDY_indications_0_message_deq ;
  assign top_EN_readers_0_readReq_get = WILL_FIRE_RL_lMemServer_0_mr_request ;
  assign top_EN_readers_0_readData_put =
	     WILL_FIRE_RL_lMemServer_0_mr_response ;
  assign top_EN_readers_1_readReq_get = WILL_FIRE_RL_lMemServer_1_mr_request ;
  assign top_EN_readers_1_readData_put =
	     WILL_FIRE_RL_lMemServer_1_mr_response ;
  assign top_EN_writers_0_writeReq_get =
	     WILL_FIRE_RL_lMemServer_1_0_mw_request ;
  assign top_EN_writers_0_writeData_get =
	     top_RDY_writers_0_writeData_get &&
	     lMemServer_writer_writers_0_clientWriteData_0_FULL_N ;
  assign top_EN_writers_0_writeDone_put =
	     !lMemServer_writer_writers_0_clientResponse_D_OUT[0] &&
	     top_RDY_writers_0_writeDone_put &&
	     lMemServer_writer_writers_0_clientResponse_EMPTY_N ;
  assign top_EN_writers_1_writeReq_get =
	     WILL_FIRE_RL_lMemServer_1_1_mw_request ;
  assign top_EN_writers_1_writeData_get =
	     top_RDY_writers_1_writeData_get &&
	     lMemServer_writer_writers_0_clientWriteData_1_FULL_N ;
  assign top_EN_writers_1_writeDone_put =
	     lMemServer_writer_writers_0_clientResponse_D_OUT[0] &&
	     top_RDY_writers_1_writeDone_put &&
	     lMemServer_writer_writers_0_clientResponse_EMPTY_N ;

  // remaining internal signals
  assign CASE_lMMUIndicationOutputNoc_methodIdReg_176_0_ETC___d1185 =
	     CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q4 &&
	     CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q5 ;
  assign IF_lMemServerIndicationOutput_portalIfc_indica_ETC___d1242 =
	     lMemServerIndicationOutput_portalIfc_indications_1_notEmpty ?
	       8'd1 :
	       (lMemServerIndicationOutput_portalIfc_indications_2_notEmpty ?
		  8'd2 :
		  (lMemServerIndicationOutput_portalIfc_indications_3_notEmpty ?
		     8'd3 :
		     8'd255)) ;
  assign IF_lMemServerRequestInput_pipes_memoryTraffic__ETC___d1149 =
	     lMemServerRequestInput_pipes_memoryTraffic_PipeOut_first ?
	       lMemServer_writer_trafficFSM_abort_whas__97_AN_ETC___d953 &&
	       !lMemServer_writer_trafficFSM_start_reg :
	       lMemServer_reader_trafficFSM_abort_whas__19_AN_ETC___d577 &&
	       !lMemServer_reader_trafficFSM_start_reg ;
  assign IF_lMemServerRequestInput_pipes_stateDbg_PipeO_ETC___d1138 =
	     lMemServerRequestInput_pipes_stateDbg_PipeOut_first ?
	       lMemServer_writer_dbgFSM_abort_whas__29_AND_lM_ETC___d891 &&
	       !lMemServer_writer_dbgFSM_start_reg :
	       lMemServer_reader_dbgFSM_abort_whas__51_AND_lM_ETC___d513 &&
	       !lMemServer_reader_dbgFSM_start_reg ;
  assign IF_lMemServer_reader_readers_0_serverProcessin_ETC__q1 =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_EMPTY_N ?
	       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_D_OUT[17:8] :
	       lMemServer_reader_readers_0_serverProcessing_memory_DOB[17:8] ;
  assign IF_lMemServer_reader_readers_0_serverProcessin_ETC__q2 =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_EMPTY_N ?
	       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_D_OUT[23:18] :
	       lMemServer_reader_readers_0_serverProcessing_memory_DOB[23:18] ;
  assign IF_lMemServer_writer_writers_0_firstReg_75_THE_ETC___d800 =
	     lMemServer_writer_writers_0_firstReg ?
	       lMemServer_writer_writers_0_serverProcessing_D_OUT[0] :
	       lMemServer_writer_writers_0_lastReg ;
  assign NOT_SEL_ARR_NOT_lMemServer_writer_writers_0_ki_ETC___d779 =
	     (!SEL_ARR_NOT_lMemServer_writer_writers_0_killv__ETC___d768 ||
	      CASE_lMemServer_writer_writers_0_serverProcess_ETC__q6) &&
	     (!lMemServer_writer_writers_0_firstReg ||
	      (lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt ^
	       3'h4) <
	      3'd7) ;
  assign _theResult____h89323 =
	     (lMMURequestInputNoc_fifoMsgSink_D_OUT[7:0] == 8'd1) ?
	       lMMURequestInputNoc_fifoMsgSink_D_OUT[7:0] :
	       messageWords__h89322 ;
  assign _theResult____h91163 =
	     (lMemServerRequestInputNoc_fifoMsgSink_D_OUT[7:0] == 8'd1) ?
	       lMemServerRequestInputNoc_fifoMsgSink_D_OUT[7:0] :
	       messageWords__h91162 ;
  assign addr__h94701 =
	     slave_2_0_readDelayFifo_D_OUT[47:16] + readOffset__h94690 ;
  assign addr__h97530 =
	     slave_2_0_writeDelayFifo_D_OUT[47:16] + writeOffset__h97519 ;
  assign burstLen__h52739 =
	     lMemServer_writer_writers_0_firstReg ?
	       y_avValue_snd__h52730 :
	       lMemServer_writer_writers_0_burstReg ;
  assign client__h14064 =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_EMPTY_N ?
	       lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_D_OUT[1] :
	       lMemServer_reader_readers_0_serverProcessing_memory_DOB[1] ;
  assign cnt__h14065 =
	     { 4'd0,
	       IF_lMemServer_reader_readers_0_serverProcessin_ETC__q1[9:4] } ;
  assign lMemServer_reader_dbgFSM_abort_whas__51_AND_lM_ETC___d513 =
	     (lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd0 ||
	      lMemServer_reader_dbgPtr != 8'd0 &&
	      lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd1 ||
	      lMemServer_reader_dbgPtr != 8'd0 &&
	      lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd3) &&
	     (!lMemServer_reader_dbgFSM_start_reg_1 ||
	      lMemServer_reader_dbgFSM_state_fired) ;
  assign lMemServer_reader_readers_0_clientData_serverA_ETC___d236 =
	     lMemServer_reader_readers_0_clientData_serverAdapterB_cnt +
	     (lMemServer_reader_readers_0_clientData_serverAdapterB_cnt_1_whas ?
		3'd1 :
		3'd0) +
	     (lMemServer_reader_readers_0_clientData_serverAdapterB_outData_dequeueing_whas ?
		3'd7 :
		3'd0) ;
  assign lMemServer_reader_readers_0_clientData_serverA_ETC___d356 =
	     (lMemServer_reader_readers_0_clientData_serverAdapterA_cnt ^
	      3'h4) <
	     3'd7 &&
	     (!lMemServer_reader_readers_0_clientBurstLen_D_OUT_1[10] ||
	      lMemServer_reader_readers_0_tag_gen_inited &&
	      lMemServer_reader_readers_0_tag_gen_retFifo_FULL_N) ;
  assign lMemServer_reader_readers_0_clientRequest_i_no_ETC___d963 =
	     lMemServer_reader_readers_0_clientRequest_FULL_N &&
	     lMMU_mmu_RDY_addr_0_request_put &&
	     lMemServer_reader_mmu_servers_0_tokFifo_FULL_N &&
	     lMemServer_reader_readers_0_dmaErrorFifo_FULL_N ;
  assign lMemServer_reader_readers_0_serverProcessing_s_ETC___d140 =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt +
	     (lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt_1_whas ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_lMemServer_reader_readers_0_complete_burst1a ?
		3'd7 :
		3'd0) ;
  assign lMemServer_reader_readers_0_serverProcessing_s_ETC___d378 =
	     (lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt ^
	      3'h4) <
	     3'd7 ;
  assign lMemServer_reader_readers_0_serverProcessing_s_ETC___d91 =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt +
	     (WILL_FIRE_RL_lMemServer_reader_readers_0_serverProcessing_serverAdapterA_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_lMemServer_reader_readers_0_read_data ?
		3'd7 :
		3'd0) ;
  assign lMemServer_reader_readers_0_serverTag_i_notEmp_ETC___d407 =
	     lMemServer_reader_readers_0_serverTag_EMPTY_N &&
	     (!SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d401 ||
	      lMemServer_reader_readers_0_clientSelect_FULL_N &&
	      (lMemServer_reader_readers_0_clientData_serverAdapterB_cnt ^
	       3'h4) <
	      3'd7) ;
  assign lMemServer_reader_readers_0_tag_gen_counter_cn_ETC___d272 =
	     lMemServer_reader_readers_0_tag_gen_counter_cnt +
	     (MUX_lMemServer_reader_readers_0_tag_gen_comp_state_write_1__SEL_1 ?
		6'd1 :
		6'd0) -
	     (lMemServer_reader_readers_0_tag_gen_counter_dec_wire_whas ?
		6'd1 :
		6'd0) ;
  assign lMemServer_reader_readers_0_tag_gen_tags_port1_ETC___d277 =
	     t__h11265[lMemServer_reader_readers_0_tag_gen_tail_ptr] ;
  assign lMemServer_reader_trafficFSM_abort_whas__19_AN_ETC___d577 =
	     (lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd0 ||
	      lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd5) &&
	     (!lMemServer_reader_trafficFSM_start_reg_1 ||
	      lMemServer_reader_trafficFSM_state_fired) ;
  assign lMemServer_writer_dbgFSM_abort_whas__29_AND_lM_ETC___d891 =
	     (lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd0 ||
	      lMemServer_writer_dbgPtr != 8'd0 &&
	      lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd1 ||
	      lMemServer_writer_dbgPtr != 8'd0 &&
	      lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd3) &&
	     (!lMemServer_writer_dbgFSM_start_reg_1 ||
	      lMemServer_writer_dbgFSM_state_fired) ;
  assign lMemServer_writer_trafficFSM_abort_whas__97_AN_ETC___d953 =
	     (lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd0 ||
	      lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd5) &&
	     (!lMemServer_writer_trafficFSM_start_reg_1 ||
	      lMemServer_writer_trafficFSM_state_fired) ;
  assign lMemServer_writer_writers_0_clientRequest_i_no_ETC___d1034 =
	     lMemServer_writer_writers_0_clientRequest_FULL_N &&
	     lMMU_mmu_RDY_addr_1_request_put &&
	     lMemServer_writer_mmu_servers_0_tokFifo_FULL_N &&
	     lMemServer_writer_writers_0_dmaErrorFifo_FULL_N ;
  assign lMemServer_writer_writers_0_respFifos_serverAd_ETC___d648 =
	     lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt +
	     (WILL_FIRE_RL_lMemServer_writer_writers_0_respFifos_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_dequeueing_whas ?
		3'd7 :
		3'd0) ;
  assign lMemServer_writer_writers_0_tag_gen_counter_cn_ETC___d684 =
	     lMemServer_writer_writers_0_tag_gen_counter_cnt +
	     (MUX_lMemServer_writer_writers_0_tag_gen_comp_state_write_1__SEL_1 ?
		6'd1 :
		6'd0) -
	     (lMemServer_writer_writers_0_tag_gen_counter_dec_wire_whas ?
		6'd1 :
		6'd0) ;
  assign lMemServer_writer_writers_0_tag_gen_tags_port1_ETC___d689 =
	     t__h50335[lMemServer_writer_writers_0_tag_gen_tail_ptr] ;
  assign messageWords__h89322 =
	     lMMURequestInputNoc_fifoMsgSink_D_OUT[7:0] - 8'd1 ;
  assign messageWords__h91162 =
	     lMemServerRequestInputNoc_fifoMsgSink_D_OUT[7:0] - 8'd1 ;
  assign methodNumber__h88764 = { 8'd0, readyChannel__h88347 } ;
  assign methodNumber__h90584 = { 8'd0, readyChannel__h90073 } ;
  assign numWords__h88720 =
	     { 5'd0, lMMUIndicationOutput_portalIfc_messageSize_size[15:5] } +
	     roundup__h88719 ;
  assign numWords__h90540 =
	     { 5'd0,
	       lMemServerIndicationOutput_portalIfc_messageSize_size[15:5] } +
	     roundup__h90539 ;
  assign off__h87160 =
	     { 8'd0,
	       lMemServerRequestInput_pipes_addrTrans_PipeOut_first[31:0] } ;
  assign readLen__h94689 =
	     (slave_2_0_readLenReg == 10'd0) ?
	       y_avValue_fst__h94682 :
	       slave_2_0_readLenReg ;
  assign readOffset__h94690 =
	     (slave_2_0_readLenReg == 10'd0) ?
	       32'd0 :
	       slave_2_0_readOffsetReg ;
  assign readyChannel__h88347 =
	     lMMUIndicationOutput_portalIfc_indications_0_notEmpty ?
	       8'd0 :
	       (lMMUIndicationOutput_portalIfc_indications_1_notEmpty ?
		  8'd1 :
		  (lMMUIndicationOutput_portalIfc_indications_2_notEmpty ?
		     8'd2 :
		     8'd255)) ;
  assign readyChannel__h90073 =
	     lMemServerIndicationOutput_portalIfc_indications_0_notEmpty ?
	       8'd0 :
	       IF_lMemServerIndicationOutput_portalIfc_indica_ETC___d1242 ;
  assign roundup__h88719 =
	     (lMMUIndicationOutput_portalIfc_messageSize_size[4:0] == 5'd0) ?
	       16'd0 :
	       16'd1 ;
  assign roundup__h90539 =
	     (lMemServerIndicationOutput_portalIfc_messageSize_size[4:0] ==
	      5'd0) ?
	       16'd0 :
	       16'd1 ;
  assign t__h11265 =
	     lMemServer_reader_readers_0_tag_gen_retFifo_EMPTY_N ?
	       lMemServer_reader_readers_0_tag_gen_tags_port0__write_1 :
	       lMemServer_reader_readers_0_tag_gen_tags ;
  assign t__h50335 =
	     lMemServer_writer_writers_0_tag_gen_retFifo_EMPTY_N ?
	       lMemServer_writer_writers_0_tag_gen_tags_port0__write_1 :
	       lMemServer_writer_writers_0_tag_gen_tags ;
  assign tag__h13211 =
	     lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_EMPTY_N ?
	       lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_D_OUT[23:18] :
	       lMemServer_reader_readers_0_serverProcessing_memory_DOA[23:18] ;
  assign top_readers_0_readReq_get_65_BITS_71_TO_56_66__ETC___d967 =
	     top_readers_0_readReq_get[71:56] < 16'd32 ;
  assign top_readers_1_readReq_get_005_BITS_71_TO_56_00_ETC___d1007 =
	     top_readers_1_readReq_get[71:56] < 16'd32 ;
  assign top_writers_0_writeReq_get_036_BITS_71_TO_56_0_ETC___d1038 =
	     top_writers_0_writeReq_get[71:56] < 16'd32 ;
  assign top_writers_1_writeReq_get_076_BITS_71_TO_56_0_ETC___d1078 =
	     top_writers_1_writeReq_get[71:56] < 16'd32 ;
  assign v__h43658 = { 32'd0, lMemServer_reader_readers_0_beatCount } ;
  assign v__h81861 = { 32'd0, lMemServer_writer_writers_0_beatCount } ;
  assign v__h95928 =
	     { slave_2_0_rw_rws_3_readresponse_data,
	       slave_2_0_rw_rws_2_readresponse_data,
	       slave_2_0_rw_rws_1_readresponse_data,
	       slave_2_0_rw_rws_0_readresponse_data } ;
  assign writeLen___2__h97518 =
	     (slave_2_0_writeLenReg == 10'd0) ?
	       y_avValue_snd_fst__h97807 :
	       slave_2_0_writeLenReg ;
  assign writeOffset__h97519 =
	     (slave_2_0_writeLenReg == 10'd0) ?
	       32'd0 :
	       slave_2_0_writeOffsetReg ;
  assign x__h11124 =
	     32'd1 << lMemServer_reader_readers_0_tag_gen_retFifo_D_OUT ;
  assign x__h11292 = 32'd1 << lMemServer_reader_readers_0_tag_gen_head_ptr ;
  assign x__h12884 =
	     { 4'd0,
	       lMemServer_reader_readers_0_clientRequest_D_OUT[16:11] } ;
  assign x__h13625 =
	     lMemServer_reader_readers_0_clientBurstLen_D_OUT_1[9:0] - 10'd1 ;
  assign x__h50194 =
	     32'd1 << lMemServer_writer_writers_0_tag_gen_retFifo_D_OUT ;
  assign x__h50362 = 32'd1 << lMemServer_writer_writers_0_tag_gen_head_ptr ;
  assign x__h88873 = numWords__h88720 + 16'd1 ;
  assign x__h90693 = numWords__h90540 + 16'd1 ;
  assign x_data__h52954 =
	     SEL_ARR_NOT_lMemServer_writer_writers_0_killv__ETC___d768 ?
	       CASE_lMemServer_writer_writers_0_serverProcess_ETC__q3 :
	       128'd0 ;
  assign x_rename_tag__h12914 =
	     { 1'd0, lMemServer_reader_readers_0_tag_gen_tagFifo_D_OUT } ;
  assign x_rename_tag__h51628 =
	     { 1'd0, lMemServer_writer_writers_0_tag_gen_tagFifo_D_OUT } ;
  assign y__h11144 = ~x__h11124 ;
  assign y__h50214 = ~x__h50194 ;
  assign y_avValue_fst__h94682 =
	     { 4'd0, slave_2_0_readDelayFifo_D_OUT[15:10] } ;
  assign y_avValue_snd__h52730 =
	     { 4'd0,
	       lMemServer_writer_writers_0_serverProcessing_D_OUT[17:12] } ;
  assign y_avValue_snd_fst__h97807 =
	     { 4'd0, slave_2_0_writeDelayFifo_D_OUT[15:10] } ;
  always@(IF_lMemServer_reader_readers_0_serverProcessin_ETC__q2 or
	  lMemServer_reader_readers_0_killv_0 or
	  lMemServer_reader_readers_0_killv_1 or
	  lMemServer_reader_readers_0_killv_2 or
	  lMemServer_reader_readers_0_killv_3)
  begin
    case (IF_lMemServer_reader_readers_0_serverProcessin_ETC__q2[5:4])
      2'd0:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d401 =
	      !lMemServer_reader_readers_0_killv_0;
      2'd1:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d401 =
	      !lMemServer_reader_readers_0_killv_1;
      2'd2:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d401 =
	      !lMemServer_reader_readers_0_killv_2;
      2'd3:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d401 =
	      !lMemServer_reader_readers_0_killv_3;
    endcase
  end
  always@(lMemServer_reader_readers_0_compTileReg or
	  lMemServer_reader_readers_0_killv_0 or
	  lMemServer_reader_readers_0_killv_1 or
	  lMemServer_reader_readers_0_killv_2 or
	  lMemServer_reader_readers_0_killv_3)
  begin
    case (lMemServer_reader_readers_0_compTileReg)
      2'd0:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d427 =
	      !lMemServer_reader_readers_0_killv_0;
      2'd1:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d427 =
	      !lMemServer_reader_readers_0_killv_1;
      2'd2:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d427 =
	      !lMemServer_reader_readers_0_killv_2;
      2'd3:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_killv__ETC___d427 =
	      !lMemServer_reader_readers_0_killv_3;
    endcase
  end
  always@(lMemServer_writer_writers_0_serverProcessing_D_OUT or
	  lMemServer_writer_writers_0_killv_0 or
	  lMemServer_writer_writers_0_killv_1 or
	  lMemServer_writer_writers_0_killv_2 or
	  lMemServer_writer_writers_0_killv_3)
  begin
    case (lMemServer_writer_writers_0_serverProcessing_D_OUT[23:22])
      2'd0:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_killv__ETC___d768 =
	      !lMemServer_writer_writers_0_killv_0;
      2'd1:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_killv__ETC___d768 =
	      !lMemServer_writer_writers_0_killv_1;
      2'd2:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_killv__ETC___d768 =
	      !lMemServer_writer_writers_0_killv_2;
      2'd3:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_killv__ETC___d768 =
	      !lMemServer_writer_writers_0_killv_3;
    endcase
  end
  always@(lMemServer_writer_writers_0_serverProcessing_D_OUT or
	  lMemServer_writer_writers_0_clientWriteData_0_D_OUT or
	  lMemServer_writer_writers_0_clientWriteData_1_D_OUT)
  begin
    case (lMemServer_writer_writers_0_serverProcessing_D_OUT[1])
      1'd0:
	  CASE_lMemServer_writer_writers_0_serverProcess_ETC__q3 =
	      lMemServer_writer_writers_0_clientWriteData_0_D_OUT[134:7];
      1'd1:
	  CASE_lMemServer_writer_writers_0_serverProcess_ETC__q3 =
	      lMemServer_writer_writers_0_clientWriteData_1_D_OUT[134:7];
    endcase
  end
  always@(top_readers_0_readReq_get or
	  lMemServer_reader_readers_0_stopv_0 or
	  lMemServer_reader_readers_0_stopv_1 or
	  lMemServer_reader_readers_0_stopv_2 or
	  lMemServer_reader_readers_0_stopv_3)
  begin
    case (top_readers_0_readReq_get[5:4])
      2'd0:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d986 =
	      !lMemServer_reader_readers_0_stopv_0;
      2'd1:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d986 =
	      !lMemServer_reader_readers_0_stopv_1;
      2'd2:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d986 =
	      !lMemServer_reader_readers_0_stopv_2;
      2'd3:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d986 =
	      !lMemServer_reader_readers_0_stopv_3;
    endcase
  end
  always@(top_readers_1_readReq_get or
	  lMemServer_reader_readers_0_stopv_0 or
	  lMemServer_reader_readers_0_stopv_1 or
	  lMemServer_reader_readers_0_stopv_2 or
	  lMemServer_reader_readers_0_stopv_3)
  begin
    case (top_readers_1_readReq_get[5:4])
      2'd0:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d1017 =
	      !lMemServer_reader_readers_0_stopv_0;
      2'd1:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d1017 =
	      !lMemServer_reader_readers_0_stopv_1;
      2'd2:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d1017 =
	      !lMemServer_reader_readers_0_stopv_2;
      2'd3:
	  SEL_ARR_NOT_lMemServer_reader_readers_0_stopv__ETC___d1017 =
	      !lMemServer_reader_readers_0_stopv_3;
    endcase
  end
  always@(top_writers_0_writeReq_get or
	  lMemServer_writer_writers_0_stopv_0 or
	  lMemServer_writer_writers_0_stopv_1 or
	  lMemServer_writer_writers_0_stopv_2 or
	  lMemServer_writer_writers_0_stopv_3)
  begin
    case (top_writers_0_writeReq_get[5:4])
      2'd0:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1057 =
	      !lMemServer_writer_writers_0_stopv_0;
      2'd1:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1057 =
	      !lMemServer_writer_writers_0_stopv_1;
      2'd2:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1057 =
	      !lMemServer_writer_writers_0_stopv_2;
      2'd3:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1057 =
	      !lMemServer_writer_writers_0_stopv_3;
    endcase
  end
  always@(lMMUIndicationOutputNoc_methodIdReg or
	  lMMUIndicationOutput_RDY_portalIfc_indications_0_deq or
	  lMMUIndicationOutput_RDY_portalIfc_indications_1_deq or
	  lMMUIndicationOutput_RDY_portalIfc_indications_2_deq)
  begin
    case (lMMUIndicationOutputNoc_methodIdReg)
      8'd0:
	  CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q4 =
	      lMMUIndicationOutput_RDY_portalIfc_indications_0_deq;
      8'd1:
	  CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q4 =
	      lMMUIndicationOutput_RDY_portalIfc_indications_1_deq;
      8'd2:
	  CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q4 =
	      lMMUIndicationOutput_RDY_portalIfc_indications_2_deq;
      default: CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q4 = 1'd1;
    endcase
  end
  always@(lMMUIndicationOutputNoc_methodIdReg or
	  lMMUIndicationOutput_RDY_portalIfc_indications_0_first or
	  lMMUIndicationOutput_RDY_portalIfc_indications_1_first or
	  lMMUIndicationOutput_RDY_portalIfc_indications_2_first)
  begin
    case (lMMUIndicationOutputNoc_methodIdReg)
      8'd0:
	  CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q5 =
	      lMMUIndicationOutput_RDY_portalIfc_indications_0_first;
      8'd1:
	  CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q5 =
	      lMMUIndicationOutput_RDY_portalIfc_indications_1_first;
      8'd2:
	  CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q5 =
	      lMMUIndicationOutput_RDY_portalIfc_indications_2_first;
      default: CASE_lMMUIndicationOutputNoc_methodIdReg_0_lMM_ETC__q5 = 1'd1;
    endcase
  end
  always@(top_writers_1_writeReq_get or
	  lMemServer_writer_writers_0_stopv_0 or
	  lMemServer_writer_writers_0_stopv_1 or
	  lMemServer_writer_writers_0_stopv_2 or
	  lMemServer_writer_writers_0_stopv_3)
  begin
    case (top_writers_1_writeReq_get[5:4])
      2'd0:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1088 =
	      !lMemServer_writer_writers_0_stopv_0;
      2'd1:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1088 =
	      !lMemServer_writer_writers_0_stopv_1;
      2'd2:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1088 =
	      !lMemServer_writer_writers_0_stopv_2;
      2'd3:
	  SEL_ARR_NOT_lMemServer_writer_writers_0_stopv__ETC___d1088 =
	      !lMemServer_writer_writers_0_stopv_3;
    endcase
  end
  always@(lMMURequestInputNoc_methodIdReg or
	  lMMURequestInput_RDY_portalIfc_requests_0_enq or
	  lMMURequestInput_RDY_portalIfc_requests_1_enq or
	  lMMURequestInput_RDY_portalIfc_requests_2_enq or
	  lMMURequestInput_RDY_portalIfc_requests_3_enq or
	  lMMURequestInput_RDY_portalIfc_requests_4_enq)
  begin
    case (lMMURequestInputNoc_methodIdReg)
      8'd0:
	  CASE_lMMURequestInputNoc_methodIdReg_211_0_lMM_ETC___d1217 =
	      lMMURequestInput_RDY_portalIfc_requests_0_enq;
      8'd1:
	  CASE_lMMURequestInputNoc_methodIdReg_211_0_lMM_ETC___d1217 =
	      lMMURequestInput_RDY_portalIfc_requests_1_enq;
      8'd2:
	  CASE_lMMURequestInputNoc_methodIdReg_211_0_lMM_ETC___d1217 =
	      lMMURequestInput_RDY_portalIfc_requests_2_enq;
      8'd3:
	  CASE_lMMURequestInputNoc_methodIdReg_211_0_lMM_ETC___d1217 =
	      lMMURequestInput_RDY_portalIfc_requests_3_enq;
      8'd4:
	  CASE_lMMURequestInputNoc_methodIdReg_211_0_lMM_ETC___d1217 =
	      lMMURequestInput_RDY_portalIfc_requests_4_enq;
      default: CASE_lMMURequestInputNoc_methodIdReg_211_0_lMM_ETC___d1217 =
		   1'd1;
    endcase
  end
  always@(lMemServerIndicationOutputNoc_methodIdReg or
	  lMemServerIndicationOutput_RDY_portalIfc_indications_0_deq or
	  lMemServerIndicationOutput_RDY_portalIfc_indications_1_deq or
	  lMemServerIndicationOutput_RDY_portalIfc_indications_2_deq or
	  lMemServerIndicationOutput_RDY_portalIfc_indications_3_deq)
  begin
    case (lMemServerIndicationOutputNoc_methodIdReg)
      8'd0:
	  CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1259 =
	      lMemServerIndicationOutput_RDY_portalIfc_indications_0_deq;
      8'd1:
	  CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1259 =
	      lMemServerIndicationOutput_RDY_portalIfc_indications_1_deq;
      8'd2:
	  CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1259 =
	      lMemServerIndicationOutput_RDY_portalIfc_indications_2_deq;
      8'd3:
	  CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1259 =
	      lMemServerIndicationOutput_RDY_portalIfc_indications_3_deq;
      default: CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1259 =
		   1'd1;
    endcase
  end
  always@(lMemServerIndicationOutputNoc_methodIdReg or
	  lMemServerIndicationOutput_RDY_portalIfc_indications_0_first or
	  lMemServerIndicationOutput_RDY_portalIfc_indications_1_first or
	  lMemServerIndicationOutput_RDY_portalIfc_indications_2_first or
	  lMemServerIndicationOutput_RDY_portalIfc_indications_3_first)
  begin
    case (lMemServerIndicationOutputNoc_methodIdReg)
      8'd0:
	  CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1264 =
	      lMemServerIndicationOutput_RDY_portalIfc_indications_0_first;
      8'd1:
	  CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1264 =
	      lMemServerIndicationOutput_RDY_portalIfc_indications_1_first;
      8'd2:
	  CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1264 =
	      lMemServerIndicationOutput_RDY_portalIfc_indications_2_first;
      8'd3:
	  CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1264 =
	      lMemServerIndicationOutput_RDY_portalIfc_indications_3_first;
      default: CASE_lMemServerIndicationOutputNoc_methodIdReg_ETC___d1264 =
		   1'd1;
    endcase
  end
  always@(lMemServerRequestInputNoc_methodIdReg or
	  lMemServerRequestInput_RDY_portalIfc_requests_0_enq or
	  lMemServerRequestInput_RDY_portalIfc_requests_1_enq or
	  lMemServerRequestInput_RDY_portalIfc_requests_2_enq or
	  lMemServerRequestInput_RDY_portalIfc_requests_3_enq)
  begin
    case (lMemServerRequestInputNoc_methodIdReg)
      8'd0:
	  CASE_lMemServerRequestInputNoc_methodIdReg_293_ETC___d1298 =
	      lMemServerRequestInput_RDY_portalIfc_requests_0_enq;
      8'd1:
	  CASE_lMemServerRequestInputNoc_methodIdReg_293_ETC___d1298 =
	      lMemServerRequestInput_RDY_portalIfc_requests_1_enq;
      8'd2:
	  CASE_lMemServerRequestInputNoc_methodIdReg_293_ETC___d1298 =
	      lMemServerRequestInput_RDY_portalIfc_requests_2_enq;
      8'd3:
	  CASE_lMemServerRequestInputNoc_methodIdReg_293_ETC___d1298 =
	      lMemServerRequestInput_RDY_portalIfc_requests_3_enq;
      default: CASE_lMemServerRequestInputNoc_methodIdReg_293_ETC___d1298 =
		   1'd1;
    endcase
  end
  always@(lMemServer_writer_writers_0_serverProcessing_D_OUT or
	  lMemServer_writer_writers_0_clientWriteData_0_EMPTY_N or
	  lMemServer_writer_writers_0_clientWriteData_1_EMPTY_N)
  begin
    case (lMemServer_writer_writers_0_serverProcessing_D_OUT[1])
      1'd0:
	  CASE_lMemServer_writer_writers_0_serverProcess_ETC__q6 =
	      lMemServer_writer_writers_0_clientWriteData_0_EMPTY_N;
      1'd1:
	  CASE_lMemServer_writer_writers_0_serverProcess_ETC__q6 =
	      lMemServer_writer_writers_0_clientWriteData_1_EMPTY_N;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dumpstarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMMUIndicationOutputNoc_bpState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMMUIndicationOutputNoc_messageWordsReg <= `BSV_ASSIGNMENT_DELAY
	    16'd0;
	lMMUIndicationOutputNoc_methodIdReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	lMMURequestInputNoc_bpState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMMURequestInputNoc_messageWordsReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	lMMURequestInputNoc_methodIdReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	lMemServerIndicationOutputNoc_bpState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServerIndicationOutputNoc_messageWordsReg <= `BSV_ASSIGNMENT_DELAY
	    16'd0;
	lMemServerIndicationOutputNoc_methodIdReg <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	lMemServerRequestInputNoc_bpState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServerRequestInputNoc_messageWordsReg <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	lMemServerRequestInputNoc_methodIdReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	lMemServer_reader_dbgFSM_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_dbgFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_dbgFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	lMemServer_reader_dbgFSM_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_dbgFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	lMemServer_reader_dbgPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	lMemServer_reader_readers_0_beatCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lMemServer_reader_readers_0_burstReg <= `BSV_ASSIGNMENT_DELAY 10'd0;
	lMemServer_reader_readers_0_clientData_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	lMemServer_reader_readers_0_clientData_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	lMemServer_reader_readers_0_clientData_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	lMemServer_reader_readers_0_clientData_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	lMemServer_reader_readers_0_compClientReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	lMemServer_reader_readers_0_compCountReg <= `BSV_ASSIGNMENT_DELAY
	    10'd0;
	lMemServer_reader_readers_0_compTagReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	lMemServer_reader_readers_0_compTileReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lMemServer_reader_readers_0_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	lMemServer_reader_readers_0_firstReg <= `BSV_ASSIGNMENT_DELAY 1'd1;
	lMemServer_reader_readers_0_killv_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_readers_0_killv_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_readers_0_killv_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_readers_0_killv_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_readers_0_last_comp <= `BSV_ASSIGNMENT_DELAY 64'd0;
	lMemServer_reader_readers_0_last_loadClient <= `BSV_ASSIGNMENT_DELAY
	    64'd0;
	lMemServer_reader_readers_0_last_mmuResp <= `BSV_ASSIGNMENT_DELAY
	    64'd0;
	lMemServer_reader_readers_0_last_readData <= `BSV_ASSIGNMENT_DELAY
	    64'd0;
	lMemServer_reader_readers_0_last_readReq <= `BSV_ASSIGNMENT_DELAY
	    64'd0;
	lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	lMemServer_reader_readers_0_stopv_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_readers_0_stopv_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_readers_0_stopv_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_readers_0_stopv_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_readers_0_tag_gen_comp_state <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	lMemServer_reader_readers_0_tag_gen_counter_cnt <= `BSV_ASSIGNMENT_DELAY
	    6'd32;
	lMemServer_reader_readers_0_tag_gen_counter_positive_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	lMemServer_reader_readers_0_tag_gen_head_ptr <= `BSV_ASSIGNMENT_DELAY
	    5'd0;
	lMemServer_reader_readers_0_tag_gen_inited <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	lMemServer_reader_readers_0_tag_gen_tags <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	lMemServer_reader_readers_0_tag_gen_tail_ptr <= `BSV_ASSIGNMENT_DELAY
	    5'd0;
	lMemServer_reader_trafficAccum <= `BSV_ASSIGNMENT_DELAY 64'd0;
	lMemServer_reader_trafficFSM_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_reader_trafficFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	lMemServer_reader_trafficFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	lMemServer_reader_trafficFSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	lMemServer_reader_trafficFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	lMemServer_reader_trafficPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	lMemServer_writer_dbgFSM_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_dbgFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_dbgFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	lMemServer_writer_dbgFSM_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_dbgFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	lMemServer_writer_dbgPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	lMemServer_writer_trafficAccum <= `BSV_ASSIGNMENT_DELAY 64'd0;
	lMemServer_writer_trafficFSM_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_trafficFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	lMemServer_writer_trafficFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	lMemServer_writer_trafficFSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	lMemServer_writer_trafficFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	lMemServer_writer_trafficPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	lMemServer_writer_writers_0_beatCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lMemServer_writer_writers_0_burstReg <= `BSV_ASSIGNMENT_DELAY 10'd0;
	lMemServer_writer_writers_0_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	lMemServer_writer_writers_0_firstReg <= `BSV_ASSIGNMENT_DELAY 1'd1;
	lMemServer_writer_writers_0_killv_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_writers_0_killv_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_writers_0_killv_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_writers_0_killv_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_writers_0_lastReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_writers_0_last_loadClient <= `BSV_ASSIGNMENT_DELAY
	    64'd0;
	lMemServer_writer_writers_0_last_mmuResp <= `BSV_ASSIGNMENT_DELAY
	    64'd0;
	lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	lMemServer_writer_writers_0_respFifos_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	lMemServer_writer_writers_0_respFifos_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	lMemServer_writer_writers_0_stopv_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_writers_0_stopv_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_writers_0_stopv_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_writers_0_stopv_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lMemServer_writer_writers_0_tag_gen_comp_state <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	lMemServer_writer_writers_0_tag_gen_counter_cnt <= `BSV_ASSIGNMENT_DELAY
	    6'd32;
	lMemServer_writer_writers_0_tag_gen_counter_positive_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	lMemServer_writer_writers_0_tag_gen_head_ptr <= `BSV_ASSIGNMENT_DELAY
	    5'd0;
	lMemServer_writer_writers_0_tag_gen_inited <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	lMemServer_writer_writers_0_tag_gen_tags <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	lMemServer_writer_writers_0_tag_gen_tail_ptr <= `BSV_ASSIGNMENT_DELAY
	    5'd0;
	slave_2_0_burstReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	slave_2_0_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	slave_2_0_last_read_eob <= `BSV_ASSIGNMENT_DELAY 64'd0;
	slave_2_0_last_reqAr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	slave_2_0_last_write_eob <= `BSV_ASSIGNMENT_DELAY 64'd0;
	slave_2_0_readLenReg <= `BSV_ASSIGNMENT_DELAY 10'd0;
	slave_2_0_readOffsetReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	slave_2_0_req_ar_b_ts <= `BSV_ASSIGNMENT_DELAY 64'd0;
	slave_2_0_req_aw_b_ts <= `BSV_ASSIGNMENT_DELAY 64'd0;
	slave_2_0_writeLenReg <= `BSV_ASSIGNMENT_DELAY 10'd0;
	slave_2_0_writeOffsetReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (dumpstarted_EN)
	  dumpstarted <= `BSV_ASSIGNMENT_DELAY dumpstarted_D_IN;
	if (lMMUIndicationOutputNoc_bpState_EN)
	  lMMUIndicationOutputNoc_bpState <= `BSV_ASSIGNMENT_DELAY
	      lMMUIndicationOutputNoc_bpState_D_IN;
	if (lMMUIndicationOutputNoc_messageWordsReg_EN)
	  lMMUIndicationOutputNoc_messageWordsReg <= `BSV_ASSIGNMENT_DELAY
	      lMMUIndicationOutputNoc_messageWordsReg_D_IN;
	if (lMMUIndicationOutputNoc_methodIdReg_EN)
	  lMMUIndicationOutputNoc_methodIdReg <= `BSV_ASSIGNMENT_DELAY
	      lMMUIndicationOutputNoc_methodIdReg_D_IN;
	if (lMMURequestInputNoc_bpState_EN)
	  lMMURequestInputNoc_bpState <= `BSV_ASSIGNMENT_DELAY
	      lMMURequestInputNoc_bpState_D_IN;
	if (lMMURequestInputNoc_messageWordsReg_EN)
	  lMMURequestInputNoc_messageWordsReg <= `BSV_ASSIGNMENT_DELAY
	      lMMURequestInputNoc_messageWordsReg_D_IN;
	if (lMMURequestInputNoc_methodIdReg_EN)
	  lMMURequestInputNoc_methodIdReg <= `BSV_ASSIGNMENT_DELAY
	      lMMURequestInputNoc_methodIdReg_D_IN;
	if (lMemServerIndicationOutputNoc_bpState_EN)
	  lMemServerIndicationOutputNoc_bpState <= `BSV_ASSIGNMENT_DELAY
	      lMemServerIndicationOutputNoc_bpState_D_IN;
	if (lMemServerIndicationOutputNoc_messageWordsReg_EN)
	  lMemServerIndicationOutputNoc_messageWordsReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServerIndicationOutputNoc_messageWordsReg_D_IN;
	if (lMemServerIndicationOutputNoc_methodIdReg_EN)
	  lMemServerIndicationOutputNoc_methodIdReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServerIndicationOutputNoc_methodIdReg_D_IN;
	if (lMemServerRequestInputNoc_bpState_EN)
	  lMemServerRequestInputNoc_bpState <= `BSV_ASSIGNMENT_DELAY
	      lMemServerRequestInputNoc_bpState_D_IN;
	if (lMemServerRequestInputNoc_messageWordsReg_EN)
	  lMemServerRequestInputNoc_messageWordsReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServerRequestInputNoc_messageWordsReg_D_IN;
	if (lMemServerRequestInputNoc_methodIdReg_EN)
	  lMemServerRequestInputNoc_methodIdReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServerRequestInputNoc_methodIdReg_D_IN;
	if (lMemServer_reader_dbgFSM_start_reg_EN)
	  lMemServer_reader_dbgFSM_start_reg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_dbgFSM_start_reg_D_IN;
	if (lMemServer_reader_dbgFSM_start_reg_1_EN)
	  lMemServer_reader_dbgFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_dbgFSM_start_reg_1_D_IN;
	if (lMemServer_reader_dbgFSM_state_can_overlap_EN)
	  lMemServer_reader_dbgFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_dbgFSM_state_can_overlap_D_IN;
	if (lMemServer_reader_dbgFSM_state_fired_EN)
	  lMemServer_reader_dbgFSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_dbgFSM_state_fired_D_IN;
	if (lMemServer_reader_dbgFSM_state_mkFSMstate_EN)
	  lMemServer_reader_dbgFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_dbgFSM_state_mkFSMstate_D_IN;
	if (lMemServer_reader_dbgPtr_EN)
	  lMemServer_reader_dbgPtr <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_dbgPtr_D_IN;
	if (lMemServer_reader_readers_0_beatCount_EN)
	  lMemServer_reader_readers_0_beatCount <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_beatCount_D_IN;
	if (lMemServer_reader_readers_0_burstReg_EN)
	  lMemServer_reader_readers_0_burstReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_burstReg_D_IN;
	if (lMemServer_reader_readers_0_clientData_serverAdapterA_cnt_EN)
	  lMemServer_reader_readers_0_clientData_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_clientData_serverAdapterA_cnt_D_IN;
	if (lMemServer_reader_readers_0_clientData_serverAdapterA_s1_EN)
	  lMemServer_reader_readers_0_clientData_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_clientData_serverAdapterA_s1_D_IN;
	if (lMemServer_reader_readers_0_clientData_serverAdapterB_cnt_EN)
	  lMemServer_reader_readers_0_clientData_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_clientData_serverAdapterB_cnt_D_IN;
	if (lMemServer_reader_readers_0_clientData_serverAdapterB_s1_EN)
	  lMemServer_reader_readers_0_clientData_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_clientData_serverAdapterB_s1_D_IN;
	if (lMemServer_reader_readers_0_compClientReg_EN)
	  lMemServer_reader_readers_0_compClientReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_compClientReg_D_IN;
	if (lMemServer_reader_readers_0_compCountReg_EN)
	  lMemServer_reader_readers_0_compCountReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_compCountReg_D_IN;
	if (lMemServer_reader_readers_0_compTagReg_EN)
	  lMemServer_reader_readers_0_compTagReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_compTagReg_D_IN;
	if (lMemServer_reader_readers_0_compTileReg_EN)
	  lMemServer_reader_readers_0_compTileReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_compTileReg_D_IN;
	if (lMemServer_reader_readers_0_cycle_cnt_EN)
	  lMemServer_reader_readers_0_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_cycle_cnt_D_IN;
	if (lMemServer_reader_readers_0_firstReg_EN)
	  lMemServer_reader_readers_0_firstReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_firstReg_D_IN;
	if (lMemServer_reader_readers_0_killv_0_EN)
	  lMemServer_reader_readers_0_killv_0 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_killv_0_D_IN;
	if (lMemServer_reader_readers_0_killv_1_EN)
	  lMemServer_reader_readers_0_killv_1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_killv_1_D_IN;
	if (lMemServer_reader_readers_0_killv_2_EN)
	  lMemServer_reader_readers_0_killv_2 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_killv_2_D_IN;
	if (lMemServer_reader_readers_0_killv_3_EN)
	  lMemServer_reader_readers_0_killv_3 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_killv_3_D_IN;
	if (lMemServer_reader_readers_0_last_comp_EN)
	  lMemServer_reader_readers_0_last_comp <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_last_comp_D_IN;
	if (lMemServer_reader_readers_0_last_loadClient_EN)
	  lMemServer_reader_readers_0_last_loadClient <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_last_loadClient_D_IN;
	if (lMemServer_reader_readers_0_last_mmuResp_EN)
	  lMemServer_reader_readers_0_last_mmuResp <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_last_mmuResp_D_IN;
	if (lMemServer_reader_readers_0_last_readData_EN)
	  lMemServer_reader_readers_0_last_readData <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_last_readData_D_IN;
	if (lMemServer_reader_readers_0_last_readReq_EN)
	  lMemServer_reader_readers_0_last_readReq <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_last_readReq_D_IN;
	if (lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt_EN)
	  lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt_D_IN;
	if (lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1_EN)
	  lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1_D_IN;
	if (lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt_EN)
	  lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt_D_IN;
	if (lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1_EN)
	  lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1_D_IN;
	if (lMemServer_reader_readers_0_stopv_0_EN)
	  lMemServer_reader_readers_0_stopv_0 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_stopv_0_D_IN;
	if (lMemServer_reader_readers_0_stopv_1_EN)
	  lMemServer_reader_readers_0_stopv_1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_stopv_1_D_IN;
	if (lMemServer_reader_readers_0_stopv_2_EN)
	  lMemServer_reader_readers_0_stopv_2 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_stopv_2_D_IN;
	if (lMemServer_reader_readers_0_stopv_3_EN)
	  lMemServer_reader_readers_0_stopv_3 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_stopv_3_D_IN;
	if (lMemServer_reader_readers_0_tag_gen_comp_state_EN)
	  lMemServer_reader_readers_0_tag_gen_comp_state <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_tag_gen_comp_state_D_IN;
	if (lMemServer_reader_readers_0_tag_gen_counter_cnt_EN)
	  lMemServer_reader_readers_0_tag_gen_counter_cnt <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_tag_gen_counter_cnt_D_IN;
	if (lMemServer_reader_readers_0_tag_gen_counter_positive_reg_EN)
	  lMemServer_reader_readers_0_tag_gen_counter_positive_reg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_tag_gen_counter_positive_reg_D_IN;
	if (lMemServer_reader_readers_0_tag_gen_head_ptr_EN)
	  lMemServer_reader_readers_0_tag_gen_head_ptr <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_tag_gen_head_ptr_D_IN;
	if (lMemServer_reader_readers_0_tag_gen_inited_EN)
	  lMemServer_reader_readers_0_tag_gen_inited <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_tag_gen_inited_D_IN;
	if (lMemServer_reader_readers_0_tag_gen_tags_EN)
	  lMemServer_reader_readers_0_tag_gen_tags <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_tag_gen_tags_D_IN;
	if (lMemServer_reader_readers_0_tag_gen_tail_ptr_EN)
	  lMemServer_reader_readers_0_tag_gen_tail_ptr <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_readers_0_tag_gen_tail_ptr_D_IN;
	if (lMemServer_reader_trafficAccum_EN)
	  lMemServer_reader_trafficAccum <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_trafficAccum_D_IN;
	if (lMemServer_reader_trafficFSM_start_reg_EN)
	  lMemServer_reader_trafficFSM_start_reg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_trafficFSM_start_reg_D_IN;
	if (lMemServer_reader_trafficFSM_start_reg_1_EN)
	  lMemServer_reader_trafficFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_trafficFSM_start_reg_1_D_IN;
	if (lMemServer_reader_trafficFSM_state_can_overlap_EN)
	  lMemServer_reader_trafficFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_trafficFSM_state_can_overlap_D_IN;
	if (lMemServer_reader_trafficFSM_state_fired_EN)
	  lMemServer_reader_trafficFSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_trafficFSM_state_fired_D_IN;
	if (lMemServer_reader_trafficFSM_state_mkFSMstate_EN)
	  lMemServer_reader_trafficFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_trafficFSM_state_mkFSMstate_D_IN;
	if (lMemServer_reader_trafficPtr_EN)
	  lMemServer_reader_trafficPtr <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_reader_trafficPtr_D_IN;
	if (lMemServer_writer_dbgFSM_start_reg_EN)
	  lMemServer_writer_dbgFSM_start_reg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_dbgFSM_start_reg_D_IN;
	if (lMemServer_writer_dbgFSM_start_reg_1_EN)
	  lMemServer_writer_dbgFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_dbgFSM_start_reg_1_D_IN;
	if (lMemServer_writer_dbgFSM_state_can_overlap_EN)
	  lMemServer_writer_dbgFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_dbgFSM_state_can_overlap_D_IN;
	if (lMemServer_writer_dbgFSM_state_fired_EN)
	  lMemServer_writer_dbgFSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_dbgFSM_state_fired_D_IN;
	if (lMemServer_writer_dbgFSM_state_mkFSMstate_EN)
	  lMemServer_writer_dbgFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_dbgFSM_state_mkFSMstate_D_IN;
	if (lMemServer_writer_dbgPtr_EN)
	  lMemServer_writer_dbgPtr <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_dbgPtr_D_IN;
	if (lMemServer_writer_trafficAccum_EN)
	  lMemServer_writer_trafficAccum <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_trafficAccum_D_IN;
	if (lMemServer_writer_trafficFSM_start_reg_EN)
	  lMemServer_writer_trafficFSM_start_reg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_trafficFSM_start_reg_D_IN;
	if (lMemServer_writer_trafficFSM_start_reg_1_EN)
	  lMemServer_writer_trafficFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_trafficFSM_start_reg_1_D_IN;
	if (lMemServer_writer_trafficFSM_state_can_overlap_EN)
	  lMemServer_writer_trafficFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_trafficFSM_state_can_overlap_D_IN;
	if (lMemServer_writer_trafficFSM_state_fired_EN)
	  lMemServer_writer_trafficFSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_trafficFSM_state_fired_D_IN;
	if (lMemServer_writer_trafficFSM_state_mkFSMstate_EN)
	  lMemServer_writer_trafficFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_trafficFSM_state_mkFSMstate_D_IN;
	if (lMemServer_writer_trafficPtr_EN)
	  lMemServer_writer_trafficPtr <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_trafficPtr_D_IN;
	if (lMemServer_writer_writers_0_beatCount_EN)
	  lMemServer_writer_writers_0_beatCount <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_beatCount_D_IN;
	if (lMemServer_writer_writers_0_burstReg_EN)
	  lMemServer_writer_writers_0_burstReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_burstReg_D_IN;
	if (lMemServer_writer_writers_0_cycle_cnt_EN)
	  lMemServer_writer_writers_0_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_cycle_cnt_D_IN;
	if (lMemServer_writer_writers_0_firstReg_EN)
	  lMemServer_writer_writers_0_firstReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_firstReg_D_IN;
	if (lMemServer_writer_writers_0_killv_0_EN)
	  lMemServer_writer_writers_0_killv_0 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_killv_0_D_IN;
	if (lMemServer_writer_writers_0_killv_1_EN)
	  lMemServer_writer_writers_0_killv_1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_killv_1_D_IN;
	if (lMemServer_writer_writers_0_killv_2_EN)
	  lMemServer_writer_writers_0_killv_2 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_killv_2_D_IN;
	if (lMemServer_writer_writers_0_killv_3_EN)
	  lMemServer_writer_writers_0_killv_3 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_killv_3_D_IN;
	if (lMemServer_writer_writers_0_lastReg_EN)
	  lMemServer_writer_writers_0_lastReg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_lastReg_D_IN;
	if (lMemServer_writer_writers_0_last_loadClient_EN)
	  lMemServer_writer_writers_0_last_loadClient <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_last_loadClient_D_IN;
	if (lMemServer_writer_writers_0_last_mmuResp_EN)
	  lMemServer_writer_writers_0_last_mmuResp <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_last_mmuResp_D_IN;
	if (lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt_EN)
	  lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt_D_IN;
	if (lMemServer_writer_writers_0_respFifos_serverAdapterA_s1_EN)
	  lMemServer_writer_writers_0_respFifos_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_respFifos_serverAdapterA_s1_D_IN;
	if (lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt_EN)
	  lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt_D_IN;
	if (lMemServer_writer_writers_0_respFifos_serverAdapterB_s1_EN)
	  lMemServer_writer_writers_0_respFifos_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_respFifos_serverAdapterB_s1_D_IN;
	if (lMemServer_writer_writers_0_stopv_0_EN)
	  lMemServer_writer_writers_0_stopv_0 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_stopv_0_D_IN;
	if (lMemServer_writer_writers_0_stopv_1_EN)
	  lMemServer_writer_writers_0_stopv_1 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_stopv_1_D_IN;
	if (lMemServer_writer_writers_0_stopv_2_EN)
	  lMemServer_writer_writers_0_stopv_2 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_stopv_2_D_IN;
	if (lMemServer_writer_writers_0_stopv_3_EN)
	  lMemServer_writer_writers_0_stopv_3 <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_stopv_3_D_IN;
	if (lMemServer_writer_writers_0_tag_gen_comp_state_EN)
	  lMemServer_writer_writers_0_tag_gen_comp_state <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_tag_gen_comp_state_D_IN;
	if (lMemServer_writer_writers_0_tag_gen_counter_cnt_EN)
	  lMemServer_writer_writers_0_tag_gen_counter_cnt <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_tag_gen_counter_cnt_D_IN;
	if (lMemServer_writer_writers_0_tag_gen_counter_positive_reg_EN)
	  lMemServer_writer_writers_0_tag_gen_counter_positive_reg <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_tag_gen_counter_positive_reg_D_IN;
	if (lMemServer_writer_writers_0_tag_gen_head_ptr_EN)
	  lMemServer_writer_writers_0_tag_gen_head_ptr <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_tag_gen_head_ptr_D_IN;
	if (lMemServer_writer_writers_0_tag_gen_inited_EN)
	  lMemServer_writer_writers_0_tag_gen_inited <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_tag_gen_inited_D_IN;
	if (lMemServer_writer_writers_0_tag_gen_tags_EN)
	  lMemServer_writer_writers_0_tag_gen_tags <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_tag_gen_tags_D_IN;
	if (lMemServer_writer_writers_0_tag_gen_tail_ptr_EN)
	  lMemServer_writer_writers_0_tag_gen_tail_ptr <= `BSV_ASSIGNMENT_DELAY
	      lMemServer_writer_writers_0_tag_gen_tail_ptr_D_IN;
	if (slave_2_0_burstReg_EN)
	  slave_2_0_burstReg <= `BSV_ASSIGNMENT_DELAY slave_2_0_burstReg_D_IN;
	if (slave_2_0_cycles_EN)
	  slave_2_0_cycles <= `BSV_ASSIGNMENT_DELAY slave_2_0_cycles_D_IN;
	if (slave_2_0_last_read_eob_EN)
	  slave_2_0_last_read_eob <= `BSV_ASSIGNMENT_DELAY
	      slave_2_0_last_read_eob_D_IN;
	if (slave_2_0_last_reqAr_EN)
	  slave_2_0_last_reqAr <= `BSV_ASSIGNMENT_DELAY
	      slave_2_0_last_reqAr_D_IN;
	if (slave_2_0_last_write_eob_EN)
	  slave_2_0_last_write_eob <= `BSV_ASSIGNMENT_DELAY
	      slave_2_0_last_write_eob_D_IN;
	if (slave_2_0_readLenReg_EN)
	  slave_2_0_readLenReg <= `BSV_ASSIGNMENT_DELAY
	      slave_2_0_readLenReg_D_IN;
	if (slave_2_0_readOffsetReg_EN)
	  slave_2_0_readOffsetReg <= `BSV_ASSIGNMENT_DELAY
	      slave_2_0_readOffsetReg_D_IN;
	if (slave_2_0_req_ar_b_ts_EN)
	  slave_2_0_req_ar_b_ts <= `BSV_ASSIGNMENT_DELAY
	      slave_2_0_req_ar_b_ts_D_IN;
	if (slave_2_0_req_aw_b_ts_EN)
	  slave_2_0_req_aw_b_ts <= `BSV_ASSIGNMENT_DELAY
	      slave_2_0_req_aw_b_ts_D_IN;
	if (slave_2_0_writeLenReg_EN)
	  slave_2_0_writeLenReg <= `BSV_ASSIGNMENT_DELAY
	      slave_2_0_writeLenReg_D_IN;
	if (slave_2_0_writeOffsetReg_EN)
	  slave_2_0_writeOffsetReg <= `BSV_ASSIGNMENT_DELAY
	      slave_2_0_writeOffsetReg_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dumpstarted = 1'h0;
    lMMUIndicationOutputNoc_bpState = 1'h0;
    lMMUIndicationOutputNoc_messageWordsReg = 16'hAAAA;
    lMMUIndicationOutputNoc_methodIdReg = 8'hAA;
    lMMURequestInputNoc_bpState = 1'h0;
    lMMURequestInputNoc_messageWordsReg = 8'hAA;
    lMMURequestInputNoc_methodIdReg = 8'hAA;
    lMemServerIndicationOutputNoc_bpState = 1'h0;
    lMemServerIndicationOutputNoc_messageWordsReg = 16'hAAAA;
    lMemServerIndicationOutputNoc_methodIdReg = 8'hAA;
    lMemServerRequestInputNoc_bpState = 1'h0;
    lMemServerRequestInputNoc_messageWordsReg = 8'hAA;
    lMemServerRequestInputNoc_methodIdReg = 8'hAA;
    lMemServer_reader_dbgFSM_start_reg = 1'h0;
    lMemServer_reader_dbgFSM_start_reg_1 = 1'h0;
    lMemServer_reader_dbgFSM_state_can_overlap = 1'h0;
    lMemServer_reader_dbgFSM_state_fired = 1'h0;
    lMemServer_reader_dbgFSM_state_mkFSMstate = 3'h2;
    lMemServer_reader_dbgPtr = 8'hAA;
    lMemServer_reader_readers_0_beatCount = 32'hAAAAAAAA;
    lMemServer_reader_readers_0_burstReg = 10'h2AA;
    lMemServer_reader_readers_0_clientData_serverAdapterA_cnt = 3'h2;
    lMemServer_reader_readers_0_clientData_serverAdapterA_s1 = 2'h2;
    lMemServer_reader_readers_0_clientData_serverAdapterB_cnt = 3'h2;
    lMemServer_reader_readers_0_clientData_serverAdapterB_s1 = 2'h2;
    lMemServer_reader_readers_0_compClientReg = 1'h0;
    lMemServer_reader_readers_0_compCountReg = 10'h2AA;
    lMemServer_reader_readers_0_compTagReg = 5'h0A;
    lMemServer_reader_readers_0_compTileReg = 2'h2;
    lMemServer_reader_readers_0_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    lMemServer_reader_readers_0_firstReg = 1'h0;
    lMemServer_reader_readers_0_killv_0 = 1'h0;
    lMemServer_reader_readers_0_killv_1 = 1'h0;
    lMemServer_reader_readers_0_killv_2 = 1'h0;
    lMemServer_reader_readers_0_killv_3 = 1'h0;
    lMemServer_reader_readers_0_last_comp = 64'hAAAAAAAAAAAAAAAA;
    lMemServer_reader_readers_0_last_loadClient = 64'hAAAAAAAAAAAAAAAA;
    lMemServer_reader_readers_0_last_mmuResp = 64'hAAAAAAAAAAAAAAAA;
    lMemServer_reader_readers_0_last_readData = 64'hAAAAAAAAAAAAAAAA;
    lMemServer_reader_readers_0_last_readReq = 64'hAAAAAAAAAAAAAAAA;
    lMemServer_reader_readers_0_serverProcessing_serverAdapterA_cnt = 3'h2;
    lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1 = 2'h2;
    lMemServer_reader_readers_0_serverProcessing_serverAdapterB_cnt = 3'h2;
    lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1 = 2'h2;
    lMemServer_reader_readers_0_stopv_0 = 1'h0;
    lMemServer_reader_readers_0_stopv_1 = 1'h0;
    lMemServer_reader_readers_0_stopv_2 = 1'h0;
    lMemServer_reader_readers_0_stopv_3 = 1'h0;
    lMemServer_reader_readers_0_tag_gen_comp_state = 32'hAAAAAAAA;
    lMemServer_reader_readers_0_tag_gen_counter_cnt = 6'h2A;
    lMemServer_reader_readers_0_tag_gen_counter_positive_reg = 1'h0;
    lMemServer_reader_readers_0_tag_gen_head_ptr = 5'h0A;
    lMemServer_reader_readers_0_tag_gen_inited = 1'h0;
    lMemServer_reader_readers_0_tag_gen_tags = 32'hAAAAAAAA;
    lMemServer_reader_readers_0_tag_gen_tail_ptr = 5'h0A;
    lMemServer_reader_trafficAccum = 64'hAAAAAAAAAAAAAAAA;
    lMemServer_reader_trafficFSM_start_reg = 1'h0;
    lMemServer_reader_trafficFSM_start_reg_1 = 1'h0;
    lMemServer_reader_trafficFSM_state_can_overlap = 1'h0;
    lMemServer_reader_trafficFSM_state_fired = 1'h0;
    lMemServer_reader_trafficFSM_state_mkFSMstate = 3'h2;
    lMemServer_reader_trafficPtr = 8'hAA;
    lMemServer_writer_dbgFSM_start_reg = 1'h0;
    lMemServer_writer_dbgFSM_start_reg_1 = 1'h0;
    lMemServer_writer_dbgFSM_state_can_overlap = 1'h0;
    lMemServer_writer_dbgFSM_state_fired = 1'h0;
    lMemServer_writer_dbgFSM_state_mkFSMstate = 3'h2;
    lMemServer_writer_dbgPtr = 8'hAA;
    lMemServer_writer_trafficAccum = 64'hAAAAAAAAAAAAAAAA;
    lMemServer_writer_trafficFSM_start_reg = 1'h0;
    lMemServer_writer_trafficFSM_start_reg_1 = 1'h0;
    lMemServer_writer_trafficFSM_state_can_overlap = 1'h0;
    lMemServer_writer_trafficFSM_state_fired = 1'h0;
    lMemServer_writer_trafficFSM_state_mkFSMstate = 3'h2;
    lMemServer_writer_trafficPtr = 8'hAA;
    lMemServer_writer_writers_0_beatCount = 32'hAAAAAAAA;
    lMemServer_writer_writers_0_burstReg = 10'h2AA;
    lMemServer_writer_writers_0_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    lMemServer_writer_writers_0_firstReg = 1'h0;
    lMemServer_writer_writers_0_killv_0 = 1'h0;
    lMemServer_writer_writers_0_killv_1 = 1'h0;
    lMemServer_writer_writers_0_killv_2 = 1'h0;
    lMemServer_writer_writers_0_killv_3 = 1'h0;
    lMemServer_writer_writers_0_lastReg = 1'h0;
    lMemServer_writer_writers_0_last_loadClient = 64'hAAAAAAAAAAAAAAAA;
    lMemServer_writer_writers_0_last_mmuResp = 64'hAAAAAAAAAAAAAAAA;
    lMemServer_writer_writers_0_respFifos_serverAdapterA_cnt = 3'h2;
    lMemServer_writer_writers_0_respFifos_serverAdapterA_s1 = 2'h2;
    lMemServer_writer_writers_0_respFifos_serverAdapterB_cnt = 3'h2;
    lMemServer_writer_writers_0_respFifos_serverAdapterB_s1 = 2'h2;
    lMemServer_writer_writers_0_stopv_0 = 1'h0;
    lMemServer_writer_writers_0_stopv_1 = 1'h0;
    lMemServer_writer_writers_0_stopv_2 = 1'h0;
    lMemServer_writer_writers_0_stopv_3 = 1'h0;
    lMemServer_writer_writers_0_tag_gen_comp_state = 32'hAAAAAAAA;
    lMemServer_writer_writers_0_tag_gen_counter_cnt = 6'h2A;
    lMemServer_writer_writers_0_tag_gen_counter_positive_reg = 1'h0;
    lMemServer_writer_writers_0_tag_gen_head_ptr = 5'h0A;
    lMemServer_writer_writers_0_tag_gen_inited = 1'h0;
    lMemServer_writer_writers_0_tag_gen_tags = 32'hAAAAAAAA;
    lMemServer_writer_writers_0_tag_gen_tail_ptr = 5'h0A;
    slave_2_0_burstReg = 8'hAA;
    slave_2_0_cycles = 64'hAAAAAAAAAAAAAAAA;
    slave_2_0_last_read_eob = 64'hAAAAAAAAAAAAAAAA;
    slave_2_0_last_reqAr = 64'hAAAAAAAAAAAAAAAA;
    slave_2_0_last_write_eob = 64'hAAAAAAAAAAAAAAAA;
    slave_2_0_readLenReg = 10'h2AA;
    slave_2_0_readOffsetReg = 32'hAAAAAAAA;
    slave_2_0_req_ar_b_ts = 64'hAAAAAAAAAAAAAAAA;
    slave_2_0_req_aw_b_ts = 64'hAAAAAAAAAAAAAAAA;
    slave_2_0_writeLenReg = 10'h2AA;
    slave_2_0_writeOffsetReg = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (!dumpstarted) $display("XsimTop starting");
    if (RST_N != `BSV_RESET_VALUE)
      if (lMemServer_reader_readers_0_serverProcessing_serverAdapterA_s1[1] &&
	  (!lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeEnq_Q_OUT ||
	   !lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_beforeDeq_Q_OUT ||
	   !lMemServer_reader_readers_0_serverProcessing_serverAdapterA_outData_ff_FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lMemServer_reader_readers_0_read_data &&
	  lMemServer_reader_readers_0_clientBurstLen_D_OUT_1[10] &&
	  lMemServer_reader_readers_0_clientBurstLen_D_OUT_1[9:0] != 10'd1)
	$display("rename_tag=%d tag=%d burstLen=%d last=%d",
		 lMemServer_reader_readers_0_serverData_D_OUT[6:1],
		 tag__h13211,
		 lMemServer_reader_readers_0_clientBurstLen_D_OUT_1[9:0],
		 lMemServer_reader_readers_0_clientBurstLen_D_OUT_1[10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (lMemServer_reader_readers_0_serverProcessing_serverAdapterB_s1[1] &&
	  (!lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeEnq_Q_OUT ||
	   !lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_beforeDeq_Q_OUT ||
	   !lMemServer_reader_readers_0_serverProcessing_serverAdapterB_outData_ff_FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (lMemServer_reader_readers_0_clientData_serverAdapterA_s1[1] &&
	  (!lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeEnq_Q_OUT ||
	   !lMemServer_reader_readers_0_clientData_serverAdapterA_outData_beforeDeq_Q_OUT ||
	   !lMemServer_reader_readers_0_clientData_serverAdapterA_outData_ff_FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (lMemServer_reader_readers_0_clientData_serverAdapterB_s1[1] &&
	  (!lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeEnq_Q_OUT ||
	   !lMemServer_reader_readers_0_clientData_serverAdapterB_outData_beforeDeq_Q_OUT ||
	   !lMemServer_reader_readers_0_clientData_serverAdapterB_outData_ff_FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (lMemServer_writer_writers_0_respFifos_serverAdapterA_s1[1] &&
	  (!lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeEnq_Q_OUT ||
	   !lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_beforeDeq_Q_OUT ||
	   !lMemServer_writer_writers_0_respFifos_serverAdapterA_outData_ff_FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (lMemServer_writer_writers_0_respFifos_serverAdapterB_s1[1] &&
	  (!lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeEnq_Q_OUT ||
	   !lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_beforeDeq_Q_OUT ||
	   !lMemServer_writer_writers_0_respFifos_serverAdapterB_outData_ff_FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l167c20 &&
	  (lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd1 ||
	   WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l169c10 ||
	   lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd3 ||
	   WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17))
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 167, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_reader_trafficFSM_action_l167c20] and\n  [RL_lMemServer_reader_trafficFSM_action_f_init_l168c7,\n  RL_lMemServer_reader_trafficFSM_action_l169c10,\n  RL_lMemServer_reader_trafficFSM_action_f_update_l168c7,\n  RL_lMemServer_reader_trafficFSM_action_l173c17] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd1 &&
	  (WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l169c10 ||
	   lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd3 ||
	   WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17))
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 168, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_reader_trafficFSM_action_f_init_l168c7] and\n  [RL_lMemServer_reader_trafficFSM_action_l169c10,\n  RL_lMemServer_reader_trafficFSM_action_f_update_l168c7,\n  RL_lMemServer_reader_trafficFSM_action_l173c17] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd3 &&
	  WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17)
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 168, column 86: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_reader_trafficFSM_action_f_update_l168c7] and\n  [RL_lMemServer_reader_trafficFSM_action_l173c17] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l169c10 &&
	  (lMemServer_reader_trafficFSM_state_mkFSMstate == 3'd3 ||
	   WILL_FIRE_RL_lMemServer_reader_trafficFSM_action_l173c17))
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 169, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_reader_trafficFSM_action_l169c10] and\n  [RL_lMemServer_reader_trafficFSM_action_f_update_l168c7,\n  RL_lMemServer_reader_trafficFSM_action_l173c17] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l251c20 &&
	  (lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd1 ||
	   WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l253c10 ||
	   lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd3 ||
	   WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l257c17))
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 251, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_writer_trafficFSM_action_l251c20] and\n  [RL_lMemServer_writer_trafficFSM_action_f_init_l252c7,\n  RL_lMemServer_writer_trafficFSM_action_l253c10,\n  RL_lMemServer_writer_trafficFSM_action_f_update_l252c7,\n  RL_lMemServer_writer_trafficFSM_action_l257c17] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd1 &&
	  (WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l253c10 ||
	   lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd3 ||
	   WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l257c17))
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 252, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_writer_trafficFSM_action_f_init_l252c7] and\n  [RL_lMemServer_writer_trafficFSM_action_l253c10,\n  RL_lMemServer_writer_trafficFSM_action_f_update_l252c7,\n  RL_lMemServer_writer_trafficFSM_action_l257c17] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l253c10 &&
	  (lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd3 ||
	   WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l257c17))
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 253, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_writer_trafficFSM_action_l253c10] and\n  [RL_lMemServer_writer_trafficFSM_action_f_update_l252c7,\n  RL_lMemServer_writer_trafficFSM_action_l257c17] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (lMemServer_writer_trafficFSM_state_mkFSMstate == 3'd3 &&
	  WILL_FIRE_RL_lMemServer_writer_trafficFSM_action_l257c17)
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 252, column 86: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_writer_trafficFSM_action_f_update_l252c7] and\n  [RL_lMemServer_writer_trafficFSM_action_l257c17] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_f_init_l157c7 &&
	  (WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_l158c10 ||
	   lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd2))
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 157, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_reader_dbgFSM_action_f_init_l157c7] and\n  [RL_lMemServer_reader_dbgFSM_action_l158c10,\n  RL_lMemServer_reader_dbgFSM_action_f_update_l157c7] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lMemServer_reader_dbgFSM_action_l158c10 &&
	  lMemServer_reader_dbgFSM_state_mkFSMstate == 3'd2)
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 158, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_reader_dbgFSM_action_l158c10] and\n  [RL_lMemServer_reader_dbgFSM_action_f_update_l157c7] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_f_init_l241c7 &&
	  (WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_l242c10 ||
	   lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd2))
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 241, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_writer_dbgFSM_action_f_init_l241c7] and\n  [RL_lMemServer_writer_dbgFSM_action_l242c10,\n  RL_lMemServer_writer_dbgFSM_action_f_update_l241c7] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lMemServer_writer_dbgFSM_action_l242c10 &&
	  lMemServer_writer_dbgFSM_state_mkFSMstate == 3'd2)
	$display("Error: \"/home/nitika/connectal/bsv/MemServer.bsv\", line 242, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_lMemServer_writer_dbgFSM_action_l242c10] and\n  [RL_lMemServer_writer_dbgFSM_action_f_update_l241c7] ) fired in the same\n  clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkXsimTop

