//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule portalIfc_slave_read_server_readReq_put  CF ( portalIfc_slave_read_server_readData_get,
// 						       portalIfc_slave_write_server_writeReq_put,
// 						       portalIfc_slave_write_server_writeData_put,
// 						       portalIfc_slave_write_server_writeDone_get,
// 						       portalIfc_interrupt__read,
// 						       portalIfc_num_portals__write,
// 						       ifc_idResponse,
// 						       ifc_configResp,
// 						       ifc_error );
// schedule portalIfc_slave_read_server_readReq_put  C ( portalIfc_slave_read_server_readReq_put );
//
// schedule portalIfc_slave_read_server_readData_get  CF ( portalIfc_slave_read_server_readReq_put,
// 							portalIfc_slave_write_server_writeReq_put,
// 							portalIfc_slave_write_server_writeData_put,
// 							portalIfc_slave_write_server_writeDone_get,
// 							portalIfc_interrupt__read,
// 							portalIfc_num_portals__write,
// 							ifc_idResponse,
// 							ifc_configResp,
// 							ifc_error );
// schedule portalIfc_slave_read_server_readData_get  C ( portalIfc_slave_read_server_readData_get );
//
// schedule portalIfc_slave_write_server_writeReq_put  CF ( portalIfc_slave_read_server_readReq_put,
// 							 portalIfc_slave_read_server_readData_get,
// 							 portalIfc_slave_write_server_writeData_put,
// 							 portalIfc_slave_write_server_writeDone_get,
// 							 portalIfc_interrupt__read,
// 							 portalIfc_num_portals__write,
// 							 ifc_idResponse,
// 							 ifc_configResp,
// 							 ifc_error );
// schedule portalIfc_slave_write_server_writeReq_put  C ( portalIfc_slave_write_server_writeReq_put );
//
// schedule portalIfc_slave_write_server_writeData_put  CF ( portalIfc_slave_read_server_readReq_put,
// 							  portalIfc_slave_read_server_readData_get,
// 							  portalIfc_slave_write_server_writeReq_put,
// 							  portalIfc_slave_write_server_writeDone_get,
// 							  portalIfc_num_portals__write,
// 							  ifc_idResponse,
// 							  ifc_configResp,
// 							  ifc_error );
// schedule portalIfc_slave_write_server_writeData_put  C ( portalIfc_slave_write_server_writeData_put );
//
// schedule portalIfc_slave_write_server_writeDone_get  CF ( portalIfc_slave_read_server_readReq_put,
// 							  portalIfc_slave_read_server_readData_get,
// 							  portalIfc_slave_write_server_writeReq_put,
// 							  portalIfc_slave_write_server_writeData_put,
// 							  portalIfc_interrupt__read,
// 							  portalIfc_num_portals__write,
// 							  ifc_idResponse,
// 							  ifc_configResp,
// 							  ifc_error );
// schedule portalIfc_slave_write_server_writeDone_get  C ( portalIfc_slave_write_server_writeDone_get );
//
// schedule portalIfc_interrupt__read  CF ( portalIfc_slave_read_server_readReq_put,
// 					 portalIfc_slave_read_server_readData_get,
// 					 portalIfc_slave_write_server_writeReq_put,
// 					 portalIfc_slave_write_server_writeDone_get,
// 					 portalIfc_interrupt__read );
// schedule portalIfc_interrupt__read  SBR ( portalIfc_slave_write_server_writeData_put,
// 					  portalIfc_num_portals__write,
// 					  ifc_idResponse,
// 					  ifc_configResp,
// 					  ifc_error );
//
// schedule portalIfc_num_portals__write  CF ( portalIfc_slave_read_server_readReq_put,
// 					    portalIfc_slave_read_server_readData_get,
// 					    portalIfc_slave_write_server_writeReq_put,
// 					    portalIfc_slave_write_server_writeData_put,
// 					    portalIfc_slave_write_server_writeDone_get,
// 					    ifc_idResponse,
// 					    ifc_configResp,
// 					    ifc_error );
// schedule portalIfc_num_portals__write  SBR ( portalIfc_num_portals__write );
//
// schedule ifc_idResponse  CF ( portalIfc_slave_read_server_readReq_put,
// 			      portalIfc_slave_read_server_readData_get,
// 			      portalIfc_slave_write_server_writeReq_put,
// 			      portalIfc_slave_write_server_writeData_put,
// 			      portalIfc_slave_write_server_writeDone_get,
// 			      portalIfc_num_portals__write,
// 			      ifc_configResp,
// 			      ifc_error );
// schedule ifc_idResponse  C ( ifc_idResponse );
//
// schedule ifc_configResp  CF ( portalIfc_slave_read_server_readReq_put,
// 			      portalIfc_slave_read_server_readData_get,
// 			      portalIfc_slave_write_server_writeReq_put,
// 			      portalIfc_slave_write_server_writeData_put,
// 			      portalIfc_slave_write_server_writeDone_get,
// 			      portalIfc_num_portals__write,
// 			      ifc_idResponse,
// 			      ifc_error );
// schedule ifc_configResp  C ( ifc_configResp );
//
// schedule ifc_error  CF ( portalIfc_slave_read_server_readReq_put,
// 			 portalIfc_slave_read_server_readData_get,
// 			 portalIfc_slave_write_server_writeReq_put,
// 			 portalIfc_slave_write_server_writeData_put,
// 			 portalIfc_slave_write_server_writeDone_get,
// 			 portalIfc_num_portals__write,
// 			 ifc_idResponse,
// 			 ifc_configResp );
// schedule ifc_error  C ( ifc_error );
//
//
// Ports:
// Name                         I/O  size props
// RDY_portalIfc_slave_read_server_readReq_put  O     1
// portalIfc_slave_read_server_readData_get  O    39 reg
// RDY_portalIfc_slave_read_server_readData_get  O     1 reg
// RDY_portalIfc_slave_write_server_writeReq_put  O     1
// RDY_portalIfc_slave_write_server_writeData_put  O     1
// portalIfc_slave_write_server_writeDone_get  O     6 reg
// RDY_portalIfc_slave_write_server_writeDone_get  O     1 reg
// portalIfc_interrupt__read      O     1
// RDY_portalIfc_interrupt__read  O     1 const
// RDY_portalIfc_num_portals__write  O     1 const
// RDY_ifc_idResponse             O     1
// RDY_ifc_configResp             O     1
// RDY_ifc_error                  O     1
// id                             I    32
// CLK                            I     1 clock
// RST_N                          I     1 reset
// portalIfc_slave_read_server_readReq_put  I    28
// portalIfc_slave_write_server_writeReq_put  I    28
// portalIfc_slave_write_server_writeData_put  I    39 reg
// portalIfc_num_portals__write_x  I    32 reg
// ifc_idResponse_sglId           I    32 reg
// ifc_configResp_sglId           I    32 reg
// ifc_error_code                 I    32
// ifc_error_sglId                I    32
// ifc_error_offset               I    64
// ifc_error_extra                I    64
// EN_portalIfc_slave_read_server_readReq_put  I     1
// EN_portalIfc_slave_write_server_writeReq_put  I     1
// EN_portalIfc_slave_write_server_writeData_put  I     1
// EN_portalIfc_num_portals__write  I     1
// EN_ifc_idResponse              I     1
// EN_ifc_configResp              I     1
// EN_ifc_error                   I     1
// EN_portalIfc_slave_read_server_readData_get  I     1
// EN_portalIfc_slave_write_server_writeDone_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMUIndicationProxySynth(id,
				 CLK,
				 RST_N,

				 portalIfc_slave_read_server_readReq_put,
				 EN_portalIfc_slave_read_server_readReq_put,
				 RDY_portalIfc_slave_read_server_readReq_put,

				 EN_portalIfc_slave_read_server_readData_get,
				 portalIfc_slave_read_server_readData_get,
				 RDY_portalIfc_slave_read_server_readData_get,

				 portalIfc_slave_write_server_writeReq_put,
				 EN_portalIfc_slave_write_server_writeReq_put,
				 RDY_portalIfc_slave_write_server_writeReq_put,

				 portalIfc_slave_write_server_writeData_put,
				 EN_portalIfc_slave_write_server_writeData_put,
				 RDY_portalIfc_slave_write_server_writeData_put,

				 EN_portalIfc_slave_write_server_writeDone_get,
				 portalIfc_slave_write_server_writeDone_get,
				 RDY_portalIfc_slave_write_server_writeDone_get,

				 portalIfc_interrupt__read,
				 RDY_portalIfc_interrupt__read,

				 portalIfc_num_portals__write_x,
				 EN_portalIfc_num_portals__write,
				 RDY_portalIfc_num_portals__write,

				 ifc_idResponse_sglId,
				 EN_ifc_idResponse,
				 RDY_ifc_idResponse,

				 ifc_configResp_sglId,
				 EN_ifc_configResp,
				 RDY_ifc_configResp,

				 ifc_error_code,
				 ifc_error_sglId,
				 ifc_error_offset,
				 ifc_error_extra,
				 EN_ifc_error,
				 RDY_ifc_error);
  input  [31 : 0] id;
  input  CLK;
  input  RST_N;

  // action method portalIfc_slave_read_server_readReq_put
  input  [27 : 0] portalIfc_slave_read_server_readReq_put;
  input  EN_portalIfc_slave_read_server_readReq_put;
  output RDY_portalIfc_slave_read_server_readReq_put;

  // actionvalue method portalIfc_slave_read_server_readData_get
  input  EN_portalIfc_slave_read_server_readData_get;
  output [38 : 0] portalIfc_slave_read_server_readData_get;
  output RDY_portalIfc_slave_read_server_readData_get;

  // action method portalIfc_slave_write_server_writeReq_put
  input  [27 : 0] portalIfc_slave_write_server_writeReq_put;
  input  EN_portalIfc_slave_write_server_writeReq_put;
  output RDY_portalIfc_slave_write_server_writeReq_put;

  // action method portalIfc_slave_write_server_writeData_put
  input  [38 : 0] portalIfc_slave_write_server_writeData_put;
  input  EN_portalIfc_slave_write_server_writeData_put;
  output RDY_portalIfc_slave_write_server_writeData_put;

  // actionvalue method portalIfc_slave_write_server_writeDone_get
  input  EN_portalIfc_slave_write_server_writeDone_get;
  output [5 : 0] portalIfc_slave_write_server_writeDone_get;
  output RDY_portalIfc_slave_write_server_writeDone_get;

  // value method portalIfc_interrupt__read
  output portalIfc_interrupt__read;
  output RDY_portalIfc_interrupt__read;

  // action method portalIfc_num_portals__write
  input  [31 : 0] portalIfc_num_portals__write_x;
  input  EN_portalIfc_num_portals__write;
  output RDY_portalIfc_num_portals__write;

  // action method ifc_idResponse
  input  [31 : 0] ifc_idResponse_sglId;
  input  EN_ifc_idResponse;
  output RDY_ifc_idResponse;

  // action method ifc_configResp
  input  [31 : 0] ifc_configResp_sglId;
  input  EN_ifc_configResp;
  output RDY_ifc_configResp;

  // action method ifc_error
  input  [31 : 0] ifc_error_code;
  input  [31 : 0] ifc_error_sglId;
  input  [63 : 0] ifc_error_offset;
  input  [63 : 0] ifc_error_extra;
  input  EN_ifc_error;
  output RDY_ifc_error;

  // signals for module outputs
  wire [38 : 0] portalIfc_slave_read_server_readData_get;
  wire [5 : 0] portalIfc_slave_write_server_writeDone_get;
  wire RDY_ifc_configResp,
       RDY_ifc_error,
       RDY_ifc_idResponse,
       RDY_portalIfc_interrupt__read,
       RDY_portalIfc_num_portals__write,
       RDY_portalIfc_slave_read_server_readData_get,
       RDY_portalIfc_slave_read_server_readReq_put,
       RDY_portalIfc_slave_write_server_writeData_put,
       RDY_portalIfc_slave_write_server_writeDone_get,
       RDY_portalIfc_slave_write_server_writeReq_put,
       portalIfc_interrupt__read;

  // register ctrlPort_cycle_count
  reg [63 : 0] ctrlPort_cycle_count;
  wire [63 : 0] ctrlPort_cycle_count_D_IN;
  wire ctrlPort_cycle_count_EN;

  // register ctrlPort_interruptEnableReg
  reg ctrlPort_interruptEnableReg;
  wire ctrlPort_interruptEnableReg_D_IN, ctrlPort_interruptEnableReg_EN;

  // register ctrlPort_num_portals_reg
  reg [31 : 0] ctrlPort_num_portals_reg;
  wire [31 : 0] ctrlPort_num_portals_reg_D_IN;
  wire ctrlPort_num_portals_reg_EN;

  // register ctrlPort_snapshot
  reg [31 : 0] ctrlPort_snapshot;
  wire [31 : 0] ctrlPort_snapshot_D_IN;
  wire ctrlPort_snapshot_EN;

  // register memslave_fifoReadAddrGenerator_addrReg
  reg [4 : 0] memslave_fifoReadAddrGenerator_addrReg;
  wire [4 : 0] memslave_fifoReadAddrGenerator_addrReg_D_IN;
  wire memslave_fifoReadAddrGenerator_addrReg_EN;

  // register memslave_fifoReadAddrGenerator_burstCountReg
  reg [9 : 0] memslave_fifoReadAddrGenerator_burstCountReg;
  wire [9 : 0] memslave_fifoReadAddrGenerator_burstCountReg_D_IN;
  wire memslave_fifoReadAddrGenerator_burstCountReg_EN;

  // register memslave_fifoReadAddrGenerator_isFirstReg
  reg memslave_fifoReadAddrGenerator_isFirstReg;
  wire memslave_fifoReadAddrGenerator_isFirstReg_D_IN,
       memslave_fifoReadAddrGenerator_isFirstReg_EN;

  // register memslave_fifoReadAddrGenerator_isLastReg
  reg memslave_fifoReadAddrGenerator_isLastReg;
  wire memslave_fifoReadAddrGenerator_isLastReg_D_IN,
       memslave_fifoReadAddrGenerator_isLastReg_EN;

  // register memslave_fifoWriteAddrGenerator_addrReg
  reg [4 : 0] memslave_fifoWriteAddrGenerator_addrReg;
  wire [4 : 0] memslave_fifoWriteAddrGenerator_addrReg_D_IN;
  wire memslave_fifoWriteAddrGenerator_addrReg_EN;

  // register memslave_fifoWriteAddrGenerator_burstCountReg
  reg [9 : 0] memslave_fifoWriteAddrGenerator_burstCountReg;
  wire [9 : 0] memslave_fifoWriteAddrGenerator_burstCountReg_D_IN;
  wire memslave_fifoWriteAddrGenerator_burstCountReg_EN;

  // register memslave_fifoWriteAddrGenerator_isFirstReg
  reg memslave_fifoWriteAddrGenerator_isFirstReg;
  wire memslave_fifoWriteAddrGenerator_isFirstReg_D_IN,
       memslave_fifoWriteAddrGenerator_isFirstReg_EN;

  // register memslave_fifoWriteAddrGenerator_isLastReg
  reg memslave_fifoWriteAddrGenerator_isLastReg;
  wire memslave_fifoWriteAddrGenerator_isLastReg_D_IN,
       memslave_fifoWriteAddrGenerator_isLastReg_EN;

  // ports of submodule dut
  wire [63 : 0] dut_ifc_error_extra, dut_ifc_error_offset;
  wire [31 : 0] dut_ifc_configResp_sglId,
		dut_ifc_error_code,
		dut_ifc_error_sglId,
		dut_ifc_idResponse_sglId,
		dut_portalIfc_indications_0_first,
		dut_portalIfc_indications_1_first,
		dut_portalIfc_indications_2_first,
		dut_portalIfc_intr_channel;
  wire [15 : 0] dut_portalIfc_messageSize_size_methodNumber;
  wire dut_EN_ifc_configResp,
       dut_EN_ifc_error,
       dut_EN_ifc_idResponse,
       dut_EN_portalIfc_indications_0_deq,
       dut_EN_portalIfc_indications_1_deq,
       dut_EN_portalIfc_indications_2_deq,
       dut_RDY_ifc_configResp,
       dut_RDY_ifc_error,
       dut_RDY_ifc_idResponse,
       dut_RDY_portalIfc_indications_0_deq,
       dut_RDY_portalIfc_indications_0_first,
       dut_RDY_portalIfc_indications_1_deq,
       dut_RDY_portalIfc_indications_1_first,
       dut_RDY_portalIfc_indications_2_deq,
       dut_RDY_portalIfc_indications_2_first,
       dut_portalIfc_indications_0_notEmpty,
       dut_portalIfc_indications_1_notEmpty,
       dut_portalIfc_indications_2_notEmpty,
       dut_portalIfc_intr_status;

  // ports of submodule memslave_doneFifo
  wire [5 : 0] memslave_doneFifo_D_IN, memslave_doneFifo_D_OUT;
  wire memslave_doneFifo_CLR,
       memslave_doneFifo_DEQ,
       memslave_doneFifo_EMPTY_N,
       memslave_doneFifo_ENQ,
       memslave_doneFifo_FULL_N;

  // ports of submodule memslave_fifoReadAddrGenerator_addrBeatFifo
  wire [21 : 0] memslave_fifoReadAddrGenerator_addrBeatFifo_D_IN,
		memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT;
  wire memslave_fifoReadAddrGenerator_addrBeatFifo_CLR,
       memslave_fifoReadAddrGenerator_addrBeatFifo_DEQ,
       memslave_fifoReadAddrGenerator_addrBeatFifo_EMPTY_N,
       memslave_fifoReadAddrGenerator_addrBeatFifo_ENQ,
       memslave_fifoReadAddrGenerator_addrBeatFifo_FULL_N;

  // ports of submodule memslave_fifoReadAddrGenerator_requestFifo
  wire [20 : 0] memslave_fifoReadAddrGenerator_requestFifo_D_IN,
		memslave_fifoReadAddrGenerator_requestFifo_D_OUT;
  wire memslave_fifoReadAddrGenerator_requestFifo_CLR,
       memslave_fifoReadAddrGenerator_requestFifo_DEQ,
       memslave_fifoReadAddrGenerator_requestFifo_EMPTY_N,
       memslave_fifoReadAddrGenerator_requestFifo_ENQ,
       memslave_fifoReadAddrGenerator_requestFifo_FULL_N;

  // ports of submodule memslave_fifoWriteAddrGenerator_addrBeatFifo
  wire [21 : 0] memslave_fifoWriteAddrGenerator_addrBeatFifo_D_IN,
		memslave_fifoWriteAddrGenerator_addrBeatFifo_D_OUT;
  wire memslave_fifoWriteAddrGenerator_addrBeatFifo_CLR,
       memslave_fifoWriteAddrGenerator_addrBeatFifo_DEQ,
       memslave_fifoWriteAddrGenerator_addrBeatFifo_EMPTY_N,
       memslave_fifoWriteAddrGenerator_addrBeatFifo_ENQ,
       memslave_fifoWriteAddrGenerator_addrBeatFifo_FULL_N;

  // ports of submodule memslave_fifoWriteAddrGenerator_requestFifo
  wire [20 : 0] memslave_fifoWriteAddrGenerator_requestFifo_D_IN,
		memslave_fifoWriteAddrGenerator_requestFifo_D_OUT;
  wire memslave_fifoWriteAddrGenerator_requestFifo_CLR,
       memslave_fifoWriteAddrGenerator_requestFifo_DEQ,
       memslave_fifoWriteAddrGenerator_requestFifo_EMPTY_N,
       memslave_fifoWriteAddrGenerator_requestFifo_ENQ,
       memslave_fifoWriteAddrGenerator_requestFifo_FULL_N;

  // ports of submodule memslave_fifoWriteDoneFifo
  wire [5 : 0] memslave_fifoWriteDoneFifo_D_IN,
	       memslave_fifoWriteDoneFifo_D_OUT;
  wire memslave_fifoWriteDoneFifo_CLR,
       memslave_fifoWriteDoneFifo_DEQ,
       memslave_fifoWriteDoneFifo_EMPTY_N,
       memslave_fifoWriteDoneFifo_ENQ,
       memslave_fifoWriteDoneFifo_FULL_N;

  // ports of submodule memslave_req_ars
  wire [20 : 0] memslave_req_ars_D_IN, memslave_req_ars_D_OUT;
  wire memslave_req_ars_CLR,
       memslave_req_ars_DEQ,
       memslave_req_ars_EMPTY_N,
       memslave_req_ars_ENQ,
       memslave_req_ars_FULL_N;

  // ports of submodule memslave_req_aws
  wire [20 : 0] memslave_req_aws_D_IN, memslave_req_aws_D_OUT;
  wire memslave_req_aws_CLR,
       memslave_req_aws_DEQ,
       memslave_req_aws_EMPTY_N,
       memslave_req_aws_ENQ,
       memslave_req_aws_FULL_N;

  // ports of submodule memslave_rs
  wire [1 : 0] memslave_rs_D_IN, memslave_rs_D_OUT;
  wire memslave_rs_CLR,
       memslave_rs_DEQ,
       memslave_rs_EMPTY_N,
       memslave_rs_ENQ,
       memslave_rs_FULL_N;

  // ports of submodule memslave_rsCtrl
  wire memslave_rsCtrl_CLR,
       memslave_rsCtrl_DEQ,
       memslave_rsCtrl_D_IN,
       memslave_rsCtrl_D_OUT,
       memslave_rsCtrl_EMPTY_N,
       memslave_rsCtrl_ENQ,
       memslave_rsCtrl_FULL_N;

  // ports of submodule memslave_rvFifo
  wire [38 : 0] memslave_rvFifo_D_IN, memslave_rvFifo_D_OUT;
  wire memslave_rvFifo_CLR,
       memslave_rvFifo_DEQ,
       memslave_rvFifo_EMPTY_N,
       memslave_rvFifo_ENQ,
       memslave_rvFifo_FULL_N;

  // ports of submodule memslave_ws
  wire [1 : 0] memslave_ws_D_IN;
  wire memslave_ws_CLR,
       memslave_ws_DEQ,
       memslave_ws_EMPTY_N,
       memslave_ws_ENQ,
       memslave_ws_FULL_N;

  // ports of submodule memslave_wsCtrl
  wire memslave_wsCtrl_CLR,
       memslave_wsCtrl_DEQ,
       memslave_wsCtrl_D_IN,
       memslave_wsCtrl_D_OUT,
       memslave_wsCtrl_EMPTY_N,
       memslave_wsCtrl_ENQ,
       memslave_wsCtrl_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_memslave_rvrule;

  // remaining internal signals
  reg [31 : 0] v__h2685, v__h2840, x1_avValue_data__h3080;
  reg CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q1,
      CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q2,
      x__h3123;
  wire [31 : 0] v___1__h2773, x1_avValue_data__h3096;
  wire [9 : 0] burstCount___1__h1371,
	       burstCount___1__h765,
	       burstCount__h1329,
	       burstCount__h720;
  wire [6 : 0] x__h3385, x__h3649;
  wire [4 : 0] addr__h1327, addr__h718;
  wire IF_memslave_fifoReadAddrGenerator_isFirstReg_T_ETC___d21,
       IF_memslave_fifoWriteAddrGenerator_isFirstReg__ETC___d43,
       NOT_memslave_fifoReadAddrGenerator_addrBeatFif_ETC___d77,
       NOT_memslave_fifoReadAddrGenerator_addrBeatFif_ETC___d82,
       memslave_rvFifo_i_notFull__6_AND_memslave_rsCt_ETC___d85;

  // action method portalIfc_slave_read_server_readReq_put
  assign RDY_portalIfc_slave_read_server_readReq_put =
	     memslave_req_ars_FULL_N && memslave_rs_FULL_N &&
	     memslave_rsCtrl_FULL_N ;

  // actionvalue method portalIfc_slave_read_server_readData_get
  assign portalIfc_slave_read_server_readData_get = memslave_rvFifo_D_OUT ;
  assign RDY_portalIfc_slave_read_server_readData_get =
	     memslave_rvFifo_EMPTY_N ;

  // action method portalIfc_slave_write_server_writeReq_put
  assign RDY_portalIfc_slave_write_server_writeReq_put =
	     memslave_req_aws_FULL_N && memslave_ws_FULL_N &&
	     memslave_wsCtrl_FULL_N ;

  // action method portalIfc_slave_write_server_writeData_put
  assign RDY_portalIfc_slave_write_server_writeData_put =
	     memslave_wsCtrl_EMPTY_N &&
	     memslave_fifoWriteAddrGenerator_addrBeatFifo_EMPTY_N &&
	     (!memslave_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[0] ||
	      memslave_fifoWriteDoneFifo_FULL_N) ;

  // actionvalue method portalIfc_slave_write_server_writeDone_get
  assign portalIfc_slave_write_server_writeDone_get =
	     memslave_doneFifo_D_OUT ;
  assign RDY_portalIfc_slave_write_server_writeDone_get =
	     memslave_doneFifo_EMPTY_N ;

  // value method portalIfc_interrupt__read
  assign portalIfc_interrupt__read =
	     dut_portalIfc_intr_status && ctrlPort_interruptEnableReg ;
  assign RDY_portalIfc_interrupt__read = 1'd1 ;

  // action method portalIfc_num_portals__write
  assign RDY_portalIfc_num_portals__write = 1'd1 ;

  // action method ifc_idResponse
  assign RDY_ifc_idResponse = dut_RDY_ifc_idResponse ;

  // action method ifc_configResp
  assign RDY_ifc_configResp = dut_RDY_ifc_configResp ;

  // action method ifc_error
  assign RDY_ifc_error = dut_RDY_ifc_error ;

  // submodule dut
  mkMMUIndicationOutput dut(.CLK(CLK),
			    .RST_N(RST_N),
			    .ifc_configResp_sglId(dut_ifc_configResp_sglId),
			    .ifc_error_code(dut_ifc_error_code),
			    .ifc_error_extra(dut_ifc_error_extra),
			    .ifc_error_offset(dut_ifc_error_offset),
			    .ifc_error_sglId(dut_ifc_error_sglId),
			    .ifc_idResponse_sglId(dut_ifc_idResponse_sglId),
			    .portalIfc_messageSize_size_methodNumber(dut_portalIfc_messageSize_size_methodNumber),
			    .EN_portalIfc_indications_0_deq(dut_EN_portalIfc_indications_0_deq),
			    .EN_portalIfc_indications_1_deq(dut_EN_portalIfc_indications_1_deq),
			    .EN_portalIfc_indications_2_deq(dut_EN_portalIfc_indications_2_deq),
			    .EN_ifc_idResponse(dut_EN_ifc_idResponse),
			    .EN_ifc_configResp(dut_EN_ifc_configResp),
			    .EN_ifc_error(dut_EN_ifc_error),
			    .portalIfc_messageSize_size(),
			    .RDY_portalIfc_messageSize_size(),
			    .portalIfc_indications_0_first(dut_portalIfc_indications_0_first),
			    .RDY_portalIfc_indications_0_first(dut_RDY_portalIfc_indications_0_first),
			    .RDY_portalIfc_indications_0_deq(dut_RDY_portalIfc_indications_0_deq),
			    .portalIfc_indications_0_notEmpty(dut_portalIfc_indications_0_notEmpty),
			    .RDY_portalIfc_indications_0_notEmpty(),
			    .portalIfc_indications_1_first(dut_portalIfc_indications_1_first),
			    .RDY_portalIfc_indications_1_first(dut_RDY_portalIfc_indications_1_first),
			    .RDY_portalIfc_indications_1_deq(dut_RDY_portalIfc_indications_1_deq),
			    .portalIfc_indications_1_notEmpty(dut_portalIfc_indications_1_notEmpty),
			    .RDY_portalIfc_indications_1_notEmpty(),
			    .portalIfc_indications_2_first(dut_portalIfc_indications_2_first),
			    .RDY_portalIfc_indications_2_first(dut_RDY_portalIfc_indications_2_first),
			    .RDY_portalIfc_indications_2_deq(dut_RDY_portalIfc_indications_2_deq),
			    .portalIfc_indications_2_notEmpty(dut_portalIfc_indications_2_notEmpty),
			    .RDY_portalIfc_indications_2_notEmpty(),
			    .portalIfc_intr_status(dut_portalIfc_intr_status),
			    .RDY_portalIfc_intr_status(),
			    .portalIfc_intr_channel(dut_portalIfc_intr_channel),
			    .RDY_portalIfc_intr_channel(),
			    .RDY_ifc_idResponse(dut_RDY_ifc_idResponse),
			    .RDY_ifc_configResp(dut_RDY_ifc_configResp),
			    .RDY_ifc_error(dut_RDY_ifc_error));

  // submodule memslave_doneFifo
  FIFO1 #(.width(32'd6), .guarded(1'd1)) memslave_doneFifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(memslave_doneFifo_D_IN),
							   .ENQ(memslave_doneFifo_ENQ),
							   .DEQ(memslave_doneFifo_DEQ),
							   .CLR(memslave_doneFifo_CLR),
							   .D_OUT(memslave_doneFifo_D_OUT),
							   .FULL_N(memslave_doneFifo_FULL_N),
							   .EMPTY_N(memslave_doneFifo_EMPTY_N));

  // submodule memslave_fifoReadAddrGenerator_addrBeatFifo
  FIFO2 #(.width(32'd22),
	  .guarded(1'd1)) memslave_fifoReadAddrGenerator_addrBeatFifo(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(memslave_fifoReadAddrGenerator_addrBeatFifo_D_IN),
								      .ENQ(memslave_fifoReadAddrGenerator_addrBeatFifo_ENQ),
								      .DEQ(memslave_fifoReadAddrGenerator_addrBeatFifo_DEQ),
								      .CLR(memslave_fifoReadAddrGenerator_addrBeatFifo_CLR),
								      .D_OUT(memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT),
								      .FULL_N(memslave_fifoReadAddrGenerator_addrBeatFifo_FULL_N),
								      .EMPTY_N(memslave_fifoReadAddrGenerator_addrBeatFifo_EMPTY_N));

  // submodule memslave_fifoReadAddrGenerator_requestFifo
  FIFO1 #(.width(32'd21),
	  .guarded(1'd1)) memslave_fifoReadAddrGenerator_requestFifo(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(memslave_fifoReadAddrGenerator_requestFifo_D_IN),
								     .ENQ(memslave_fifoReadAddrGenerator_requestFifo_ENQ),
								     .DEQ(memslave_fifoReadAddrGenerator_requestFifo_DEQ),
								     .CLR(memslave_fifoReadAddrGenerator_requestFifo_CLR),
								     .D_OUT(memslave_fifoReadAddrGenerator_requestFifo_D_OUT),
								     .FULL_N(memslave_fifoReadAddrGenerator_requestFifo_FULL_N),
								     .EMPTY_N(memslave_fifoReadAddrGenerator_requestFifo_EMPTY_N));

  // submodule memslave_fifoWriteAddrGenerator_addrBeatFifo
  FIFO2 #(.width(32'd22),
	  .guarded(1'd1)) memslave_fifoWriteAddrGenerator_addrBeatFifo(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(memslave_fifoWriteAddrGenerator_addrBeatFifo_D_IN),
								       .ENQ(memslave_fifoWriteAddrGenerator_addrBeatFifo_ENQ),
								       .DEQ(memslave_fifoWriteAddrGenerator_addrBeatFifo_DEQ),
								       .CLR(memslave_fifoWriteAddrGenerator_addrBeatFifo_CLR),
								       .D_OUT(memslave_fifoWriteAddrGenerator_addrBeatFifo_D_OUT),
								       .FULL_N(memslave_fifoWriteAddrGenerator_addrBeatFifo_FULL_N),
								       .EMPTY_N(memslave_fifoWriteAddrGenerator_addrBeatFifo_EMPTY_N));

  // submodule memslave_fifoWriteAddrGenerator_requestFifo
  FIFO1 #(.width(32'd21),
	  .guarded(1'd1)) memslave_fifoWriteAddrGenerator_requestFifo(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(memslave_fifoWriteAddrGenerator_requestFifo_D_IN),
								      .ENQ(memslave_fifoWriteAddrGenerator_requestFifo_ENQ),
								      .DEQ(memslave_fifoWriteAddrGenerator_requestFifo_DEQ),
								      .CLR(memslave_fifoWriteAddrGenerator_requestFifo_CLR),
								      .D_OUT(memslave_fifoWriteAddrGenerator_requestFifo_D_OUT),
								      .FULL_N(memslave_fifoWriteAddrGenerator_requestFifo_FULL_N),
								      .EMPTY_N(memslave_fifoWriteAddrGenerator_requestFifo_EMPTY_N));

  // submodule memslave_fifoWriteDoneFifo
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) memslave_fifoWriteDoneFifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(memslave_fifoWriteDoneFifo_D_IN),
						     .ENQ(memslave_fifoWriteDoneFifo_ENQ),
						     .DEQ(memslave_fifoWriteDoneFifo_DEQ),
						     .CLR(memslave_fifoWriteDoneFifo_CLR),
						     .D_OUT(memslave_fifoWriteDoneFifo_D_OUT),
						     .FULL_N(memslave_fifoWriteDoneFifo_FULL_N),
						     .EMPTY_N(memslave_fifoWriteDoneFifo_EMPTY_N));

  // submodule memslave_req_ars
  FIFO1 #(.width(32'd21), .guarded(1'd1)) memslave_req_ars(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(memslave_req_ars_D_IN),
							   .ENQ(memslave_req_ars_ENQ),
							   .DEQ(memslave_req_ars_DEQ),
							   .CLR(memslave_req_ars_CLR),
							   .D_OUT(memslave_req_ars_D_OUT),
							   .FULL_N(memslave_req_ars_FULL_N),
							   .EMPTY_N(memslave_req_ars_EMPTY_N));

  // submodule memslave_req_aws
  FIFO1 #(.width(32'd21), .guarded(1'd1)) memslave_req_aws(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(memslave_req_aws_D_IN),
							   .ENQ(memslave_req_aws_ENQ),
							   .DEQ(memslave_req_aws_DEQ),
							   .CLR(memslave_req_aws_CLR),
							   .D_OUT(memslave_req_aws_D_OUT),
							   .FULL_N(memslave_req_aws_FULL_N),
							   .EMPTY_N(memslave_req_aws_EMPTY_N));

  // submodule memslave_rs
  FIFO1 #(.width(32'd2), .guarded(1'd1)) memslave_rs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(memslave_rs_D_IN),
						     .ENQ(memslave_rs_ENQ),
						     .DEQ(memslave_rs_DEQ),
						     .CLR(memslave_rs_CLR),
						     .D_OUT(memslave_rs_D_OUT),
						     .FULL_N(memslave_rs_FULL_N),
						     .EMPTY_N(memslave_rs_EMPTY_N));

  // submodule memslave_rsCtrl
  FIFO1 #(.width(32'd1), .guarded(1'd1)) memslave_rsCtrl(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(memslave_rsCtrl_D_IN),
							 .ENQ(memslave_rsCtrl_ENQ),
							 .DEQ(memslave_rsCtrl_DEQ),
							 .CLR(memslave_rsCtrl_CLR),
							 .D_OUT(memslave_rsCtrl_D_OUT),
							 .FULL_N(memslave_rsCtrl_FULL_N),
							 .EMPTY_N(memslave_rsCtrl_EMPTY_N));

  // submodule memslave_rvFifo
  FIFO2 #(.width(32'd39), .guarded(1'd1)) memslave_rvFifo(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(memslave_rvFifo_D_IN),
							  .ENQ(memslave_rvFifo_ENQ),
							  .DEQ(memslave_rvFifo_DEQ),
							  .CLR(memslave_rvFifo_CLR),
							  .D_OUT(memslave_rvFifo_D_OUT),
							  .FULL_N(memslave_rvFifo_FULL_N),
							  .EMPTY_N(memslave_rvFifo_EMPTY_N));

  // submodule memslave_ws
  FIFO1 #(.width(32'd2), .guarded(1'd1)) memslave_ws(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(memslave_ws_D_IN),
						     .ENQ(memslave_ws_ENQ),
						     .DEQ(memslave_ws_DEQ),
						     .CLR(memslave_ws_CLR),
						     .D_OUT(),
						     .FULL_N(memslave_ws_FULL_N),
						     .EMPTY_N(memslave_ws_EMPTY_N));

  // submodule memslave_wsCtrl
  FIFO1 #(.width(32'd1), .guarded(1'd1)) memslave_wsCtrl(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(memslave_wsCtrl_D_IN),
							 .ENQ(memslave_wsCtrl_ENQ),
							 .DEQ(memslave_wsCtrl_DEQ),
							 .CLR(memslave_wsCtrl_CLR),
							 .D_OUT(memslave_wsCtrl_D_OUT),
							 .FULL_N(memslave_wsCtrl_FULL_N),
							 .EMPTY_N(memslave_wsCtrl_EMPTY_N));

  // rule RL_memslave_rvrule
  assign WILL_FIRE_RL_memslave_rvrule =
	     memslave_fifoReadAddrGenerator_addrBeatFifo_EMPTY_N &&
	     memslave_rsCtrl_EMPTY_N &&
	     memslave_rs_EMPTY_N &&
	     memslave_rvFifo_i_notFull__6_AND_memslave_rsCt_ETC___d85 ;

  // register ctrlPort_cycle_count
  assign ctrlPort_cycle_count_D_IN = ctrlPort_cycle_count + 64'd1 ;
  assign ctrlPort_cycle_count_EN = 1'd1 ;

  // register ctrlPort_interruptEnableReg
  assign ctrlPort_interruptEnableReg_D_IN =
	     portalIfc_slave_write_server_writeData_put[7] ;
  assign ctrlPort_interruptEnableReg_EN =
	     EN_portalIfc_slave_write_server_writeData_put &&
	     memslave_wsCtrl_D_OUT &&
	     memslave_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
	     5'd4 ;

  // register ctrlPort_num_portals_reg
  assign ctrlPort_num_portals_reg_D_IN = portalIfc_num_portals__write_x ;
  assign ctrlPort_num_portals_reg_EN = EN_portalIfc_num_portals__write ;

  // register ctrlPort_snapshot
  assign ctrlPort_snapshot_D_IN = ctrlPort_cycle_count[31:0] ;
  assign ctrlPort_snapshot_EN =
	     WILL_FIRE_RL_memslave_rvrule && memslave_rsCtrl_D_OUT &&
	     memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
	     5'h18 ;

  // register memslave_fifoReadAddrGenerator_addrReg
  assign memslave_fifoReadAddrGenerator_addrReg_D_IN = addr__h718 + 5'd4 ;
  assign memslave_fifoReadAddrGenerator_addrReg_EN =
	     memslave_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_fifoReadAddrGenerator_burstCountReg
  assign memslave_fifoReadAddrGenerator_burstCountReg_D_IN =
	     burstCount__h720 - 10'd1 ;
  assign memslave_fifoReadAddrGenerator_burstCountReg_EN =
	     memslave_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_fifoReadAddrGenerator_isFirstReg
  assign memslave_fifoReadAddrGenerator_isFirstReg_D_IN =
	     IF_memslave_fifoReadAddrGenerator_isFirstReg_T_ETC___d21 ;
  assign memslave_fifoReadAddrGenerator_isFirstReg_EN =
	     memslave_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_fifoReadAddrGenerator_isLastReg
  assign memslave_fifoReadAddrGenerator_isLastReg_D_IN =
	     burstCount__h720 == 10'd2 ;
  assign memslave_fifoReadAddrGenerator_isLastReg_EN =
	     memslave_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_fifoWriteAddrGenerator_addrReg
  assign memslave_fifoWriteAddrGenerator_addrReg_D_IN = addr__h1327 + 5'd4 ;
  assign memslave_fifoWriteAddrGenerator_addrReg_EN =
	     memslave_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_fifoWriteAddrGenerator_burstCountReg
  assign memslave_fifoWriteAddrGenerator_burstCountReg_D_IN =
	     burstCount__h1329 - 10'd1 ;
  assign memslave_fifoWriteAddrGenerator_burstCountReg_EN =
	     memslave_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_fifoWriteAddrGenerator_isFirstReg
  assign memslave_fifoWriteAddrGenerator_isFirstReg_D_IN =
	     IF_memslave_fifoWriteAddrGenerator_isFirstReg__ETC___d43 ;
  assign memslave_fifoWriteAddrGenerator_isFirstReg_EN =
	     memslave_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_fifoWriteAddrGenerator_isLastReg
  assign memslave_fifoWriteAddrGenerator_isLastReg_D_IN =
	     burstCount__h1329 == 10'd2 ;
  assign memslave_fifoWriteAddrGenerator_isLastReg_EN =
	     memslave_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // submodule dut
  assign dut_ifc_configResp_sglId = ifc_configResp_sglId ;
  assign dut_ifc_error_code = ifc_error_code ;
  assign dut_ifc_error_extra = ifc_error_extra ;
  assign dut_ifc_error_offset = ifc_error_offset ;
  assign dut_ifc_error_sglId = ifc_error_sglId ;
  assign dut_ifc_idResponse_sglId = ifc_idResponse_sglId ;
  assign dut_portalIfc_messageSize_size_methodNumber = 16'h0 ;
  assign dut_EN_portalIfc_indications_0_deq =
	     WILL_FIRE_RL_memslave_rvrule && memslave_rs_D_OUT == 2'd0 &&
	     !memslave_rsCtrl_D_OUT &&
	     memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
	     5'd0 ;
  assign dut_EN_portalIfc_indications_1_deq =
	     WILL_FIRE_RL_memslave_rvrule && memslave_rs_D_OUT == 2'd1 &&
	     !memslave_rsCtrl_D_OUT &&
	     memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
	     5'd0 ;
  assign dut_EN_portalIfc_indications_2_deq =
	     WILL_FIRE_RL_memslave_rvrule && memslave_rs_D_OUT == 2'd2 &&
	     !memslave_rsCtrl_D_OUT &&
	     memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
	     5'd0 ;
  assign dut_EN_ifc_idResponse = EN_ifc_idResponse ;
  assign dut_EN_ifc_configResp = EN_ifc_configResp ;
  assign dut_EN_ifc_error = EN_ifc_error ;

  // submodule memslave_doneFifo
  assign memslave_doneFifo_D_IN = memslave_fifoWriteDoneFifo_D_OUT ;
  assign memslave_doneFifo_ENQ =
	     memslave_fifoWriteDoneFifo_EMPTY_N && memslave_ws_EMPTY_N &&
	     memslave_wsCtrl_EMPTY_N &&
	     memslave_doneFifo_FULL_N ;
  assign memslave_doneFifo_DEQ =
	     EN_portalIfc_slave_write_server_writeDone_get ;
  assign memslave_doneFifo_CLR = 1'b0 ;

  // submodule memslave_fifoReadAddrGenerator_addrBeatFifo
  assign memslave_fifoReadAddrGenerator_addrBeatFifo_D_IN =
	     { addr__h718,
	       burstCount__h720,
	       memslave_fifoReadAddrGenerator_requestFifo_D_OUT[5:0],
	       IF_memslave_fifoReadAddrGenerator_isFirstReg_T_ETC___d21 } ;
  assign memslave_fifoReadAddrGenerator_addrBeatFifo_ENQ =
	     memslave_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;
  assign memslave_fifoReadAddrGenerator_addrBeatFifo_DEQ =
	     WILL_FIRE_RL_memslave_rvrule ;
  assign memslave_fifoReadAddrGenerator_addrBeatFifo_CLR = 1'b0 ;

  // submodule memslave_fifoReadAddrGenerator_requestFifo
  assign memslave_fifoReadAddrGenerator_requestFifo_D_IN =
	     memslave_req_ars_D_OUT ;
  assign memslave_fifoReadAddrGenerator_requestFifo_ENQ =
	     memslave_req_ars_EMPTY_N &&
	     memslave_fifoReadAddrGenerator_requestFifo_FULL_N ;
  assign memslave_fifoReadAddrGenerator_requestFifo_DEQ =
	     memslave_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoReadAddrGenerator_addrBeatFifo_FULL_N &&
	     IF_memslave_fifoReadAddrGenerator_isFirstReg_T_ETC___d21 ;
  assign memslave_fifoReadAddrGenerator_requestFifo_CLR = 1'b0 ;

  // submodule memslave_fifoWriteAddrGenerator_addrBeatFifo
  assign memslave_fifoWriteAddrGenerator_addrBeatFifo_D_IN =
	     { addr__h1327,
	       burstCount__h1329,
	       memslave_fifoWriteAddrGenerator_requestFifo_D_OUT[5:0],
	       IF_memslave_fifoWriteAddrGenerator_isFirstReg__ETC___d43 } ;
  assign memslave_fifoWriteAddrGenerator_addrBeatFifo_ENQ =
	     memslave_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;
  assign memslave_fifoWriteAddrGenerator_addrBeatFifo_DEQ =
	     EN_portalIfc_slave_write_server_writeData_put ;
  assign memslave_fifoWriteAddrGenerator_addrBeatFifo_CLR = 1'b0 ;

  // submodule memslave_fifoWriteAddrGenerator_requestFifo
  assign memslave_fifoWriteAddrGenerator_requestFifo_D_IN =
	     memslave_req_aws_D_OUT ;
  assign memslave_fifoWriteAddrGenerator_requestFifo_ENQ =
	     memslave_req_aws_EMPTY_N &&
	     memslave_fifoWriteAddrGenerator_requestFifo_FULL_N ;
  assign memslave_fifoWriteAddrGenerator_requestFifo_DEQ =
	     memslave_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_fifoWriteAddrGenerator_addrBeatFifo_FULL_N &&
	     IF_memslave_fifoWriteAddrGenerator_isFirstReg__ETC___d43 ;
  assign memslave_fifoWriteAddrGenerator_requestFifo_CLR = 1'b0 ;

  // submodule memslave_fifoWriteDoneFifo
  assign memslave_fifoWriteDoneFifo_D_IN =
	     memslave_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[6:1] ;
  assign memslave_fifoWriteDoneFifo_ENQ =
	     EN_portalIfc_slave_write_server_writeData_put &&
	     memslave_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[0] ;
  assign memslave_fifoWriteDoneFifo_DEQ =
	     memslave_fifoWriteDoneFifo_EMPTY_N && memslave_ws_EMPTY_N &&
	     memslave_wsCtrl_EMPTY_N &&
	     memslave_doneFifo_FULL_N ;
  assign memslave_fifoWriteDoneFifo_CLR = 1'b0 ;

  // submodule memslave_req_ars
  assign memslave_req_ars_D_IN =
	     portalIfc_slave_read_server_readReq_put[20:0] ;
  assign memslave_req_ars_ENQ = EN_portalIfc_slave_read_server_readReq_put ;
  assign memslave_req_ars_DEQ =
	     memslave_req_ars_EMPTY_N &&
	     memslave_fifoReadAddrGenerator_requestFifo_FULL_N ;
  assign memslave_req_ars_CLR = 1'b0 ;

  // submodule memslave_req_aws
  assign memslave_req_aws_D_IN =
	     portalIfc_slave_write_server_writeReq_put[20:0] ;
  assign memslave_req_aws_ENQ = EN_portalIfc_slave_write_server_writeReq_put ;
  assign memslave_req_aws_DEQ =
	     memslave_req_aws_EMPTY_N &&
	     memslave_fifoWriteAddrGenerator_requestFifo_FULL_N ;
  assign memslave_req_aws_CLR = 1'b0 ;

  // submodule memslave_rs
  assign memslave_rs_D_IN = x__h3385[1:0] ;
  assign memslave_rs_ENQ = EN_portalIfc_slave_read_server_readReq_put ;
  assign memslave_rs_DEQ = WILL_FIRE_RL_memslave_rvrule ;
  assign memslave_rs_CLR = 1'b0 ;

  // submodule memslave_rsCtrl
  assign memslave_rsCtrl_D_IN =
	     portalIfc_slave_read_server_readReq_put[27:21] == 7'd0 ;
  assign memslave_rsCtrl_ENQ = EN_portalIfc_slave_read_server_readReq_put ;
  assign memslave_rsCtrl_DEQ = WILL_FIRE_RL_memslave_rvrule ;
  assign memslave_rsCtrl_CLR = 1'b0 ;

  // submodule memslave_rvFifo
  assign memslave_rvFifo_D_IN =
	     { x1_avValue_data__h3096,
	       memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT[6:0] } ;
  assign memslave_rvFifo_ENQ = WILL_FIRE_RL_memslave_rvrule ;
  assign memslave_rvFifo_DEQ = EN_portalIfc_slave_read_server_readData_get ;
  assign memslave_rvFifo_CLR = 1'b0 ;

  // submodule memslave_ws
  assign memslave_ws_D_IN = x__h3649[1:0] ;
  assign memslave_ws_ENQ = EN_portalIfc_slave_write_server_writeReq_put ;
  assign memslave_ws_DEQ =
	     memslave_fifoWriteDoneFifo_EMPTY_N && memslave_ws_EMPTY_N &&
	     memslave_wsCtrl_EMPTY_N &&
	     memslave_doneFifo_FULL_N ;
  assign memslave_ws_CLR = 1'b0 ;

  // submodule memslave_wsCtrl
  assign memslave_wsCtrl_D_IN =
	     portalIfc_slave_write_server_writeReq_put[27:21] == 7'd0 ;
  assign memslave_wsCtrl_ENQ = EN_portalIfc_slave_write_server_writeReq_put ;
  assign memslave_wsCtrl_DEQ =
	     memslave_fifoWriteDoneFifo_EMPTY_N && memslave_ws_EMPTY_N &&
	     memslave_wsCtrl_EMPTY_N &&
	     memslave_doneFifo_FULL_N ;
  assign memslave_wsCtrl_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_memslave_fifoReadAddrGenerator_isFirstReg_T_ETC___d21 =
	     memslave_fifoReadAddrGenerator_isFirstReg ?
	       memslave_fifoReadAddrGenerator_requestFifo_D_OUT[15:6] ==
	       10'd4 :
	       memslave_fifoReadAddrGenerator_isLastReg ;
  assign IF_memslave_fifoWriteAddrGenerator_isFirstReg__ETC___d43 =
	     memslave_fifoWriteAddrGenerator_isFirstReg ?
	       memslave_fifoWriteAddrGenerator_requestFifo_D_OUT[15:6] ==
	       10'd4 :
	       memslave_fifoWriteAddrGenerator_isLastReg ;
  assign NOT_memslave_fifoReadAddrGenerator_addrBeatFif_ETC___d77 =
	     memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] !=
	     5'd0 ||
	     CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q1 ;
  assign NOT_memslave_fifoReadAddrGenerator_addrBeatFif_ETC___d82 =
	     memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] !=
	     5'd0 ||
	     CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q2 ;
  assign addr__h1327 =
	     memslave_fifoWriteAddrGenerator_isFirstReg ?
	       memslave_fifoWriteAddrGenerator_requestFifo_D_OUT[20:16] :
	       memslave_fifoWriteAddrGenerator_addrReg ;
  assign addr__h718 =
	     memslave_fifoReadAddrGenerator_isFirstReg ?
	       memslave_fifoReadAddrGenerator_requestFifo_D_OUT[20:16] :
	       memslave_fifoReadAddrGenerator_addrReg ;
  assign burstCount___1__h1371 =
	     { 2'd0,
	       memslave_fifoWriteAddrGenerator_requestFifo_D_OUT[15:8] } ;
  assign burstCount___1__h765 =
	     { 2'd0,
	       memslave_fifoReadAddrGenerator_requestFifo_D_OUT[15:8] } ;
  assign burstCount__h1329 =
	     memslave_fifoWriteAddrGenerator_isFirstReg ?
	       burstCount___1__h1371 :
	       memslave_fifoWriteAddrGenerator_burstCountReg ;
  assign burstCount__h720 =
	     memslave_fifoReadAddrGenerator_isFirstReg ?
	       burstCount___1__h765 :
	       memslave_fifoReadAddrGenerator_burstCountReg ;
  assign memslave_rvFifo_i_notFull__6_AND_memslave_rsCt_ETC___d85 =
	     memslave_rvFifo_FULL_N &&
	     (memslave_rsCtrl_D_OUT ||
	      NOT_memslave_fifoReadAddrGenerator_addrBeatFif_ETC___d77 &&
	      NOT_memslave_fifoReadAddrGenerator_addrBeatFif_ETC___d82) ;
  assign v___1__h2773 = dut_portalIfc_intr_channel + 32'd1 ;
  assign x1_avValue_data__h3096 =
	     memslave_rsCtrl_D_OUT ? v__h2685 : x1_avValue_data__h3080 ;
  assign x__h3385 = portalIfc_slave_read_server_readReq_put[27:21] - 7'd1 ;
  assign x__h3649 = portalIfc_slave_write_server_writeReq_put[27:21] - 7'd1 ;
  always@(memslave_rs_D_OUT or
	  dut_portalIfc_indications_0_first or
	  dut_portalIfc_indications_1_first or
	  dut_portalIfc_indications_2_first)
  begin
    case (memslave_rs_D_OUT)
      2'd0: v__h2840 = dut_portalIfc_indications_0_first;
      2'd1: v__h2840 = dut_portalIfc_indications_1_first;
      2'd2: v__h2840 = dut_portalIfc_indications_2_first;
      2'd3: v__h2840 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT or
	  dut_portalIfc_intr_status or
	  ctrlPort_interruptEnableReg or
	  v___1__h2773 or
	  id or
	  ctrlPort_num_portals_reg or
	  ctrlPort_cycle_count or ctrlPort_snapshot)
  begin
    case (memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17])
      5'd0: v__h2685 = dut_portalIfc_intr_status ? 32'd1 : 32'd0;
      5'd4: v__h2685 = ctrlPort_interruptEnableReg ? 32'd1 : 32'd0;
      5'd8: v__h2685 = 32'd2;
      5'h0C: v__h2685 = dut_portalIfc_intr_status ? v___1__h2773 : 32'd0;
      5'h10: v__h2685 = id;
      5'h14: v__h2685 = ctrlPort_num_portals_reg;
      5'h18: v__h2685 = ctrlPort_cycle_count[63:32];
      5'h1C: v__h2685 = ctrlPort_snapshot;
      default: v__h2685 = 32'h005A05A0;
    endcase
  end
  always@(memslave_rs_D_OUT or
	  dut_portalIfc_indications_0_notEmpty or
	  dut_portalIfc_indications_1_notEmpty or
	  dut_portalIfc_indications_2_notEmpty)
  begin
    case (memslave_rs_D_OUT)
      2'd0: x__h3123 = dut_portalIfc_indications_0_notEmpty;
      2'd1: x__h3123 = dut_portalIfc_indications_1_notEmpty;
      2'd2: x__h3123 = dut_portalIfc_indications_2_notEmpty;
      2'd3: x__h3123 = 1'b0 /* unspecified value */ ;
    endcase
  end
  always@(memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT or
	  v__h2840 or x__h3123)
  begin
    case (memslave_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17])
      5'd0: x1_avValue_data__h3080 = v__h2840;
      5'd4: x1_avValue_data__h3080 = { 31'd0, x__h3123 };
      default: x1_avValue_data__h3080 = 32'd0;
    endcase
  end
  always@(memslave_rs_D_OUT or
	  dut_RDY_portalIfc_indications_0_deq or
	  dut_RDY_portalIfc_indications_1_deq or
	  dut_RDY_portalIfc_indications_2_deq)
  begin
    case (memslave_rs_D_OUT)
      2'd0:
	  CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q1 =
	      dut_RDY_portalIfc_indications_0_deq;
      2'd1:
	  CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q1 =
	      dut_RDY_portalIfc_indications_1_deq;
      2'd2:
	  CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q1 =
	      dut_RDY_portalIfc_indications_2_deq;
      2'd3: CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q1 = 1'd1;
    endcase
  end
  always@(memslave_rs_D_OUT or
	  dut_RDY_portalIfc_indications_0_first or
	  dut_RDY_portalIfc_indications_1_first or
	  dut_RDY_portalIfc_indications_2_first)
  begin
    case (memslave_rs_D_OUT)
      2'd0:
	  CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q2 =
	      dut_RDY_portalIfc_indications_0_first;
      2'd1:
	  CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q2 =
	      dut_RDY_portalIfc_indications_1_first;
      2'd2:
	  CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q2 =
	      dut_RDY_portalIfc_indications_2_first;
      2'd3: CASE_memslave_rsD_OUT_0_dutRDY_portalIfc_ind_ETC__q2 = 1'd1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ctrlPort_cycle_count <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ctrlPort_interruptEnableReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctrlPort_num_portals_reg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctrlPort_snapshot <= `BSV_ASSIGNMENT_DELAY 32'd0;
	memslave_fifoReadAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	memslave_fifoReadAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	    10'd0;
	memslave_fifoReadAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	memslave_fifoReadAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	memslave_fifoWriteAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	memslave_fifoWriteAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	    10'd0;
	memslave_fifoWriteAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	memslave_fifoWriteAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
      end
    else
      begin
        if (ctrlPort_cycle_count_EN)
	  ctrlPort_cycle_count <= `BSV_ASSIGNMENT_DELAY
	      ctrlPort_cycle_count_D_IN;
	if (ctrlPort_interruptEnableReg_EN)
	  ctrlPort_interruptEnableReg <= `BSV_ASSIGNMENT_DELAY
	      ctrlPort_interruptEnableReg_D_IN;
	if (ctrlPort_num_portals_reg_EN)
	  ctrlPort_num_portals_reg <= `BSV_ASSIGNMENT_DELAY
	      ctrlPort_num_portals_reg_D_IN;
	if (ctrlPort_snapshot_EN)
	  ctrlPort_snapshot <= `BSV_ASSIGNMENT_DELAY ctrlPort_snapshot_D_IN;
	if (memslave_fifoReadAddrGenerator_addrReg_EN)
	  memslave_fifoReadAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_fifoReadAddrGenerator_addrReg_D_IN;
	if (memslave_fifoReadAddrGenerator_burstCountReg_EN)
	  memslave_fifoReadAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_fifoReadAddrGenerator_burstCountReg_D_IN;
	if (memslave_fifoReadAddrGenerator_isFirstReg_EN)
	  memslave_fifoReadAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_fifoReadAddrGenerator_isFirstReg_D_IN;
	if (memslave_fifoReadAddrGenerator_isLastReg_EN)
	  memslave_fifoReadAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_fifoReadAddrGenerator_isLastReg_D_IN;
	if (memslave_fifoWriteAddrGenerator_addrReg_EN)
	  memslave_fifoWriteAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_fifoWriteAddrGenerator_addrReg_D_IN;
	if (memslave_fifoWriteAddrGenerator_burstCountReg_EN)
	  memslave_fifoWriteAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_fifoWriteAddrGenerator_burstCountReg_D_IN;
	if (memslave_fifoWriteAddrGenerator_isFirstReg_EN)
	  memslave_fifoWriteAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_fifoWriteAddrGenerator_isFirstReg_D_IN;
	if (memslave_fifoWriteAddrGenerator_isLastReg_EN)
	  memslave_fifoWriteAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_fifoWriteAddrGenerator_isLastReg_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ctrlPort_cycle_count = 64'hAAAAAAAAAAAAAAAA;
    ctrlPort_interruptEnableReg = 1'h0;
    ctrlPort_num_portals_reg = 32'hAAAAAAAA;
    ctrlPort_snapshot = 32'hAAAAAAAA;
    memslave_fifoReadAddrGenerator_addrReg = 5'h0A;
    memslave_fifoReadAddrGenerator_burstCountReg = 10'h2AA;
    memslave_fifoReadAddrGenerator_isFirstReg = 1'h0;
    memslave_fifoReadAddrGenerator_isLastReg = 1'h0;
    memslave_fifoWriteAddrGenerator_addrReg = 5'h0A;
    memslave_fifoWriteAddrGenerator_burstCountReg = 10'h2AA;
    memslave_fifoWriteAddrGenerator_isFirstReg = 1'h0;
    memslave_fifoWriteAddrGenerator_isLastReg = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_portalIfc_slave_read_server_readReq_put &&
	  portalIfc_slave_read_server_readReq_put[15:6] > 10'd4)
	$display("**** \n\n mkMemMethodMux.readReq len=%d \n\n ****",
		 portalIfc_slave_read_server_readReq_put[15:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_portalIfc_slave_write_server_writeReq_put &&
	  portalIfc_slave_write_server_writeReq_put[15:6] > 10'd4)
	$display("**** \n\n mkMemMethodMux.writeReq len=%d \n\n ****",
		 portalIfc_slave_write_server_writeReq_put[15:6]);
  end
  // synopsys translate_on
endmodule  // mkMMUIndicationProxySynth

