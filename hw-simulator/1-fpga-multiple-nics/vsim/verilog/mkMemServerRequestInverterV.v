//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_addrTrans  CF ( ifc_addrTrans,
// 			     ifc_setTileState,
// 			     ifc_stateDbg,
// 			     ifc_memoryTraffic,
// 			     inverseIfc_addrTrans,
// 			     inverseIfc_setTileState,
// 			     inverseIfc_stateDbg,
// 			     inverseIfc_memoryTraffic );
//
// schedule ifc_setTileState  CF ( ifc_addrTrans,
// 				ifc_setTileState,
// 				ifc_stateDbg,
// 				ifc_memoryTraffic,
// 				inverseIfc_addrTrans,
// 				inverseIfc_setTileState,
// 				inverseIfc_stateDbg,
// 				inverseIfc_memoryTraffic );
//
// schedule ifc_stateDbg  CF ( ifc_addrTrans,
// 			    ifc_setTileState,
// 			    ifc_stateDbg,
// 			    ifc_memoryTraffic,
// 			    inverseIfc_addrTrans,
// 			    inverseIfc_setTileState,
// 			    inverseIfc_stateDbg,
// 			    inverseIfc_memoryTraffic );
//
// schedule ifc_memoryTraffic  CF ( ifc_addrTrans,
// 				 ifc_setTileState,
// 				 ifc_stateDbg,
// 				 ifc_memoryTraffic,
// 				 inverseIfc_addrTrans,
// 				 inverseIfc_setTileState,
// 				 inverseIfc_stateDbg,
// 				 inverseIfc_memoryTraffic );
//
// schedule inverseIfc_addrTrans  CF ( ifc_addrTrans,
// 				    ifc_setTileState,
// 				    ifc_stateDbg,
// 				    ifc_memoryTraffic,
// 				    inverseIfc_addrTrans,
// 				    inverseIfc_setTileState,
// 				    inverseIfc_stateDbg,
// 				    inverseIfc_memoryTraffic );
//
// schedule inverseIfc_setTileState  CF ( ifc_addrTrans,
// 				       ifc_setTileState,
// 				       ifc_stateDbg,
// 				       ifc_memoryTraffic,
// 				       inverseIfc_addrTrans,
// 				       inverseIfc_setTileState,
// 				       inverseIfc_stateDbg,
// 				       inverseIfc_memoryTraffic );
//
// schedule inverseIfc_stateDbg  CF ( ifc_addrTrans,
// 				   ifc_setTileState,
// 				   ifc_stateDbg,
// 				   ifc_memoryTraffic,
// 				   inverseIfc_addrTrans,
// 				   inverseIfc_setTileState,
// 				   inverseIfc_stateDbg,
// 				   inverseIfc_memoryTraffic );
//
// schedule inverseIfc_memoryTraffic  CF ( ifc_addrTrans,
// 					ifc_setTileState,
// 					ifc_stateDbg,
// 					ifc_memoryTraffic,
// 					inverseIfc_addrTrans,
// 					inverseIfc_setTileState,
// 					inverseIfc_stateDbg,
// 					inverseIfc_memoryTraffic );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_addrTrans              O     1
// RDY_ifc_setTileState           O     1
// RDY_ifc_stateDbg               O     1
// RDY_ifc_memoryTraffic          O     1
// inverseIfc_addrTrans           O    64
// RDY_inverseIfc_addrTrans       O     1
// inverseIfc_setTileState        O     4
// RDY_inverseIfc_setTileState    O     1
// inverseIfc_stateDbg            O     1
// RDY_inverseIfc_stateDbg        O     1
// inverseIfc_memoryTraffic       O     1
// RDY_inverseIfc_memoryTraffic   O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_addrTrans_sglId            I    32
// ifc_addrTrans_offset           I    32
// ifc_setTileState_tc            I     4
// ifc_stateDbg_rc                I     1
// ifc_memoryTraffic_rc           I     1
// EN_ifc_addrTrans               I     1
// EN_ifc_setTileState            I     1
// EN_ifc_stateDbg                I     1
// EN_ifc_memoryTraffic           I     1
// EN_inverseIfc_addrTrans        I     1
// EN_inverseIfc_setTileState     I     1
// EN_inverseIfc_stateDbg         I     1
// EN_inverseIfc_memoryTraffic    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMemServerRequestInverterV(CLK,
				   RST_N,

				   ifc_addrTrans_sglId,
				   ifc_addrTrans_offset,
				   EN_ifc_addrTrans,
				   RDY_ifc_addrTrans,

				   ifc_setTileState_tc,
				   EN_ifc_setTileState,
				   RDY_ifc_setTileState,

				   ifc_stateDbg_rc,
				   EN_ifc_stateDbg,
				   RDY_ifc_stateDbg,

				   ifc_memoryTraffic_rc,
				   EN_ifc_memoryTraffic,
				   RDY_ifc_memoryTraffic,

				   EN_inverseIfc_addrTrans,
				   inverseIfc_addrTrans,
				   RDY_inverseIfc_addrTrans,

				   EN_inverseIfc_setTileState,
				   inverseIfc_setTileState,
				   RDY_inverseIfc_setTileState,

				   EN_inverseIfc_stateDbg,
				   inverseIfc_stateDbg,
				   RDY_inverseIfc_stateDbg,

				   EN_inverseIfc_memoryTraffic,
				   inverseIfc_memoryTraffic,
				   RDY_inverseIfc_memoryTraffic);
  input  CLK;
  input  RST_N;

  // action method ifc_addrTrans
  input  [31 : 0] ifc_addrTrans_sglId;
  input  [31 : 0] ifc_addrTrans_offset;
  input  EN_ifc_addrTrans;
  output RDY_ifc_addrTrans;

  // action method ifc_setTileState
  input  [3 : 0] ifc_setTileState_tc;
  input  EN_ifc_setTileState;
  output RDY_ifc_setTileState;

  // action method ifc_stateDbg
  input  ifc_stateDbg_rc;
  input  EN_ifc_stateDbg;
  output RDY_ifc_stateDbg;

  // action method ifc_memoryTraffic
  input  ifc_memoryTraffic_rc;
  input  EN_ifc_memoryTraffic;
  output RDY_ifc_memoryTraffic;

  // actionvalue method inverseIfc_addrTrans
  input  EN_inverseIfc_addrTrans;
  output [63 : 0] inverseIfc_addrTrans;
  output RDY_inverseIfc_addrTrans;

  // actionvalue method inverseIfc_setTileState
  input  EN_inverseIfc_setTileState;
  output [3 : 0] inverseIfc_setTileState;
  output RDY_inverseIfc_setTileState;

  // actionvalue method inverseIfc_stateDbg
  input  EN_inverseIfc_stateDbg;
  output inverseIfc_stateDbg;
  output RDY_inverseIfc_stateDbg;

  // actionvalue method inverseIfc_memoryTraffic
  input  EN_inverseIfc_memoryTraffic;
  output inverseIfc_memoryTraffic;
  output RDY_inverseIfc_memoryTraffic;

  // signals for module outputs
  wire [63 : 0] inverseIfc_addrTrans;
  wire [3 : 0] inverseIfc_setTileState;
  wire RDY_ifc_addrTrans,
       RDY_ifc_memoryTraffic,
       RDY_ifc_setTileState,
       RDY_ifc_stateDbg,
       RDY_inverseIfc_addrTrans,
       RDY_inverseIfc_memoryTraffic,
       RDY_inverseIfc_setTileState,
       RDY_inverseIfc_stateDbg,
       inverseIfc_memoryTraffic,
       inverseIfc_stateDbg;

  // ports of submodule inv_addrTrans_inverter
  wire [63 : 0] inv_addrTrans_inverter_get, inv_addrTrans_inverter_put;
  wire inv_addrTrans_inverter_EN_get,
       inv_addrTrans_inverter_EN_put,
       inv_addrTrans_inverter_RDY_get,
       inv_addrTrans_inverter_RDY_put;

  // ports of submodule inv_memoryTraffic_inverter
  wire inv_memoryTraffic_inverter_EN_get,
       inv_memoryTraffic_inverter_EN_put,
       inv_memoryTraffic_inverter_RDY_get,
       inv_memoryTraffic_inverter_RDY_put,
       inv_memoryTraffic_inverter_get,
       inv_memoryTraffic_inverter_put;

  // ports of submodule inv_setTileState_inverter
  wire [3 : 0] inv_setTileState_inverter_get, inv_setTileState_inverter_put;
  wire inv_setTileState_inverter_EN_get,
       inv_setTileState_inverter_EN_put,
       inv_setTileState_inverter_RDY_get,
       inv_setTileState_inverter_RDY_put;

  // ports of submodule inv_stateDbg_inverter
  wire inv_stateDbg_inverter_EN_get,
       inv_stateDbg_inverter_EN_put,
       inv_stateDbg_inverter_RDY_get,
       inv_stateDbg_inverter_RDY_put,
       inv_stateDbg_inverter_get,
       inv_stateDbg_inverter_put;

  // action method ifc_addrTrans
  assign RDY_ifc_addrTrans = inv_addrTrans_inverter_RDY_put ;

  // action method ifc_setTileState
  assign RDY_ifc_setTileState = inv_setTileState_inverter_RDY_put ;

  // action method ifc_stateDbg
  assign RDY_ifc_stateDbg = inv_stateDbg_inverter_RDY_put ;

  // action method ifc_memoryTraffic
  assign RDY_ifc_memoryTraffic = inv_memoryTraffic_inverter_RDY_put ;

  // actionvalue method inverseIfc_addrTrans
  assign inverseIfc_addrTrans = inv_addrTrans_inverter_get ;
  assign RDY_inverseIfc_addrTrans = inv_addrTrans_inverter_RDY_get ;

  // actionvalue method inverseIfc_setTileState
  assign inverseIfc_setTileState = inv_setTileState_inverter_get ;
  assign RDY_inverseIfc_setTileState = inv_setTileState_inverter_RDY_get ;

  // actionvalue method inverseIfc_stateDbg
  assign inverseIfc_stateDbg = inv_stateDbg_inverter_get ;
  assign RDY_inverseIfc_stateDbg = inv_stateDbg_inverter_RDY_get ;

  // actionvalue method inverseIfc_memoryTraffic
  assign inverseIfc_memoryTraffic = inv_memoryTraffic_inverter_get ;
  assign RDY_inverseIfc_memoryTraffic = inv_memoryTraffic_inverter_RDY_get ;

  // submodule inv_addrTrans_inverter
  PutInverter #(.DATA_WIDTH(32'd64)) inv_addrTrans_inverter(.CLK(CLK),
							    .RST(RST_N),
							    .put(inv_addrTrans_inverter_put),
							    .EN_put(inv_addrTrans_inverter_EN_put),
							    .EN_get(inv_addrTrans_inverter_EN_get),
							    .RDY_put(inv_addrTrans_inverter_RDY_put),
							    .get(inv_addrTrans_inverter_get),
							    .RDY_get(inv_addrTrans_inverter_RDY_get));

  // submodule inv_memoryTraffic_inverter
  PutInverter #(.DATA_WIDTH(32'd1)) inv_memoryTraffic_inverter(.CLK(CLK),
							       .RST(RST_N),
							       .put(inv_memoryTraffic_inverter_put),
							       .EN_put(inv_memoryTraffic_inverter_EN_put),
							       .EN_get(inv_memoryTraffic_inverter_EN_get),
							       .RDY_put(inv_memoryTraffic_inverter_RDY_put),
							       .get(inv_memoryTraffic_inverter_get),
							       .RDY_get(inv_memoryTraffic_inverter_RDY_get));

  // submodule inv_setTileState_inverter
  PutInverter #(.DATA_WIDTH(32'd4)) inv_setTileState_inverter(.CLK(CLK),
							      .RST(RST_N),
							      .put(inv_setTileState_inverter_put),
							      .EN_put(inv_setTileState_inverter_EN_put),
							      .EN_get(inv_setTileState_inverter_EN_get),
							      .RDY_put(inv_setTileState_inverter_RDY_put),
							      .get(inv_setTileState_inverter_get),
							      .RDY_get(inv_setTileState_inverter_RDY_get));

  // submodule inv_stateDbg_inverter
  PutInverter #(.DATA_WIDTH(32'd1)) inv_stateDbg_inverter(.CLK(CLK),
							  .RST(RST_N),
							  .put(inv_stateDbg_inverter_put),
							  .EN_put(inv_stateDbg_inverter_EN_put),
							  .EN_get(inv_stateDbg_inverter_EN_get),
							  .RDY_put(inv_stateDbg_inverter_RDY_put),
							  .get(inv_stateDbg_inverter_get),
							  .RDY_get(inv_stateDbg_inverter_RDY_get));

  // submodule inv_addrTrans_inverter
  assign inv_addrTrans_inverter_put =
	     { ifc_addrTrans_sglId, ifc_addrTrans_offset } ;
  assign inv_addrTrans_inverter_EN_put = EN_ifc_addrTrans ;
  assign inv_addrTrans_inverter_EN_get = EN_inverseIfc_addrTrans ;

  // submodule inv_memoryTraffic_inverter
  assign inv_memoryTraffic_inverter_put = ifc_memoryTraffic_rc ;
  assign inv_memoryTraffic_inverter_EN_put = EN_ifc_memoryTraffic ;
  assign inv_memoryTraffic_inverter_EN_get = EN_inverseIfc_memoryTraffic ;

  // submodule inv_setTileState_inverter
  assign inv_setTileState_inverter_put = ifc_setTileState_tc ;
  assign inv_setTileState_inverter_EN_put = EN_ifc_setTileState ;
  assign inv_setTileState_inverter_EN_get = EN_inverseIfc_setTileState ;

  // submodule inv_stateDbg_inverter
  assign inv_stateDbg_inverter_put = ifc_stateDbg_rc ;
  assign inv_stateDbg_inverter_EN_put = EN_ifc_stateDbg ;
  assign inv_stateDbg_inverter_EN_get = EN_inverseIfc_stateDbg ;
endmodule  // mkMemServerRequestInverterV

