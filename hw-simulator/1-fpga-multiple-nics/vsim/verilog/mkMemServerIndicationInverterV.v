//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_addrResponse  CF ( ifc_addrResponse,
// 				ifc_reportStateDbg,
// 				ifc_reportMemoryTraffic,
// 				ifc_error,
// 				inverseIfc_addrResponse,
// 				inverseIfc_reportStateDbg,
// 				inverseIfc_reportMemoryTraffic,
// 				inverseIfc_error );
//
// schedule ifc_reportStateDbg  CF ( ifc_addrResponse,
// 				  ifc_reportStateDbg,
// 				  ifc_reportMemoryTraffic,
// 				  ifc_error,
// 				  inverseIfc_addrResponse,
// 				  inverseIfc_reportStateDbg,
// 				  inverseIfc_reportMemoryTraffic,
// 				  inverseIfc_error );
//
// schedule ifc_reportMemoryTraffic  CF ( ifc_addrResponse,
// 				       ifc_reportStateDbg,
// 				       ifc_reportMemoryTraffic,
// 				       ifc_error,
// 				       inverseIfc_addrResponse,
// 				       inverseIfc_reportStateDbg,
// 				       inverseIfc_reportMemoryTraffic,
// 				       inverseIfc_error );
//
// schedule ifc_error  CF ( ifc_addrResponse,
// 			 ifc_reportStateDbg,
// 			 ifc_reportMemoryTraffic,
// 			 ifc_error,
// 			 inverseIfc_addrResponse,
// 			 inverseIfc_reportStateDbg,
// 			 inverseIfc_reportMemoryTraffic,
// 			 inverseIfc_error );
//
// schedule inverseIfc_addrResponse  CF ( ifc_addrResponse,
// 				       ifc_reportStateDbg,
// 				       ifc_reportMemoryTraffic,
// 				       ifc_error,
// 				       inverseIfc_addrResponse,
// 				       inverseIfc_reportStateDbg,
// 				       inverseIfc_reportMemoryTraffic,
// 				       inverseIfc_error );
//
// schedule inverseIfc_reportStateDbg  CF ( ifc_addrResponse,
// 					 ifc_reportStateDbg,
// 					 ifc_reportMemoryTraffic,
// 					 ifc_error,
// 					 inverseIfc_addrResponse,
// 					 inverseIfc_reportStateDbg,
// 					 inverseIfc_reportMemoryTraffic,
// 					 inverseIfc_error );
//
// schedule inverseIfc_reportMemoryTraffic  CF ( ifc_addrResponse,
// 					      ifc_reportStateDbg,
// 					      ifc_reportMemoryTraffic,
// 					      ifc_error,
// 					      inverseIfc_addrResponse,
// 					      inverseIfc_reportStateDbg,
// 					      inverseIfc_reportMemoryTraffic,
// 					      inverseIfc_error );
//
// schedule inverseIfc_error  CF ( ifc_addrResponse,
// 				ifc_reportStateDbg,
// 				ifc_reportMemoryTraffic,
// 				ifc_error,
// 				inverseIfc_addrResponse,
// 				inverseIfc_reportStateDbg,
// 				inverseIfc_reportMemoryTraffic,
// 				inverseIfc_error );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_addrResponse           O     1
// RDY_ifc_reportStateDbg         O     1
// RDY_ifc_reportMemoryTraffic    O     1
// RDY_ifc_error                  O     1
// inverseIfc_addrResponse        O    64
// RDY_inverseIfc_addrResponse    O     1
// inverseIfc_reportStateDbg      O   128
// RDY_inverseIfc_reportStateDbg  O     1
// inverseIfc_reportMemoryTraffic  O    64
// RDY_inverseIfc_reportMemoryTraffic  O     1
// inverseIfc_error               O   192
// RDY_inverseIfc_error           O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_addrResponse_physAddr      I    64
// ifc_reportStateDbg_rec         I   128
// ifc_reportMemoryTraffic_words  I    64
// ifc_error_code                 I    32
// ifc_error_sglId                I    32
// ifc_error_offset               I    64
// ifc_error_extra                I    64
// EN_ifc_addrResponse            I     1
// EN_ifc_reportStateDbg          I     1
// EN_ifc_reportMemoryTraffic     I     1
// EN_ifc_error                   I     1
// EN_inverseIfc_addrResponse     I     1
// EN_inverseIfc_reportStateDbg   I     1
// EN_inverseIfc_reportMemoryTraffic  I     1
// EN_inverseIfc_error            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMemServerIndicationInverterV(CLK,
				      RST_N,

				      ifc_addrResponse_physAddr,
				      EN_ifc_addrResponse,
				      RDY_ifc_addrResponse,

				      ifc_reportStateDbg_rec,
				      EN_ifc_reportStateDbg,
				      RDY_ifc_reportStateDbg,

				      ifc_reportMemoryTraffic_words,
				      EN_ifc_reportMemoryTraffic,
				      RDY_ifc_reportMemoryTraffic,

				      ifc_error_code,
				      ifc_error_sglId,
				      ifc_error_offset,
				      ifc_error_extra,
				      EN_ifc_error,
				      RDY_ifc_error,

				      EN_inverseIfc_addrResponse,
				      inverseIfc_addrResponse,
				      RDY_inverseIfc_addrResponse,

				      EN_inverseIfc_reportStateDbg,
				      inverseIfc_reportStateDbg,
				      RDY_inverseIfc_reportStateDbg,

				      EN_inverseIfc_reportMemoryTraffic,
				      inverseIfc_reportMemoryTraffic,
				      RDY_inverseIfc_reportMemoryTraffic,

				      EN_inverseIfc_error,
				      inverseIfc_error,
				      RDY_inverseIfc_error);
  input  CLK;
  input  RST_N;

  // action method ifc_addrResponse
  input  [63 : 0] ifc_addrResponse_physAddr;
  input  EN_ifc_addrResponse;
  output RDY_ifc_addrResponse;

  // action method ifc_reportStateDbg
  input  [127 : 0] ifc_reportStateDbg_rec;
  input  EN_ifc_reportStateDbg;
  output RDY_ifc_reportStateDbg;

  // action method ifc_reportMemoryTraffic
  input  [63 : 0] ifc_reportMemoryTraffic_words;
  input  EN_ifc_reportMemoryTraffic;
  output RDY_ifc_reportMemoryTraffic;

  // action method ifc_error
  input  [31 : 0] ifc_error_code;
  input  [31 : 0] ifc_error_sglId;
  input  [63 : 0] ifc_error_offset;
  input  [63 : 0] ifc_error_extra;
  input  EN_ifc_error;
  output RDY_ifc_error;

  // actionvalue method inverseIfc_addrResponse
  input  EN_inverseIfc_addrResponse;
  output [63 : 0] inverseIfc_addrResponse;
  output RDY_inverseIfc_addrResponse;

  // actionvalue method inverseIfc_reportStateDbg
  input  EN_inverseIfc_reportStateDbg;
  output [127 : 0] inverseIfc_reportStateDbg;
  output RDY_inverseIfc_reportStateDbg;

  // actionvalue method inverseIfc_reportMemoryTraffic
  input  EN_inverseIfc_reportMemoryTraffic;
  output [63 : 0] inverseIfc_reportMemoryTraffic;
  output RDY_inverseIfc_reportMemoryTraffic;

  // actionvalue method inverseIfc_error
  input  EN_inverseIfc_error;
  output [191 : 0] inverseIfc_error;
  output RDY_inverseIfc_error;

  // signals for module outputs
  wire [191 : 0] inverseIfc_error;
  wire [127 : 0] inverseIfc_reportStateDbg;
  wire [63 : 0] inverseIfc_addrResponse, inverseIfc_reportMemoryTraffic;
  wire RDY_ifc_addrResponse,
       RDY_ifc_error,
       RDY_ifc_reportMemoryTraffic,
       RDY_ifc_reportStateDbg,
       RDY_inverseIfc_addrResponse,
       RDY_inverseIfc_error,
       RDY_inverseIfc_reportMemoryTraffic,
       RDY_inverseIfc_reportStateDbg;

  // ports of submodule inv_addrResponse_inverter
  wire [63 : 0] inv_addrResponse_inverter_get, inv_addrResponse_inverter_put;
  wire inv_addrResponse_inverter_EN_get,
       inv_addrResponse_inverter_EN_put,
       inv_addrResponse_inverter_RDY_get,
       inv_addrResponse_inverter_RDY_put;

  // ports of submodule inv_error_inverter
  wire [191 : 0] inv_error_inverter_get, inv_error_inverter_put;
  wire inv_error_inverter_EN_get,
       inv_error_inverter_EN_put,
       inv_error_inverter_RDY_get,
       inv_error_inverter_RDY_put;

  // ports of submodule inv_reportMemoryTraffic_inverter
  wire [63 : 0] inv_reportMemoryTraffic_inverter_get,
		inv_reportMemoryTraffic_inverter_put;
  wire inv_reportMemoryTraffic_inverter_EN_get,
       inv_reportMemoryTraffic_inverter_EN_put,
       inv_reportMemoryTraffic_inverter_RDY_get,
       inv_reportMemoryTraffic_inverter_RDY_put;

  // ports of submodule inv_reportStateDbg_inverter
  wire [127 : 0] inv_reportStateDbg_inverter_get,
		 inv_reportStateDbg_inverter_put;
  wire inv_reportStateDbg_inverter_EN_get,
       inv_reportStateDbg_inverter_EN_put,
       inv_reportStateDbg_inverter_RDY_get,
       inv_reportStateDbg_inverter_RDY_put;

  // action method ifc_addrResponse
  assign RDY_ifc_addrResponse = inv_addrResponse_inverter_RDY_put ;

  // action method ifc_reportStateDbg
  assign RDY_ifc_reportStateDbg = inv_reportStateDbg_inverter_RDY_put ;

  // action method ifc_reportMemoryTraffic
  assign RDY_ifc_reportMemoryTraffic =
	     inv_reportMemoryTraffic_inverter_RDY_put ;

  // action method ifc_error
  assign RDY_ifc_error = inv_error_inverter_RDY_put ;

  // actionvalue method inverseIfc_addrResponse
  assign inverseIfc_addrResponse = inv_addrResponse_inverter_get ;
  assign RDY_inverseIfc_addrResponse = inv_addrResponse_inverter_RDY_get ;

  // actionvalue method inverseIfc_reportStateDbg
  assign inverseIfc_reportStateDbg = inv_reportStateDbg_inverter_get ;
  assign RDY_inverseIfc_reportStateDbg = inv_reportStateDbg_inverter_RDY_get ;

  // actionvalue method inverseIfc_reportMemoryTraffic
  assign inverseIfc_reportMemoryTraffic =
	     inv_reportMemoryTraffic_inverter_get ;
  assign RDY_inverseIfc_reportMemoryTraffic =
	     inv_reportMemoryTraffic_inverter_RDY_get ;

  // actionvalue method inverseIfc_error
  assign inverseIfc_error = inv_error_inverter_get ;
  assign RDY_inverseIfc_error = inv_error_inverter_RDY_get ;

  // submodule inv_addrResponse_inverter
  PutInverter #(.DATA_WIDTH(32'd64)) inv_addrResponse_inverter(.CLK(CLK),
							       .RST(RST_N),
							       .put(inv_addrResponse_inverter_put),
							       .EN_put(inv_addrResponse_inverter_EN_put),
							       .EN_get(inv_addrResponse_inverter_EN_get),
							       .RDY_put(inv_addrResponse_inverter_RDY_put),
							       .get(inv_addrResponse_inverter_get),
							       .RDY_get(inv_addrResponse_inverter_RDY_get));

  // submodule inv_error_inverter
  PutInverter #(.DATA_WIDTH(32'd192)) inv_error_inverter(.CLK(CLK),
							 .RST(RST_N),
							 .put(inv_error_inverter_put),
							 .EN_put(inv_error_inverter_EN_put),
							 .EN_get(inv_error_inverter_EN_get),
							 .RDY_put(inv_error_inverter_RDY_put),
							 .get(inv_error_inverter_get),
							 .RDY_get(inv_error_inverter_RDY_get));

  // submodule inv_reportMemoryTraffic_inverter
  PutInverter #(.DATA_WIDTH(32'd64)) inv_reportMemoryTraffic_inverter(.CLK(CLK),
								      .RST(RST_N),
								      .put(inv_reportMemoryTraffic_inverter_put),
								      .EN_put(inv_reportMemoryTraffic_inverter_EN_put),
								      .EN_get(inv_reportMemoryTraffic_inverter_EN_get),
								      .RDY_put(inv_reportMemoryTraffic_inverter_RDY_put),
								      .get(inv_reportMemoryTraffic_inverter_get),
								      .RDY_get(inv_reportMemoryTraffic_inverter_RDY_get));

  // submodule inv_reportStateDbg_inverter
  PutInverter #(.DATA_WIDTH(32'd128)) inv_reportStateDbg_inverter(.CLK(CLK),
								  .RST(RST_N),
								  .put(inv_reportStateDbg_inverter_put),
								  .EN_put(inv_reportStateDbg_inverter_EN_put),
								  .EN_get(inv_reportStateDbg_inverter_EN_get),
								  .RDY_put(inv_reportStateDbg_inverter_RDY_put),
								  .get(inv_reportStateDbg_inverter_get),
								  .RDY_get(inv_reportStateDbg_inverter_RDY_get));

  // submodule inv_addrResponse_inverter
  assign inv_addrResponse_inverter_put = ifc_addrResponse_physAddr ;
  assign inv_addrResponse_inverter_EN_put = EN_ifc_addrResponse ;
  assign inv_addrResponse_inverter_EN_get = EN_inverseIfc_addrResponse ;

  // submodule inv_error_inverter
  assign inv_error_inverter_put =
	     { ifc_error_code,
	       ifc_error_sglId,
	       ifc_error_offset,
	       ifc_error_extra } ;
  assign inv_error_inverter_EN_put = EN_ifc_error ;
  assign inv_error_inverter_EN_get = EN_inverseIfc_error ;

  // submodule inv_reportMemoryTraffic_inverter
  assign inv_reportMemoryTraffic_inverter_put =
	     ifc_reportMemoryTraffic_words ;
  assign inv_reportMemoryTraffic_inverter_EN_put =
	     EN_ifc_reportMemoryTraffic ;
  assign inv_reportMemoryTraffic_inverter_EN_get =
	     EN_inverseIfc_reportMemoryTraffic ;

  // submodule inv_reportStateDbg_inverter
  assign inv_reportStateDbg_inverter_put = ifc_reportStateDbg_rec ;
  assign inv_reportStateDbg_inverter_EN_put = EN_ifc_reportStateDbg ;
  assign inv_reportStateDbg_inverter_EN_get = EN_inverseIfc_reportStateDbg ;
endmodule  // mkMemServerIndicationInverterV

