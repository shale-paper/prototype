//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_addrResponse  CF ( ifc_reportStateDbg,
// 				ifc_reportMemoryTraffic,
// 				ifc_error,
// 				inverseIfc_addrResponse,
// 				inverseIfc_reportStateDbg,
// 				inverseIfc_reportMemoryTraffic,
// 				inverseIfc_error );
// schedule ifc_addrResponse  C ( ifc_addrResponse );
//
// schedule ifc_reportStateDbg  CF ( ifc_addrResponse,
// 				  ifc_reportMemoryTraffic,
// 				  ifc_error,
// 				  inverseIfc_addrResponse,
// 				  inverseIfc_reportStateDbg,
// 				  inverseIfc_reportMemoryTraffic,
// 				  inverseIfc_error );
// schedule ifc_reportStateDbg  C ( ifc_reportStateDbg );
//
// schedule ifc_reportMemoryTraffic  CF ( ifc_addrResponse,
// 				       ifc_reportStateDbg,
// 				       ifc_error,
// 				       inverseIfc_addrResponse,
// 				       inverseIfc_reportStateDbg,
// 				       inverseIfc_reportMemoryTraffic,
// 				       inverseIfc_error );
// schedule ifc_reportMemoryTraffic  C ( ifc_reportMemoryTraffic );
//
// schedule ifc_error  CF ( ifc_addrResponse,
// 			 ifc_reportStateDbg,
// 			 ifc_reportMemoryTraffic,
// 			 inverseIfc_addrResponse,
// 			 inverseIfc_reportStateDbg,
// 			 inverseIfc_reportMemoryTraffic,
// 			 inverseIfc_error );
// schedule ifc_error  C ( ifc_error );
//
// schedule inverseIfc_addrResponse  CF ( ifc_addrResponse,
// 				       ifc_reportStateDbg,
// 				       ifc_reportMemoryTraffic,
// 				       ifc_error,
// 				       inverseIfc_reportStateDbg,
// 				       inverseIfc_reportMemoryTraffic,
// 				       inverseIfc_error );
// schedule inverseIfc_addrResponse  C ( inverseIfc_addrResponse );
//
// schedule inverseIfc_reportStateDbg  CF ( ifc_addrResponse,
// 					 ifc_reportStateDbg,
// 					 ifc_reportMemoryTraffic,
// 					 ifc_error,
// 					 inverseIfc_addrResponse,
// 					 inverseIfc_reportMemoryTraffic,
// 					 inverseIfc_error );
// schedule inverseIfc_reportStateDbg  C ( inverseIfc_reportStateDbg );
//
// schedule inverseIfc_reportMemoryTraffic  CF ( ifc_addrResponse,
// 					      ifc_reportStateDbg,
// 					      ifc_reportMemoryTraffic,
// 					      ifc_error,
// 					      inverseIfc_addrResponse,
// 					      inverseIfc_reportStateDbg,
// 					      inverseIfc_error );
// schedule inverseIfc_reportMemoryTraffic  C ( inverseIfc_reportMemoryTraffic );
//
// schedule inverseIfc_error  CF ( ifc_addrResponse,
// 				ifc_reportStateDbg,
// 				ifc_reportMemoryTraffic,
// 				ifc_error,
// 				inverseIfc_addrResponse,
// 				inverseIfc_reportStateDbg,
// 				inverseIfc_reportMemoryTraffic );
// schedule inverseIfc_error  C ( inverseIfc_error );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_addrResponse           O     1 reg
// RDY_ifc_reportStateDbg         O     1 reg
// RDY_ifc_reportMemoryTraffic    O     1 reg
// RDY_ifc_error                  O     1 reg
// inverseIfc_addrResponse        O    64 reg
// RDY_inverseIfc_addrResponse    O     1 reg
// inverseIfc_reportStateDbg      O   128 reg
// RDY_inverseIfc_reportStateDbg  O     1 reg
// inverseIfc_reportMemoryTraffic  O    64 reg
// RDY_inverseIfc_reportMemoryTraffic  O     1 reg
// inverseIfc_error               O   192 reg
// RDY_inverseIfc_error           O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_addrResponse_physAddr      I    64 reg
// ifc_reportStateDbg_rec         I   128 reg
// ifc_reportMemoryTraffic_words  I    64 reg
// ifc_error_code                 I    32 reg
// ifc_error_sglId                I    32 reg
// ifc_error_offset               I    64 reg
// ifc_error_extra                I    64 reg
// EN_ifc_addrResponse            I     1
// EN_ifc_reportStateDbg          I     1
// EN_ifc_reportMemoryTraffic     I     1
// EN_ifc_error                   I     1
// EN_inverseIfc_addrResponse     I     1
// EN_inverseIfc_reportStateDbg   I     1
// EN_inverseIfc_reportMemoryTraffic  I     1
// EN_inverseIfc_error            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMemServerIndicationInverter(CLK,
				     RST_N,

				     ifc_addrResponse_physAddr,
				     EN_ifc_addrResponse,
				     RDY_ifc_addrResponse,

				     ifc_reportStateDbg_rec,
				     EN_ifc_reportStateDbg,
				     RDY_ifc_reportStateDbg,

				     ifc_reportMemoryTraffic_words,
				     EN_ifc_reportMemoryTraffic,
				     RDY_ifc_reportMemoryTraffic,

				     ifc_error_code,
				     ifc_error_sglId,
				     ifc_error_offset,
				     ifc_error_extra,
				     EN_ifc_error,
				     RDY_ifc_error,

				     EN_inverseIfc_addrResponse,
				     inverseIfc_addrResponse,
				     RDY_inverseIfc_addrResponse,

				     EN_inverseIfc_reportStateDbg,
				     inverseIfc_reportStateDbg,
				     RDY_inverseIfc_reportStateDbg,

				     EN_inverseIfc_reportMemoryTraffic,
				     inverseIfc_reportMemoryTraffic,
				     RDY_inverseIfc_reportMemoryTraffic,

				     EN_inverseIfc_error,
				     inverseIfc_error,
				     RDY_inverseIfc_error);
  input  CLK;
  input  RST_N;

  // action method ifc_addrResponse
  input  [63 : 0] ifc_addrResponse_physAddr;
  input  EN_ifc_addrResponse;
  output RDY_ifc_addrResponse;

  // action method ifc_reportStateDbg
  input  [127 : 0] ifc_reportStateDbg_rec;
  input  EN_ifc_reportStateDbg;
  output RDY_ifc_reportStateDbg;

  // action method ifc_reportMemoryTraffic
  input  [63 : 0] ifc_reportMemoryTraffic_words;
  input  EN_ifc_reportMemoryTraffic;
  output RDY_ifc_reportMemoryTraffic;

  // action method ifc_error
  input  [31 : 0] ifc_error_code;
  input  [31 : 0] ifc_error_sglId;
  input  [63 : 0] ifc_error_offset;
  input  [63 : 0] ifc_error_extra;
  input  EN_ifc_error;
  output RDY_ifc_error;

  // actionvalue method inverseIfc_addrResponse
  input  EN_inverseIfc_addrResponse;
  output [63 : 0] inverseIfc_addrResponse;
  output RDY_inverseIfc_addrResponse;

  // actionvalue method inverseIfc_reportStateDbg
  input  EN_inverseIfc_reportStateDbg;
  output [127 : 0] inverseIfc_reportStateDbg;
  output RDY_inverseIfc_reportStateDbg;

  // actionvalue method inverseIfc_reportMemoryTraffic
  input  EN_inverseIfc_reportMemoryTraffic;
  output [63 : 0] inverseIfc_reportMemoryTraffic;
  output RDY_inverseIfc_reportMemoryTraffic;

  // actionvalue method inverseIfc_error
  input  EN_inverseIfc_error;
  output [191 : 0] inverseIfc_error;
  output RDY_inverseIfc_error;

  // signals for module outputs
  wire [191 : 0] inverseIfc_error;
  wire [127 : 0] inverseIfc_reportStateDbg;
  wire [63 : 0] inverseIfc_addrResponse, inverseIfc_reportMemoryTraffic;
  wire RDY_ifc_addrResponse,
       RDY_ifc_error,
       RDY_ifc_reportMemoryTraffic,
       RDY_ifc_reportStateDbg,
       RDY_inverseIfc_addrResponse,
       RDY_inverseIfc_error,
       RDY_inverseIfc_reportMemoryTraffic,
       RDY_inverseIfc_reportStateDbg;

  // ports of submodule fifo_addrResponse
  wire [63 : 0] fifo_addrResponse_D_IN, fifo_addrResponse_D_OUT;
  wire fifo_addrResponse_CLR,
       fifo_addrResponse_DEQ,
       fifo_addrResponse_EMPTY_N,
       fifo_addrResponse_ENQ,
       fifo_addrResponse_FULL_N;

  // ports of submodule fifo_error
  wire [191 : 0] fifo_error_D_IN, fifo_error_D_OUT;
  wire fifo_error_CLR,
       fifo_error_DEQ,
       fifo_error_EMPTY_N,
       fifo_error_ENQ,
       fifo_error_FULL_N;

  // ports of submodule fifo_reportMemoryTraffic
  wire [63 : 0] fifo_reportMemoryTraffic_D_IN, fifo_reportMemoryTraffic_D_OUT;
  wire fifo_reportMemoryTraffic_CLR,
       fifo_reportMemoryTraffic_DEQ,
       fifo_reportMemoryTraffic_EMPTY_N,
       fifo_reportMemoryTraffic_ENQ,
       fifo_reportMemoryTraffic_FULL_N;

  // ports of submodule fifo_reportStateDbg
  wire [127 : 0] fifo_reportStateDbg_D_IN, fifo_reportStateDbg_D_OUT;
  wire fifo_reportStateDbg_CLR,
       fifo_reportStateDbg_DEQ,
       fifo_reportStateDbg_EMPTY_N,
       fifo_reportStateDbg_ENQ,
       fifo_reportStateDbg_FULL_N;

  // action method ifc_addrResponse
  assign RDY_ifc_addrResponse = fifo_addrResponse_FULL_N ;

  // action method ifc_reportStateDbg
  assign RDY_ifc_reportStateDbg = fifo_reportStateDbg_FULL_N ;

  // action method ifc_reportMemoryTraffic
  assign RDY_ifc_reportMemoryTraffic = fifo_reportMemoryTraffic_FULL_N ;

  // action method ifc_error
  assign RDY_ifc_error = fifo_error_FULL_N ;

  // actionvalue method inverseIfc_addrResponse
  assign inverseIfc_addrResponse = fifo_addrResponse_D_OUT ;
  assign RDY_inverseIfc_addrResponse = fifo_addrResponse_EMPTY_N ;

  // actionvalue method inverseIfc_reportStateDbg
  assign inverseIfc_reportStateDbg = fifo_reportStateDbg_D_OUT ;
  assign RDY_inverseIfc_reportStateDbg = fifo_reportStateDbg_EMPTY_N ;

  // actionvalue method inverseIfc_reportMemoryTraffic
  assign inverseIfc_reportMemoryTraffic = fifo_reportMemoryTraffic_D_OUT ;
  assign RDY_inverseIfc_reportMemoryTraffic =
	     fifo_reportMemoryTraffic_EMPTY_N ;

  // actionvalue method inverseIfc_error
  assign inverseIfc_error = fifo_error_D_OUT ;
  assign RDY_inverseIfc_error = fifo_error_EMPTY_N ;

  // submodule fifo_addrResponse
  FIFO2 #(.width(32'd64), .guarded(1'd1)) fifo_addrResponse(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(fifo_addrResponse_D_IN),
							    .ENQ(fifo_addrResponse_ENQ),
							    .DEQ(fifo_addrResponse_DEQ),
							    .CLR(fifo_addrResponse_CLR),
							    .D_OUT(fifo_addrResponse_D_OUT),
							    .FULL_N(fifo_addrResponse_FULL_N),
							    .EMPTY_N(fifo_addrResponse_EMPTY_N));

  // submodule fifo_error
  FIFO2 #(.width(32'd192), .guarded(1'd1)) fifo_error(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(fifo_error_D_IN),
						      .ENQ(fifo_error_ENQ),
						      .DEQ(fifo_error_DEQ),
						      .CLR(fifo_error_CLR),
						      .D_OUT(fifo_error_D_OUT),
						      .FULL_N(fifo_error_FULL_N),
						      .EMPTY_N(fifo_error_EMPTY_N));

  // submodule fifo_reportMemoryTraffic
  FIFO2 #(.width(32'd64),
	  .guarded(1'd1)) fifo_reportMemoryTraffic(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(fifo_reportMemoryTraffic_D_IN),
						   .ENQ(fifo_reportMemoryTraffic_ENQ),
						   .DEQ(fifo_reportMemoryTraffic_DEQ),
						   .CLR(fifo_reportMemoryTraffic_CLR),
						   .D_OUT(fifo_reportMemoryTraffic_D_OUT),
						   .FULL_N(fifo_reportMemoryTraffic_FULL_N),
						   .EMPTY_N(fifo_reportMemoryTraffic_EMPTY_N));

  // submodule fifo_reportStateDbg
  FIFO2 #(.width(32'd128), .guarded(1'd1)) fifo_reportStateDbg(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(fifo_reportStateDbg_D_IN),
							       .ENQ(fifo_reportStateDbg_ENQ),
							       .DEQ(fifo_reportStateDbg_DEQ),
							       .CLR(fifo_reportStateDbg_CLR),
							       .D_OUT(fifo_reportStateDbg_D_OUT),
							       .FULL_N(fifo_reportStateDbg_FULL_N),
							       .EMPTY_N(fifo_reportStateDbg_EMPTY_N));

  // submodule fifo_addrResponse
  assign fifo_addrResponse_D_IN = ifc_addrResponse_physAddr ;
  assign fifo_addrResponse_ENQ = EN_ifc_addrResponse ;
  assign fifo_addrResponse_DEQ = EN_inverseIfc_addrResponse ;
  assign fifo_addrResponse_CLR = 1'b0 ;

  // submodule fifo_error
  assign fifo_error_D_IN =
	     { ifc_error_code,
	       ifc_error_sglId,
	       ifc_error_offset,
	       ifc_error_extra } ;
  assign fifo_error_ENQ = EN_ifc_error ;
  assign fifo_error_DEQ = EN_inverseIfc_error ;
  assign fifo_error_CLR = 1'b0 ;

  // submodule fifo_reportMemoryTraffic
  assign fifo_reportMemoryTraffic_D_IN = ifc_reportMemoryTraffic_words ;
  assign fifo_reportMemoryTraffic_ENQ = EN_ifc_reportMemoryTraffic ;
  assign fifo_reportMemoryTraffic_DEQ = EN_inverseIfc_reportMemoryTraffic ;
  assign fifo_reportMemoryTraffic_CLR = 1'b0 ;

  // submodule fifo_reportStateDbg
  assign fifo_reportStateDbg_D_IN = ifc_reportStateDbg_rec ;
  assign fifo_reportStateDbg_ENQ = EN_ifc_reportStateDbg ;
  assign fifo_reportStateDbg_DEQ = EN_inverseIfc_reportStateDbg ;
  assign fifo_reportStateDbg_CLR = 1'b0 ;
endmodule  // mkMemServerIndicationInverter

